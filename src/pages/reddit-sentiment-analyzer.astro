---
import Layout from '../layouts/Layout.astro';
import FaqAccordion from '../components/FaqAccordion.astro';

const title = 'Reddit Sentiment Analyzer - Free AI-Powered Comment Analysis';
const description = 'Analyze Reddit thread sentiment with VADER. Get instant insights into community opinions, emotions, and reactions. Free, no registration required.';
const url = 'https://senti-meter.com/reddit-sentiment-analyzer';

const faqs = [
  {
    question: 'How does Reddit sentiment analysis work?',
    answer: `Our Reddit sentiment analyzer uses VADER, a free and open-source sentiment analysis engine designed for social media text. When you paste a Reddit URL, our system fetches all available comments using Reddit's public API, then processes them with VADER to determine the emotional tone. The analyzer categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category. For YouTube and premium features, we use advanced AI models.`
  },
  {
    question: 'Is this Reddit analyzer free to use?',
    answer: `Yes! Our Reddit sentiment analyzer is completely free to use with no subscription fees, hidden charges, or usage limits. You can analyze as many Reddit threads as you need without any cost barriers. The free version is powered by VADER sentiment analysis.`
  },
  {
    question: 'What types of Reddit threads can I analyze?',
    answer: `You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis.`
  },
  {
    question: 'How many Reddit comments does the tool analyze?',
    answer: `Our tool analyzes all available comments from each Reddit thread (up to Reddit API limits), focusing on both top-level comments and highly-rated replies to provide a balanced view of community sentiment. This includes both top-level comments and replies. For very large threads, analysis is powered by VADER for speed and scalability.`
  },
  {
    question: 'Do you store Reddit data or track users?',
    answer: `No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information.`
  }
];
---
<Layout>
  <head>
    <title>{title}</title>
    <meta name="description" content={description} />
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/logo.svg" />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/logo.svg" />
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Reddit Sentiment Analyzer" />
    <meta name="keywords" content="reddit, sentiment analysis, comment analysis, thread sentiment, ai analysis, free tool" />
    <link rel="canonical" href={url} />
  </head>

  <!-- Skip Link for Accessibility -->
  <a href="#analysis-form" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-orange-600 text-white px-4 py-2 rounded z-50">
    Skip to analyzer
  </a>

  <main class="min-h-screen bg-gradient-to-br from-slate-50 via-orange-50 to-rose-100 flex items-center justify-center px-1 sm:px-4 py-4 sm:py-8 relative overflow-hidden">
    <!-- Background decorative elements -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-red-200/30 rounded-full blur-3xl"></div>
      <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-blue-200/20 to-purple-200/20 rounded-full blur-3xl"></div>
    </div>
    
    <div class="w-full max-w-4xl mx-auto relative z-10">
      <div class="bg-white/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 p-3 sm:p-8 md:p-12 relative overflow-hidden">
        <!-- Subtle gradient overlay -->
        <div class="absolute inset-0 bg-gradient-to-br from-white/50 to-orange-50/30 pointer-events-none"></div>
        
        <div class="relative z-10">
          <div class="text-center mb-10">
            <h1 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-gray-800 via-orange-600 to-red-600 bg-clip-text text-transparent mb-6">
              Reddit Sentiment Analyzer
            </h1>
            <p class="text-lg text-gray-600 leading-relaxed max-w-2xl mx-auto">
              Paste any Reddit thread link below to get instant sentiment analysis of the comments.
              Discover what the Reddit community really thinks about the discussion with AI-powered insights.
            </p>
          </div>

          <!-- Recent History -->
          <div id="history-container" class="hidden mb-8">
            <h3 class="text-sm font-semibold text-gray-700 mb-4 flex items-center">
              <svg class="w-4 h-4 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
              </svg>
              Recently Analyzed
            </h3>
            <div id="history-list" class="flex flex-wrap gap-3"></div>
          </div>

          <form id="analysis-form" class="space-y-8">
            <div class="space-y-3">
              <label for="reddit-url" class="block text-sm font-semibold text-gray-700 mb-3 flex items-center">
                <svg class="w-4 h-4 mr-2 text-orange-500" width="32" height="32" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 216 216" xml:space="preserve" xmlns:xlink="http://www.w3.org/1999/xlink">
                  <defs>
                    <style>
                      .snoo-cls-1 {
                        fill: url(#snoo-radial-gragient) white;
                      }
                      .snoo-cls-1, .snoo-cls-2, .snoo-cls-3, .snoo-cls-4, .snoo-cls-5, .snoo-cls-6, .snoo-cls-7, .snoo-cls-8, .snoo-cls-9, .snoo-cls-10, .snoo-cls-11 {
                        stroke-width: 0px;
                      }
                      .snoo-cls-2 {
                        fill: url(#snoo-radial-gragient-2) white;
                      }
                      .snoo-cls-3 {
                        fill: url(#snoo-radial-gragient-3) white;
                      }
                      .snoo-cls-4 {
                        fill: url(#snoo-radial-gragient-4) #fc4301;
                      }
                      .snoo-cls-5 {
                        fill: url(#snoo-radial-gragient-6) black;
                      }
                      .snoo-cls-6 {
                        fill: url(#snoo-radial-gragient-8) black;
                      }
                      .snoo-cls-7 {
                        fill: url(#snoo-radial-gragient-5) #fc4301;
                      }
                      .snoo-cls-8 {
                        fill: url(#snoo-radial-gragient-7) white;
                      }
                      .snoo-cls-9 {
                        fill: #842123;
                      }
                      .snoo-cls-10 {
                        fill: #ff4500;
                      }
                      .snoo-cls-11 {
                        fill: #ffc49c;
                      }
                    </style>
                    <radialGradient id="snoo-radial-gragient" cx="169.75" cy="92.19" fx="169.75" fy="92.19" r="50.98" gradientTransform="translate(0 11.64) scale(1 .87)" gradientUnits="userSpaceOnUse">
                      <stop offset="0" stop-color="#feffff"></stop>
                      <stop offset=".4" stop-color="#feffff"></stop>
                      <stop offset=".51" stop-color="#f9fcfc"></stop>
                      <stop offset=".62" stop-color="#edf3f5"></stop>
                      <stop offset=".7" stop-color="#dee9ec"></stop>
                      <stop offset=".72" stop-color="#d8e4e8"></stop>
                      <stop offset=".76" stop-color="#ccd8df"></stop>
                      <stop offset=".8" stop-color="#c8d5dd"></stop>
                      <stop offset=".83" stop-color="#ccd6de"></stop>
                      <stop offset=".85" stop-color="#d8dbe2"></stop>
                      <stop offset=".88" stop-color="#ede3e9"></stop>
                      <stop offset=".9" stop-color="#ffebef"></stop>
                    </radialGradient>
                    <radialGradient id="snoo-radial-gragient-2" cx="47.31" fx="47.31" r="50.98" xlink:href="#snoo-radial-gragient"></radialGradient>
                    <radialGradient id="snoo-radial-gragient-3" cx="109.61" cy="85.59" fx="109.61" fy="85.59" r="153.78" gradientTransform="translate(0 25.56) scale(1 .7)" xlink:href="#snoo-radial-gragient"></radialGradient>
                    <radialGradient id="snoo-radial-gragient-4" cx="-6.01" cy="64.68" fx="-6.01" fy="64.68" r="12.85" gradientTransform="translate(81.08 27.26) scale(1.07 1.55)" gradientUnits="userSpaceOnUse">
                      <stop offset="0" stop-color="#f60"></stop>
                      <stop offset=".5" stop-color="#ff4500"></stop>
                      <stop offset=".7" stop-color="#fc4301"></stop>
                      <stop offset=".82" stop-color="#f43f07"></stop>
                      <stop offset=".92" stop-color="#e53812"></stop>
                      <stop offset="1" stop-color="#d4301f"></stop>
                    </radialGradient>
                    <radialGradient id="snoo-radial-gragient-5" cx="-73.55" cy="64.68" fx="-73.55" fy="64.68" r="12.85" gradientTransform="translate(62.87 27.26) rotate(-180) scale(1.07 -1.55)" xlink:href="#snoo-radial-gragient-4"></radialGradient>
                    <radialGradient id="snoo-radial-gragient-6" cx="107.93" cy="166.96" fx="107.93" fy="166.96" r="45.3" gradientTransform="translate(0 57.4) scale(1 .66)" gradientUnits="userSpaceOnUse">
                      <stop offset="0" stop-color="#172e35"></stop>
                      <stop offset=".29" stop-color="#0e1c21"></stop>
                      <stop offset=".73" stop-color="#030708"></stop>
                      <stop offset="1" stop-color="#000"></stop>
                    </radialGradient>
                    <radialGradient id="snoo-radial-gragient-7" cx="147.88" cy="32.94" fx="147.88" fy="32.94" r="39.77" gradientTransform="translate(0 .54) scale(1 .98)" xlink:href="#snoo-radial-gragient"></radialGradient>
                    <radialGradient id="snoo-radial-gragient-8" cx="131.31" cy="73.08" fx="131.31" fy="73.08" r="32.6" gradientUnits="userSpaceOnUse">
                      <stop offset=".48" stop-color="#7a9299"></stop>
                      <stop offset=".67" stop-color="#172e35"></stop>
                      <stop offset=".75" stop-color="#000"></stop>
                      <stop offset=".82" stop-color="#172e35"></stop>
                    </radialGradient>
                  </defs>
                  <path class="snoo-cls-10" d="m108,0h0C48.35,0,0,48.35,0,108h0c0,29.82,12.09,56.82,31.63,76.37l-20.57,20.57c-4.08,4.08-1.19,11.06,4.58,11.06h92.36s0,0,0,0c59.65,0,108-48.35,108-108h0C216,48.35,167.65,0,108,0Z"></path>
                  <circle class="snoo-cls-1" cx="169.22" cy="106.98" r="25.22"></circle>
                  <circle class="snoo-cls-2" cx="46.78" cy="106.98" r="25.22"></circle>
                  <ellipse class="snoo-cls-3" cx="108.06" cy="128.64" rx="72" ry="54"></ellipse>
                  <path class="snoo-cls-4" d="m86.78,123.48c-.42,9.08-6.49,12.38-13.56,12.38s-12.46-4.93-12.04-14.01c.42-9.08,6.49-15.02,13.56-15.02s12.46,7.58,12.04,16.66Z"></path>
                  <path class="snoo-cls-7" d="m129.35,123.48c.42,9.08,6.49,12.38,13.56,12.38s12.46-4.93,12.04-14.01c-.42-9.08-6.49-15.02-13.56-15.02s-12.46,7.58-12.04,16.66Z"></path>
                  <ellipse class="snoo-cls-11" cx="79.63" cy="116.37" rx="2.8" ry="3.05"></ellipse>
                  <ellipse class="snoo-cls-11" cx="146.21" cy="116.37" rx="2.8" ry="3.05"></ellipse>
                  <path class="snoo-cls-5" d="m108.06,142.92c-8.76,0-17.16.43-24.92,1.22-1.33.13-2.17,1.51-1.65,2.74,4.35,10.39,14.61,17.69,26.57,17.69s22.23-7.3,26.57-17.69c.52-1.23-.33-2.61-1.65-2.74-7.77-.79-16.16-1.22-24.92-1.22Z"></path>
                  <circle class="snoo-cls-8" cx="147.49" cy="49.43" r="17.87"></circle>
                  <path class="snoo-cls-6" d="m107.8,76.92c-2.14,0-3.87-.89-3.87-2.27,0-16.01,13.03-29.04,29.04-29.04,2.14,0,3.87,1.73,3.87,3.87s-1.73,3.87-3.87,3.87c-11.74,0-21.29,9.55-21.29,21.29,0,1.38-1.73,2.27-3.87,2.27Z"></path>
                  <path class="snoo-cls-9" d="m62.82,122.65c.39-8.56,6.08-14.16,12.69-14.16,6.26,0,11.1,6.39,11.28,14.33.17-8.88-5.13-15.99-12.05-15.99s-13.14,6.05-13.56,15.2c-.42,9.15,4.97,13.83,12.04,13.83.17,0,.35,0,.52,0-6.44-.16-11.3-4.79-10.91-13.2Z"></path>
                  <path class="snoo-cls-9" d="m153.3,122.65c-.39-8.56-6.08-14.16-12.69-14.16-6.26,0-11.1,6.39-11.28,14.33-.17-8.88,5.13-15.99,12.05-15.99,7.07,0,13.14,6.05,13.56,15.2.42,9.15-4.97,13.83-12.04,13.83-.17,0-.35,0-.52,0,6.44-.16,11.3-4.79,10.91-13.2Z"></path>
                </svg>
                Paste Reddit Thread URL Here
              </label>
              <div class="flex items-center w-full bg-white/50 rounded-2xl shadow-sm border-2 border-gray-200 focus-within:ring-4 focus-within:ring-orange-500/20 px-2">
                <input
                  type="url"
                  id="reddit-url"
                  name="reddit-url"
                  placeholder="https://www.reddit.com/r/AskReddit/comments/..."
                  class="flex-1 px-4 py-4 bg-transparent border-none focus:ring-0 text-gray-900 placeholder-gray-400 rounded-2xl"
                  required
                  aria-describedby="url-error"
                />
                <button
                  id="analyze-button"
                  type="submit"
                  class="ml-2 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-full w-12 h-12 flex items-center justify-center shadow-lg transition-all duration-300 focus:ring-4 focus:ring-orange-500/30"
                  aria-label="Analyze Reddit Sentiment"
                  style="min-width:3rem; min-height:3rem;"
                >
                  <svg class="w-6 h-6" fill="none" stroke="#fff" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                  </svg>
                </button>
              </div>
              <span id="url-error" class="hidden text-red-600 text-sm mt-2 flex items-center" role="alert">
                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
              </span>
            </div>
          </form>

          <!-- Loading State -->
          <div id="loading-container" class="text-center py-16 hidden">
            <div class="inline-flex flex-col items-center space-y-6 bg-white/90 backdrop-blur-xl border border-white/30 rounded-3xl p-8 shadow-2xl">
              <div class="w-16 h-16 bg-gradient-to-br from-orange-400 to-red-500 rounded-2xl flex items-center justify-center shadow-lg animate-pulse">
                <svg class="w-8 h-8 text-white animate-spin" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>
              <div class="text-center">
                <h3 class="text-xl font-bold text-gray-800 mb-2" id="loading-title">Generating results...</h3>
                <p class="text-sm text-gray-600 mb-4" id="progress-text">Starting analysis...</p>
                <div class="w-80 bg-gray-200/50 rounded-full h-3 overflow-hidden shadow-inner">
                  <div class="bg-gradient-to-r from-orange-400 to-red-500 h-3 rounded-full transition-all duration-500 ease-out shadow-sm" id="progress-fill" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Error State -->
          <div id="error-state" class="hidden mt-8 p-6 bg-red-50/80 backdrop-blur-sm border border-red-200 rounded-2xl" role="alert" aria-live="assertive">
            <div class="flex items-start space-x-3">
              <div class="flex-shrink-0">
                <svg class="w-6 h-6 text-red-500" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div class="flex-1">
                <span class="text-red-800 font-semibold">Error:</span>
                <span class="text-red-700 ml-1" id="error-message"></span>
                <div id="error-suggestions" class="mt-2 text-sm text-red-600"></div>
              </div>
            </div>
          </div>

          <!-- Thread Info Card - Enhanced Design -->
          <div id="thread-info" class="mt-10 mb-8 bg-white/90 backdrop-blur-xl rounded-3xl border border-white/30 shadow-2xl overflow-hidden hidden transform transition-all duration-500 hover:scale-[1.02]">
            <!-- Header with Reddit branding -->
            <div class="bg-gradient-to-r from-red-600 via-orange-600 to-red-600 px-6 py-5 shadow-xl relative overflow-hidden">
              <div class="absolute inset-0 bg-gradient-to-r from-white/10 to-transparent"></div>
              <div class="relative flex items-center space-x-4">
                <div class="bg-white/20 backdrop-blur-sm p-3 rounded-2xl shadow-lg">
                  <img src="https://styles.redditmedia.com/t5_6/styles/communityIcon_a8uzjit9bwr21.png?width=128&frame=1&auto=webp&s=9c4c20e9160d1ca6a575c7932b132f0b5f4a05ef" alt="Reddit" class="w-7 h-7 rounded-lg object-cover" />
                </div>
                <span class="text-white font-black text-xl tracking-wide drop-shadow-lg">Reddit Thread</span>
              </div>
            </div>
            
            <!-- Content -->
            <div class="p-6">
              <div class="flex flex-col sm:flex-row sm:items-start sm:space-x-6 space-y-4 sm:space-y-0">
                <!-- Image Container -->
                <div id="thread-image-container" class="w-24 h-24 sm:w-28 sm:h-24 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center flex-shrink-0 overflow-hidden mx-auto sm:mx-0 border border-gray-200/50 shadow-lg">
                  <!-- Reddit post image will be inserted here by JS -->
                </div>
                
                <!-- Text Content -->
                <div class="flex-1 min-w-0">
                  <!-- Title -->
                  <h2 id="thread-title" class="font-bold text-gray-900 text-lg sm:text-xl mb-4 leading-tight break-words"></h2>
                  
                  <!-- Metadata Grid -->
                  <div class="flex flex-col space-y-3 text-sm sm:text-base">
                    <!-- Subreddit -->
                    <div class="flex items-center justify-center sm:justify-start space-x-2 bg-orange-50/50 rounded-xl px-4 py-2">
                      <svg class="w-4 h-4 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <span class="text-gray-600 font-medium">Subreddit:</span>
                      <span id="subreddit-name" class="font-semibold text-orange-600"></span>
                    </div>
                    
                    <!-- Author -->
                    <div class="flex items-center justify-center sm:justify-start space-x-2 bg-gray-50/50 rounded-xl px-4 py-2">
                      <svg class="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                      </svg>
                      <span class="text-gray-600 font-medium">Author:</span>
                      <span id="thread-author" class="font-semibold text-gray-700 break-words"></span>
                    </div>
                    
                    <!-- Upvotes -->
                    <div class="flex items-center justify-center sm:justify-start space-x-2 bg-green-50/50 rounded-xl px-4 py-2">
                      <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                      </svg>
                      <span class="text-gray-600 font-medium">Upvotes:</span>
                      <span id="thread-score" class="font-semibold text-green-600"></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Results - Mobile-First Design -->
          <div id="results-container" class="hidden mt-8 space-y-6">
            <!-- Sample Info - Mobile Optimized -->
            <div id="sample-info" class="text-sm text-orange-700 font-medium text-center hidden bg-orange-50/50 backdrop-blur-sm rounded-2xl px-4 py-3 border border-orange-200/50"></div>
            
            <!-- Sentiment Summary Card - Mobile First -->
            <div class="bg-white/90 backdrop-blur-xl border border-white/30 rounded-3xl p-6 shadow-2xl transform transition-all duration-500 hover:scale-[1.02]">
              <div class="flex items-center justify-center mb-6">
                <h3 class="text-xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">Advanced Sentiment Analysis</h3>
              </div>
              
              <!-- Sophisticated Sentiment Grid -->
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                <!-- Genuine Positive -->
                <div class="bg-gradient-to-r from-green-50/50 to-emerald-50/50 backdrop-blur-sm rounded-2xl p-4 border border-green-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-green-400 to-emerald-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😊</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-green-700">Genuine Positive</span>
                        <span class="text-lg font-bold text-green-700" id="genuine-positive-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-green-600 to-emerald-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="genuine-positive-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Skeptical -->
                <div class="bg-gradient-to-r from-yellow-50/50 to-amber-50/50 backdrop-blur-sm rounded-2xl p-4 border border-yellow-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-yellow-400 to-amber-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">🤔</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-yellow-700">Skeptical</span>
                        <span class="text-lg font-bold text-yellow-700" id="skeptical-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-yellow-600 to-amber-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="skeptical-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Sarcastic -->
                <div class="bg-gradient-to-r from-purple-50/50 to-violet-50/50 backdrop-blur-sm rounded-2xl p-4 border border-purple-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-purple-400 to-violet-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">🙄</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-purple-700">Sarcastic</span>
                        <span class="text-lg font-bold text-purple-700" id="sarcastic-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-purple-600 to-violet-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="sarcastic-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Critical -->
                <div class="bg-gradient-to-r from-red-50/50 to-rose-50/50 backdrop-blur-sm rounded-2xl p-4 border border-red-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-red-400 to-rose-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">👎</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-red-700">Critical</span>
                        <span class="text-lg font-bold text-red-700" id="critical-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-red-600 to-rose-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="critical-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Frustrated -->
                <div class="bg-gradient-to-r from-orange-50/50 to-red-50/50 backdrop-blur-sm rounded-2xl p-4 border border-orange-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-orange-400 to-red-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😤</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-orange-700">Frustrated</span>
                        <span class="text-lg font-bold text-orange-700" id="frustrated-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-orange-600 to-red-600 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="frustrated-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Fearful -->
                <div class="bg-gradient-to-r from-indigo-50/50 to-blue-50/50 backdrop-blur-sm rounded-2xl p-4 border border-indigo-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-indigo-400 to-blue-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😰</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-indigo-700">Fearful</span>
                        <span class="text-lg font-bold text-indigo-700" id="fearful-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-indigo-600 to-blue-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="fearful-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Cynical -->
                <div class="bg-gradient-to-r from-slate-50/50 to-gray-50/50 backdrop-blur-sm rounded-2xl p-4 border border-slate-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-slate-400 to-gray-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😒</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-slate-700">Cynical</span>
                        <span class="text-lg font-bold text-slate-700" id="cynical-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-slate-600 to-gray-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="cynical-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Resigned -->
                <div class="bg-gradient-to-r from-gray-50/50 to-slate-50/50 backdrop-blur-sm rounded-2xl p-4 border border-gray-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-gray-400 to-slate-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😔</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-gray-700">Resigned</span>
                        <span class="text-lg font-bold text-gray-700" id="resigned-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-gray-600 to-slate-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="resigned-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Neutral -->
                <div class="bg-gradient-to-r from-blue-50/50 to-cyan-50/50 backdrop-blur-sm rounded-2xl p-4 border border-blue-200/30">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-cyan-500 rounded-xl flex items-center justify-center shadow-lg flex-shrink-0">
                      <span class="text-white font-bold text-sm">😐</span>
                    </div>
                    <div class="flex-1">
                      <div class="flex justify-between items-center mb-2">
                        <span class="text-xs font-semibold text-blue-700">Neutral</span>
                        <span class="text-lg font-bold text-blue-700" id="neutral-percentage">0%</span>
                      </div>
                      <div class="w-full bg-gray-200/50 rounded-full h-3 overflow-hidden">
                        <div class="bg-gradient-to-r from-blue-600 to-cyan-700 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm" id="neutral-bar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Summary -->
              <div class="mt-6 p-4 bg-gradient-to-r from-blue-50/50 to-indigo-50/50 backdrop-blur-sm rounded-2xl border border-blue-200/30">
                <p class="text-sm text-blue-800 font-medium text-center" id="sentiment-summary"></p>
              </div>
              
              <!-- Detailed Analysis -->
              <div id="detailed-analysis" class="mt-6 p-6 bg-gradient-to-r from-slate-50/50 to-gray-50/50 backdrop-blur-sm rounded-2xl border border-gray-200/30 hidden">
                <div class="flex items-center mb-4">
                  <h4 class="text-lg font-bold text-gray-800">Detailed Analysis</h4>
                  </div>
                <p class="text-gray-700 leading-relaxed" id="detailed-analysis-text"></p>
              </div>
              
              <!-- AI Badge -->
              <div id="powered-by-ai" class="mt-6 text-center hidden">
                <div class="inline-flex items-center gap-3 px-4 py-2 bg-gradient-to-r from-purple-50/50 to-violet-50/50 backdrop-blur-sm border border-purple-200/30 rounded-2xl shadow-sm">
                  <span class="text-xs font-semibold text-purple-700">Powered by ChatGPT</span>
                </div>
              </div>
            </div>
            
            <!-- Most Upvoted Comment - Always Visible -->
            <div id="most-upvoted-callout" class="bg-white/90 backdrop-blur-xl border border-white/30 rounded-3xl p-6 shadow-2xl hidden transform transition-all duration-500 hover:scale-[1.02]">
              <div class="flex items-center space-x-4 mb-4">
                  <div class="w-12 h-12 bg-gradient-to-br from-yellow-400 to-amber-500 rounded-2xl flex items-center justify-center shadow-lg">
                  <svg fill="currentColor" height="20" width="20" viewBox="0 0 20 20" class="text-white">
                    <path d="M10 19c-.072 0-.145 0-.218-.006A4.1 4.1 0 0 1 6 14.816V11H2.862a1.751 1.751 0 0 1-1.234-2.993L9.41.28a.836.836 0 0 1 1.18 0l7.782 7.727A1.751 1.751 0 0 1 17.139 11H14v3.882a4.134 4.134 0 0 1-.854 2.592A3.99 3.99 0 0 1 10 19Zm0-17.193L2.685 9.071a.251.251 0 0 0 .177.429H7.5v5.316A2.63 2.63 0 0 0 9.864 17.5a2.441 2.441 0 0 0 1.856-.682A2.478 2.478 0 0 0 12.5 15V9.5h4.639a.25.25 0 0 0 .176-.429L10 1.807Z"></path>
                  </svg>
                  </div>
                  <span class="font-bold text-gray-800 text-lg" id="most-upvoted-label"></span>
                </div>
              <div id="most-upvoted-content">
                <blockquote class="text-gray-700 italic text-sm bg-white/50 backdrop-blur-sm rounded-2xl p-4 border border-white/30" id="most-upvoted-text"></blockquote>
              </div>
            </div>
            
            <!-- Advanced Navigation Tabs -->
            <div class="bg-white/90 backdrop-blur-xl border border-white/30 rounded-3xl overflow-hidden shadow-2xl">
              <div class="flex flex-wrap border-b border-gray-200/50" id="sentiment-tabs">
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-green-700 bg-gradient-to-r from-green-50/50 to-emerald-50/50 border-b-2 border-green-500 transition-all duration-300 hover:bg-green-100/50 flex items-center justify-center gap-1" data-tab="genuinePositive">
                  <span>😊</span>
                  <span>Genuine Positive</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="skeptical">
                  <span>🤔</span>
                  <span>Skeptical</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="sarcastic">
                  <span>🙄</span>
                  <span>Sarcastic</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="critical">
                  <span>👎</span>
                  <span>Critical</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="frustrated">
                  <span>😤</span>
                  <span>Frustrated</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="fearful">
                  <span>😰</span>
                  <span>Fearful</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="cynical">
                  <span>😒</span>
                  <span>Cynical</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="resigned">
                  <span>😔</span>
                  <span>Resigned</span>
                </button>
                <button class="flex-1 min-w-0 py-3 px-3 text-xs font-semibold text-gray-500 hover:text-gray-700 bg-white/50 transition-all duration-300 hover:bg-gray-50/50 flex items-center justify-center gap-1" data-tab="neutral">
                  <span>😐</span>
                  <span>Neutral</span>
                </button>
              </div>
              
              <!-- Tab Content -->
              <div class="p-6">
                <div id="genuinePositive-tab" class="tab-content">
                  <div id="genuinePositive-comments" class="space-y-4"></div>
                </div>
                <div id="skeptical-tab" class="tab-content hidden">
                  <div id="skeptical-comments" class="space-y-4"></div>
                </div>
                <div id="sarcastic-tab" class="tab-content hidden">
                  <div id="sarcastic-comments" class="space-y-4"></div>
                </div>
                <div id="critical-tab" class="tab-content hidden">
                  <div id="critical-comments" class="space-y-4"></div>
                </div>
                <div id="frustrated-tab" class="tab-content hidden">
                  <div id="frustrated-comments" class="space-y-4"></div>
                </div>
                <div id="fearful-tab" class="tab-content hidden">
                  <div id="fearful-comments" class="space-y-4"></div>
                </div>
                <div id="cynical-tab" class="tab-content hidden">
                  <div id="cynical-comments" class="space-y-4"></div>
                </div>
                <div id="resigned-tab" class="tab-content hidden">
                  <div id="resigned-comments" class="space-y-4"></div>
                </div>
                <div id="neutral-tab" class="tab-content hidden">
                  <div id="neutral-comments" class="space-y-4"></div>
                </div>
              </div>
            </div>
            
            <!-- Floating Action Buttons -->
            <div class="flex gap-4 mt-8">
              <button id="analyze-another" class="flex-1 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white font-semibold py-4 px-6 rounded-2xl transition-all duration-300 focus:ring-4 focus:ring-gray-500/30 focus:ring-offset-2 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 active:translate-y-0 flex items-center justify-center space-x-2">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>
                </svg>
                <span>Analyze Another</span>
              </button>
              <button id="share-results" class="flex-1 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-semibold py-4 px-6 rounded-2xl transition-all duration-300 focus:ring-4 focus:ring-orange-500/30 focus:ring-offset-2 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 active:translate-y-0 flex items-center justify-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.632 4.316C18.114 15.062 18 14.518 18 14c0-.482.114-.938.316-1.342m0 2.684a3 3 0 110-2.684M9 10a1 1 0 100-2 1 1 0 000 2zm6 12a1 1 0 100-2 1 1 0 000 2zM9 21a1 1 0 100-2 1 1 0 000 2z"></path>
                </svg>
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- How It Works Section -->
  <section id="how-it-works" class="py-16 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">How Our Reddit Sentiment Analyzer Works</h2>
        <p class="text-lg text-gray-600">Get instant sentiment insights in just three simple steps</p>
      </div>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Step 1 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-orange-600">1</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Paste Reddit URL</h3>
          <p class="text-gray-600">Simply copy any Reddit thread link and paste it into our analyzer. We support all standard Reddit URL formats.</p>
        </div>
        <!-- Step 2 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-purple-600">2</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">AI Analysis</h3>
          <p class="text-gray-600">Our advanced AI analyzes up to 300 comments, understanding context, sarcasm, and emotional nuances. The process takes just 10-30 seconds.</p>
        </div>
        <!-- Step 3 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-green-600">3</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Get Insights</h3>
          <p class="text-gray-600">Receive detailed sentiment breakdowns, percentage analysis, sample comments, and a comprehensive summary of community opinions.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Use Cases Section -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Who Uses Reddit Sentiment Analysis?</h2>
        <p class="text-lg text-gray-600">Discover how different professionals leverage Reddit sentiment insights</p>
      </div>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Market Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Market Researchers</h3>
          <p class="text-gray-600 mb-4">Analyze public opinion on products, brands, and trends by studying Reddit community discussions and sentiment patterns.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Track brand perception across communities</li>
            <li>• Identify emerging trends and opinions</li>
            <li>• Analyze competitor discussions</li>
            <li>• Study consumer behavior patterns</li>
          </ul>
        </div>
        
        <!-- Social Media Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Social Media Managers</h3>
          <p class="text-gray-600 mb-4">Monitor brand mentions and community discussions to understand audience sentiment and improve engagement strategies.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Monitor brand mentions</li>
            <li>• Track campaign performance</li>
            <li>• Identify community hot topics</li>
            <li>• Measure audience engagement</li>
          </ul>
        </div>
        
        <!-- Product Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Product Managers</h3>
          <p class="text-gray-600 mb-4">Gather user feedback and feature requests from Reddit communities to inform product development decisions.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Analyze user feedback</li>
            <li>• Identify feature requests</li>
            <li>• Monitor product discussions</li>
            <li>• Track user satisfaction</li>
          </ul>
        </div>
        
        <!-- Academic Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Academic Researchers</h3>
          <p class="text-gray-600 mb-4">Study social phenomena, public opinion, and community behavior through Reddit sentiment analysis for academic research.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Social behavior analysis</li>
            <li>• Public opinion studies</li>
            <li>• Community research</li>
            <li>• Trend identification</li>
          </ul>
        </div>
        
        <!-- Content Creators -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Content Creators</h3>
          <p class="text-gray-600 mb-4">Understand audience reactions to content ideas and topics by analyzing relevant Reddit discussions and community sentiment.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Content idea validation</li>
            <li>• Audience interest analysis</li>
            <li>• Topic research</li>
            <li>• Community engagement tracking</li>
          </ul>
        </div>
        
        <!-- Business Analysts -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Business Analysts</h3>
          <p class="text-gray-600 mb-4">Analyze market sentiment, competitor discussions, and industry trends through Reddit community conversations.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Market sentiment analysis</li>
            <li>• Competitive intelligence</li>
            <li>• Industry trend monitoring</li>
            <li>• Consumer insight gathering</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- AdSense Ad Placement -->
  <section class="py-8 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <div class="bg-white border-2 border-dashed border-gray-300 rounded-lg p-8">
          <div class="text-gray-500">
            <h3 class="text-lg font-medium mb-2">Advertisement</h3>
            <p class="text-sm">AdSense ad will be displayed here</p>
            <div class="mt-4 w-full h-32 bg-gray-100 rounded flex items-center justify-center">
              <span class="text-gray-400">728x90 Ad Unit</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section id="faq" class="bg-white py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
        <p class="text-lg text-gray-600">Everything you need to know about our Reddit sentiment analyzer</p>
      </div>
      <FaqAccordion faqs={faqs} />
    </div>
  </section>

  <!-- JSON-LD Schema -->
  <script type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Reddit Sentiment Analyzer",
      "description": "Free AI-powered tool to analyze Reddit thread comment sentiment instantly. Get percentage breakdowns, sentiment summaries, and community insights in seconds.",
      "url": "https://www.senti-meter.com/reddit-sentiment-analyzer",
      "applicationCategory": "AnalyticsApplication",
      "operatingSystem": "Any",
      "browserRequirements": "Requires JavaScript",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock"
      },
      "featureList": [
        "AI-powered sentiment analysis using GPT-4o",
        "Analyzes up to 300 Reddit comments",
        "Real-time processing with instant results",
        "Privacy-focused with no data storage",
        "Supports all Reddit URL formats",
        "Percentage breakdowns by sentiment",
        "Sample comments for each sentiment category",
        "Most upvoted comment highlighting"
      ]
    }
  </script>

  <!-- JavaScript -->
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    // Security utilities (reused from YouTube analyzer)
    const SecurityUtils = {
      escapeHtml: (text: string) => {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      },
      isValidUrl: (string: string) => {
        try {
          const url = new URL(string);
          return ['http:', 'https:'].includes(url.protocol);
        } catch (_) {
          return false;
        }
      },
      isValidRedditUrl: (url: string) => {
        if (!SecurityUtils.isValidUrl(url)) return false;
        const patterns = [
          /^https?:\/\/(www\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(old\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(new\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
        ];
        return patterns.some(pattern => pattern.test(url));
      },
      safeSetText: (element: HTMLElement | null, text: string) => {
        if (element && typeof text === 'string') {
          element.textContent = text;
        }
      },
      decodeHtmlEntities: (str: string) => {
        const txt = document.createElement('textarea');
        txt.innerHTML = str;
        return txt.value;
      },
      rateLimiter: (() => {
        const requests = new Map();
        const WINDOW_MS = 60000;
        const MAX_REQUESTS = 5;
        return {
          isAllowed: () => {
            const now = Date.now();
            const windowStart = now - WINDOW_MS;
            for (const [time, count] of requests.entries()) {
              if (time < windowStart) {
                requests.delete(time);
              }
            }
            let recentRequests = 0;
            for (const [time, count] of requests.entries()) {
              if (time >= windowStart) {
                recentRequests += count;
              }
            }
            if (recentRequests >= MAX_REQUESTS) {
              return false;
            }
            const minute = Math.floor(now / WINDOW_MS) * WINDOW_MS;
            requests.set(minute, (requests.get(minute) || 0) + 1);
            return true;
          }
        };
      })()
    };

    // Cache all DOM elements
    const elements = {
      form: document.getElementById('analysis-form'),
      urlInput: document.getElementById('reddit-url'),
      urlError: document.getElementById('url-error'),
      analyzeButton: document.getElementById('analyze-button'),
      loadingContainer: document.getElementById('loading-container'),
      loadingTitle: document.getElementById('loading-title'),
      progressText: document.getElementById('progress-text'),
      progressFill: document.getElementById('progress-fill'),
      errorContainer: document.getElementById('error-container'),
      errorMessage: document.getElementById('error-message'),
      errorSuggestions: document.getElementById('error-suggestions'), // Add missing element
      resultsContainer: document.getElementById('results-container'),
      threadInfo: document.getElementById('thread-info'),
      threadTitle: document.getElementById('thread-title'),
      threadSubreddit: document.getElementById('thread-subreddit'),
      threadAuthor: document.getElementById('thread-author'),
      threadScore: document.getElementById('thread-score'),
      threadImage: document.getElementById('thread-image'),
      threadImageContainer: document.getElementById('thread-image-container'),
      mostUpvotedCallout: document.getElementById('most-upvoted-callout'),
      mostUpvotedText: document.getElementById('most-upvoted-text'),
      mostUpvotedLabel: document.getElementById('most-upvoted-label'),
      sentimentSummary: document.getElementById('sentiment-summary'),
      detailedAnalysis: document.getElementById('detailed-analysis'),
      detailedAnalysisText: document.getElementById('detailed-analysis-text'),
      genuinePositivePercentage: document.getElementById('genuine-positive-percentage'),
      genuinePositiveBar: document.getElementById('genuine-positive-bar'),
      genuinePositiveComments: document.getElementById('genuinePositive-comments'),
      skepticalPercentage: document.getElementById('skeptical-percentage'),
      skepticalBar: document.getElementById('skeptical-bar'),
      skepticalComments: document.getElementById('skeptical-comments'),
      sarcasticPercentage: document.getElementById('sarcastic-percentage'),
      sarcasticBar: document.getElementById('sarcastic-bar'),
      sarcasticComments: document.getElementById('sarcastic-comments'),
      criticalPercentage: document.getElementById('critical-percentage'),
      criticalBar: document.getElementById('critical-bar'),
      criticalComments: document.getElementById('critical-comments'),
      frustratedPercentage: document.getElementById('frustrated-percentage'),
      frustratedBar: document.getElementById('frustrated-bar'),
      frustratedComments: document.getElementById('frustrated-comments'),
      fearfulPercentage: document.getElementById('fearful-percentage'),
      fearfulBar: document.getElementById('fearful-bar'),
      fearfulComments: document.getElementById('fearful-comments'),
      cynicalPercentage: document.getElementById('cynical-percentage'),
      cynicalBar: document.getElementById('cynical-bar'),
      cynicalComments: document.getElementById('cynical-comments'),
      resignedPercentage: document.getElementById('resigned-percentage'),
      resignedBar: document.getElementById('resigned-bar'),
      resignedComments: document.getElementById('resigned-comments'),
      neutralPercentage: document.getElementById('neutral-percentage'),
      neutralBar: document.getElementById('neutral-bar'),
      neutralComments: document.getElementById('neutral-comments'),
      historyContainer: document.getElementById('history-container'), // Add missing element
      historyList: document.getElementById('history-list'), // Add missing element
      analyzeAnother: document.getElementById('analyze-another'), // Add missing element
      shareResults: document.getElementById('share-results'), // Add missing element
    };

    // Helper functions
    function showLoading(message: string = 'Generating results...') {
      hideAllStates();
      if (elements.loadingContainer) {
        elements.loadingContainer.classList.remove('hidden');
            }
      if (elements.loadingTitle) {
        (elements.loadingTitle as HTMLElement).textContent = message;
      }
      if (elements.progressText) {
        (elements.progressText as HTMLElement).textContent = 'Starting...';
      }
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '0%';
      }
    }

    function hideAllStates() {
      elements.loadingContainer?.classList.add('hidden');
      elements.errorContainer?.classList.add('hidden');
      elements.resultsContainer?.classList.add('hidden');
    }

    // Mobile functionality will be handled by existing code

    // Application state
    let isAnalyzing = false;
    let lastAnalyzedUrl = '';
    let currentRedditUrl = '';
    let currentSummary = '';
    let currentCommentsMetadata: any[] = []; // Store comments metadata for threading context
    let progressInterval: ReturnType<typeof setInterval> | null = null;
    let progressStage = 0;
    let currentSessionId = ''; // Add session ID for progress tracking
    let progressEventSource: EventSource | null = null; // Add EventSource for real-time progress

    const progressMessages = [
      'Validating URL...',
      'Connecting to Reddit...',
      'Fetching comments...',
      'Preparing for analysis...',
      'Analyzing sentiment with AI...',
      'Generating results...'
    ];

    // Results cache
    const analysisCache = new Map();
    const CACHE_DURATION = 5 * 60 * 1000;

    function showError(message: string) {
      hideAllStates();
      SecurityUtils.safeSetText(elements.errorMessage, message);
      elements.errorContainer?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }
      let suggestion = '';
      if (message.toLowerCase().includes('url') || message.toLowerCase().includes('format')) {
        suggestion = 'Tip: Copy the complete URL from your browser\'s address bar.';
      } else if (message.toLowerCase().includes('comments') || message.toLowerCase().includes('private')) {
        suggestion = 'Tip: Make sure the thread is public and has comments.';
      } else if (message.toLowerCase().includes('rate limit')) {
        suggestion = 'Tip: Wait a few minutes before trying again.';
      }
      SecurityUtils.safeSetText(elements.errorSuggestions, suggestion);
    }

    function startProgress() {
      progressStage = 0;
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '0%';
      }
      updateProgress();
      progressInterval = setInterval(updateProgress, 1000);
    }

    function updateProgress() {
      if (progressStage < progressMessages.length) {
        SecurityUtils.safeSetText(elements.loadingTitle, progressMessages[progressStage]);
        const progress = ((progressStage + 1) / progressMessages.length) * 90;
        if (elements.progressFill) {
          (elements.progressFill as HTMLElement).style.width = `${progress}%`;
        }
        progressStage++;
      }
    }

    function clearProgress() {
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      progressStage = 0;
    }

    function showResults(data: any, meta: any) {
      hideAllStates();
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '100%';
      }

      // Store comments metadata for threading context
      currentCommentsMetadata = data.commentsWithMetadata || [];

      // Display thread info
      if (meta.threadInfo) {
        displayThreadInfo(meta.threadInfo);
      }

      // Display most upvoted comment
      if (meta.mostUpvoted) {
        displayMostUpvotedComment(meta.mostUpvoted);
      }

      // Update sentiment data
      displaySentimentData(data, meta);
      displaySampleComments(data.sampleComments);

      elements.resultsContainer?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }

      currentSummary = data.summary || '';
      if (meta.threadInfo?.title) {
        addToHistory(currentRedditUrl, meta.threadInfo.title);
      }
    }

    function displayThreadInfo(threadInfo: any) {
      SecurityUtils.safeSetText(elements.threadTitle, threadInfo.title || '');
      SecurityUtils.safeSetText(elements.threadSubreddit, `r/${threadInfo.subreddit}` || '');
      SecurityUtils.safeSetText(elements.threadAuthor, `u/${threadInfo.author}` || '');
      SecurityUtils.safeSetText(elements.threadScore, threadInfo.score?.toString() || '0');
      // Set post image if available
      const imageContainer = document.getElementById('thread-image-container');
      if (imageContainer) {
        imageContainer.innerHTML = '';
        console.log('Thread image URL:', threadInfo.imageUrl);
        if (threadInfo.imageUrl) {
          const img = document.createElement('img');
          img.src = threadInfo.imageUrl;
          img.alt = `Reddit post image for "${threadInfo.title || 'thread'}"`;
          img.className = 'object-cover w-full h-full rounded-lg border border-gray-200 bg-white';
          img.onerror = function() { 
            console.error('Image failed to load:', threadInfo.imageUrl);
            this.style.display = 'none'; 
            imageContainer.innerHTML = `<svg class="w-8 h-8 md:w-12 md:h-12 text-white mx-auto" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`; 
          };
          img.onload = function() {
            console.log('Image loaded successfully:', threadInfo.imageUrl);
          };
          imageContainer.appendChild(img);
        } else {
          console.log('No image URL found, using fallback');
          // fallback: Reddit logo SVG
          imageContainer.innerHTML = `<svg class="w-8 h-8 md:w-12 md:h-12 text-white mx-auto" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`;
        }
      }
      elements.threadInfo?.classList.remove('hidden');
    }

    function displayMostUpvotedComment(mostUpvoted: any) {
      console.log('displayMostUpvotedComment called with:', mostUpvoted);
      if (mostUpvoted.text && typeof mostUpvoted.score === 'number') {
        const timeAgo = formatRedditTime(mostUpvoted.created);
        const scoreFormatted = formatRedditScore(mostUpvoted.score);
        // Create sentiment label
        let sentimentLabel = '';
        let sentimentColor = '';
        console.log('Most upvoted sentiment:', mostUpvoted.sentiment);
        if (mostUpvoted.sentiment) {
          switch (mostUpvoted.sentiment) {
            case 'positive':
              sentimentLabel = 'Positive';
              sentimentColor = 'bg-green-100 text-green-800';
              break;
            case 'negative':
              sentimentLabel = 'Negative';
              sentimentColor = 'bg-red-100 text-red-800';
              break;
            case 'neutral':
            default:
              sentimentLabel = 'Neutral';
              sentimentColor = 'bg-gray-100 text-gray-800';
              break;
          }
        }
        console.log('Sentiment label created:', sentimentLabel, sentimentColor);
        SecurityUtils.safeSetText(elements.mostUpvotedLabel, `Most upvoted comment (${scoreFormatted} upvotes):`);
        // Format the most upvoted comment with Reddit-style formatting
        const formattedComment = formatRedditComment(mostUpvoted.text);
        if (elements.mostUpvotedText) {
          elements.mostUpvotedText.innerHTML = `
            <div class="flex items-center space-x-2 mb-2 text-xs text-gray-500">
              <span class="font-medium text-gray-700">${escapeHtml(mostUpvoted.author)}</span>
              <span>•</span>
              <span>${timeAgo}</span>
              <span>•</span>
              <span class="flex items-center">
                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
                ${scoreFormatted}
              </span>
              ${sentimentLabel ? `<span>•</span><span class="px-2 py-1 rounded-full text-xs font-medium ${sentimentColor}">${sentimentLabel}</span>` : ''}
            </div>
            <div class="text-gray-800 leading-relaxed">
              ${formattedComment.html}
            </div>
          `;
        }
        elements.mostUpvotedCallout?.classList.remove('hidden');
      }
    }

    function displaySentimentData(data: any, meta: any) {
      // Extract all sentiment percentages
      const genuinePositive = Math.max(0, Math.min(100, Math.round(Number(data.genuinePositive) || 0)));
      const skeptical = Math.max(0, Math.min(100, Math.round(Number(data.skeptical) || 0)));
      const sarcastic = Math.max(0, Math.min(100, Math.round(Number(data.sarcastic) || 0)));
      const critical = Math.max(0, Math.min(100, Math.round(Number(data.critical) || 0)));
      const frustrated = Math.max(0, Math.min(100, Math.round(Number(data.frustrated) || 0)));
      const fearful = Math.max(0, Math.min(100, Math.round(Number(data.fearful) || 0)));
      const cynical = Math.max(0, Math.min(100, Math.round(Number(data.cynical) || 0)));
      const resigned = Math.max(0, Math.min(100, Math.round(Number(data.resigned) || 0)));
      const neutral = Math.max(0, Math.min(100, Math.round(Number(data.neutral) || 0)));

      // Update all percentage displays
      const genuinePositiveEl = document.getElementById('genuine-positive-percentage');
      const skepticalEl = document.getElementById('skeptical-percentage');
      const sarcasticEl = document.getElementById('sarcastic-percentage');
      const criticalEl = document.getElementById('critical-percentage');
      const frustratedEl = document.getElementById('frustrated-percentage');
      const fearfulEl = document.getElementById('fearful-percentage');
      const cynicalEl = document.getElementById('cynical-percentage');
      const resignedEl = document.getElementById('resigned-percentage');
      const neutralEl = document.getElementById('neutral-percentage');

      SecurityUtils.safeSetText(genuinePositiveEl, `${genuinePositive}%`);
      SecurityUtils.safeSetText(skepticalEl, `${skeptical}%`);
      SecurityUtils.safeSetText(sarcasticEl, `${sarcastic}%`);
      SecurityUtils.safeSetText(criticalEl, `${critical}%`);
      SecurityUtils.safeSetText(frustratedEl, `${frustrated}%`);
      SecurityUtils.safeSetText(fearfulEl, `${fearful}%`);
      SecurityUtils.safeSetText(cynicalEl, `${cynical}%`);
      SecurityUtils.safeSetText(resignedEl, `${resigned}%`);
      SecurityUtils.safeSetText(neutralEl, `${neutral}%`);

      // Animate all progress bars with staggered timing
      const bars = [
        { id: 'genuine-positive-bar', value: genuinePositive, delay: 100 },
        { id: 'skeptical-bar', value: skeptical, delay: 200 },
        { id: 'sarcastic-bar', value: sarcastic, delay: 300 },
        { id: 'critical-bar', value: critical, delay: 400 },
        { id: 'frustrated-bar', value: frustrated, delay: 500 },
        { id: 'fearful-bar', value: fearful, delay: 600 },
        { id: 'cynical-bar', value: cynical, delay: 700 },
        { id: 'resigned-bar', value: resigned, delay: 800 },
        { id: 'neutral-bar', value: neutral, delay: 900 }
      ];

      bars.forEach(bar => {
      setTimeout(() => {
          const barElement = document.getElementById(bar.id);
          if (barElement) {
            (barElement as HTMLElement).style.width = '0%';
          setTimeout(() => {
              // Ensure minimum visible width for small percentages
              const displayWidth = bar.value > 0 && bar.value < 8 ? 8 : bar.value;
              (barElement as HTMLElement).style.width = `${displayWidth}%`;
          }, 200);
        }
        }, bar.delay);
      });

      // Create a meaningful summary for the simple counter
      const topSentiments = [
        { name: 'genuine positive', value: genuinePositive },
        { name: 'skeptical', value: skeptical },
        { name: 'sarcastic', value: sarcastic },
        { name: 'critical', value: critical },
        { name: 'frustrated', value: frustrated },
        { name: 'fearful', value: fearful },
        { name: 'cynical', value: cynical },
        { name: 'resigned', value: resigned },
        { name: 'neutral', value: neutral }
      ].sort((a, b) => b.value - a.value).slice(0, 3);

      // Update summary to show top sentiments
      if (meta && typeof meta.analyzedCount === 'number' && typeof meta.totalComments === 'number') {
        const topSentimentsText = topSentiments.map(s => `${s.value}% ${s.name}`).join(', ');
        const summary = `Analyzed ${meta.analyzedCount} out of ${meta.totalComments} Reddit comments. Top sentiments: ${topSentimentsText}.`;
        SecurityUtils.safeSetText(elements.sentimentSummary, summary);
      } else {
        const topSentimentsText = topSentiments.map(s => `${s.value}% ${s.name}`).join(', ');
        const fallbackSummary = `Top sentiments: ${topSentimentsText}.`;
        SecurityUtils.safeSetText(elements.sentimentSummary, fallbackSummary);
      }

      // Show detailed analysis if available (from ChatGPT)
      const detailedAnalysisSection = document.getElementById('detailed-analysis');
      const detailedAnalysisText = document.getElementById('detailed-analysis-text');
      
      if (data.summary && data.summary.length > 100 && detailedAnalysisSection && detailedAnalysisText) {
        // If summary is long (detailed analysis), show it in the detailed section
        SecurityUtils.safeSetText(detailedAnalysisText, data.summary);
        detailedAnalysisSection.classList.remove('hidden');
      } else if (detailedAnalysisSection) {
        // Hide detailed analysis section if no detailed summary
        detailedAnalysisSection.classList.add('hidden');
      }

      // Show ChatGPT badge
      const vaderBadge = document.getElementById('powered-by-ai');
      if (vaderBadge) {
        // Update the badge to show ChatGPT instead of VADER
        const badgeText = vaderBadge.querySelector('span');
        if (badgeText) {
          badgeText.textContent = 'Powered by ChatGPT';
        }
          vaderBadge.classList.remove('hidden');
      }
    }

    function displaySampleComments(sampleComments: any) {
      console.log('DEBUG: displaySampleComments called with:', sampleComments);
      if (!sampleComments) {
        console.log('DEBUG: sampleComments is null/undefined');
        return;
      }
      
      // Get the comments with metadata for threading context
      const commentsWithMetadata = currentCommentsMetadata || [];
      
      // Debug each sentiment category
      console.log('DEBUG: genuinePositive:', sampleComments.genuinePositive, 'isArray:', Array.isArray(sampleComments.genuinePositive));
      console.log('DEBUG: skeptical:', sampleComments.skeptical, 'isArray:', Array.isArray(sampleComments.skeptical));
      
      updateCommentsContainer(elements.genuinePositiveComments, sampleComments.genuinePositive || [], 'text-green-700', commentsWithMetadata);
      updateCommentsContainer(elements.skepticalComments, sampleComments.skeptical || [], 'text-yellow-700', commentsWithMetadata);
      updateCommentsContainer(elements.sarcasticComments, sampleComments.sarcastic || [], 'text-purple-700', commentsWithMetadata);
      updateCommentsContainer(elements.criticalComments, sampleComments.critical || [], 'text-red-700', commentsWithMetadata);
      updateCommentsContainer(elements.frustratedComments, sampleComments.frustrated || [], 'text-orange-700', commentsWithMetadata);
      updateCommentsContainer(elements.fearfulComments, sampleComments.fearful || [], 'text-indigo-700', commentsWithMetadata);
      updateCommentsContainer(elements.cynicalComments, sampleComments.cynical || [], 'text-slate-700', commentsWithMetadata);
      updateCommentsContainer(elements.resignedComments, sampleComments.resigned || [], 'text-gray-700', commentsWithMetadata);
      updateCommentsContainer(elements.neutralComments, sampleComments.neutral || [], 'text-blue-700', commentsWithMetadata);
    }

    // Format timestamp to Reddit-style relative time
    function formatRedditTime(timestamp: number): string {
      if (!timestamp || timestamp <= 0) return 'unknown';
      
      const now = Math.floor(Date.now() / 1000);
      const diff = now - timestamp;
      
      if (diff < 60) return 'just now';
      if (diff < 3600) return `${Math.floor(diff / 60)}m`;
      if (diff < 86400) return `${Math.floor(diff / 3600)}h`;
      if (diff < 2592000) return `${Math.floor(diff / 86400)}d`;
      if (diff < 31536000) return `${Math.floor(diff / 2592000)}mo`;
      return `${Math.floor(diff / 31536000)}y`;
    }

    // Format score with Reddit-style formatting
    function formatRedditScore(score: number): string {
      if (score >= 1000) {
        return `${(score / 1000).toFixed(1)}k`;
      }
      return score.toString();
    }

    function updateCommentsContainer(container: HTMLElement | null, comments: any[], textColor: string, metadata: any[]) {
      console.log('DEBUG: updateCommentsContainer called with:', {
        container: container?.id || 'null',
        commentsCount: comments?.length || 0,
        comments: comments,
        textColor
      });
      
      if (!container || !Array.isArray(comments)) {
        console.log('DEBUG: Early return - container:', !!container, 'isArray:', Array.isArray(comments));
        return;
      }
      
      container.innerHTML = '';
      console.log('DEBUG: Container cleared, processing', comments.length, 'comments');
      
      // Create lookup map for comments by ID for parent context
      const commentLookup = new Map();
      metadata.forEach(comment => {
        if (comment.id) {
          commentLookup.set(comment.id, comment);
        }
      });
      
      comments.forEach((comment, index) => {
        console.log('DEBUG: Processing comment', index, ':', comment);
        if (comment && (comment.text || comment.trim)) {
          const commentDiv = document.createElement('div');
          commentDiv.className = `comment-card text-sm ${textColor} bg-white/90 backdrop-blur-sm p-4 rounded-2xl border border-gray-200/50 break-words shadow-sm hover:shadow-lg transition-all duration-300 hover:-translate-y-1`;
          
          // Find the full comment metadata by matching text
          const commentMetadata = metadata.find(meta => 
            meta.text === (typeof comment === 'object' ? comment.text : comment)
          );
          
          // Find parent comment if this is a reply
          let parentComment = null;
          if (commentMetadata?.parentId) {
            parentComment = commentLookup.get(commentMetadata.parentId);
          }
          
          // Check if comment is a full object with metadata or just a string
          if (typeof comment === 'object' && comment.text) {
            // Create Reddit-style comment with metadata
            const timeAgo = formatRedditTime(comment.created);
            const scoreFormatted = formatRedditScore(comment.score);
            
            // Limit display to first 500 characters
            const maxDisplayLength = 500;
            const isLongComment = comment.text.length > maxDisplayLength;
            const displayText = isLongComment ? comment.text.substring(0, maxDisplayLength) + '...' : comment.text;
            const displayFormattedComment = formatRedditComment(displayText);
            
            let parentContextHtml = '';
            if (parentComment) {
              const parentPreview = parentComment.text.length > 100 
                ? parentComment.text.substring(0, 100) + '...' 
                : parentComment.text;
              parentContextHtml = `
                <div class="mb-3 p-3 bg-gray-50/80 rounded-lg border-l-3 border-gray-300">
                  <div class="flex items-center text-xs text-gray-500 mb-1">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414L2.586 8l3.707-3.707a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="font-medium">Replying to u/${escapeHtml(parentComment.author)}:</span>
                  </div>
                  <div class="text-gray-600 text-xs italic">"${escapeHtml(parentPreview)}"</div>
                </div>
              `;
            }
            
            commentDiv.innerHTML = `
              ${parentContextHtml}
              <div class="flex items-center space-x-2 mb-2 text-xs text-gray-500">
                <span class="font-medium text-gray-700">${escapeHtml(comment.author)}</span>
                <span>•</span>
                <span>${timeAgo}</span>
                <span>•</span>
                <span class="flex items-center">
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                  </svg>
                  ${scoreFormatted}
                </span>
              </div>
              <div class="text-gray-800 leading-relaxed break-words">
                <div class="comment-content-${index}">${displayFormattedComment.html}</div>
                ${isLongComment ? `<div class="mt-2"><button class="toggle-comment-btn text-blue-600 hover:text-blue-800 text-xs underline" data-index="${index}" data-full-text="${escapeHtml(comment.text)}" data-short-text="${escapeHtml(displayText)}">Show more</button></div>` : ''}
              </div>
            `;
          } else if (typeof comment === 'string') {
            // Fallback for string comments
            const isLongComment = comment.length > 500;
            const displayText = isLongComment ? comment.substring(0, 500) + '...' : comment;
            const displayFormattedComment = formatRedditComment(displayText);
            
            let parentContextHtml = '';
            if (parentComment) {
              const parentPreview = parentComment.text.length > 100 
                ? parentComment.text.substring(0, 100) + '...' 
                : parentComment.text;
              parentContextHtml = `
                <div class="mb-3 p-3 bg-gray-50/80 rounded-lg border-l-3 border-gray-300">
                  <div class="flex items-center text-xs text-gray-500 mb-1">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414L2.586 8l3.707-3.707a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="font-medium">Replying to u/${escapeHtml(parentComment.author)}:</span>
                  </div>
                  <div class="text-gray-600 text-xs italic">"${escapeHtml(parentPreview)}"</div>
                </div>
              `;
            }
            
            commentDiv.innerHTML = `
              ${parentContextHtml}
              <div class="text-gray-800 leading-relaxed break-words">
                <div class="comment-content-${index}">${displayFormattedComment.html}</div>
                ${isLongComment ? `<div class="mt-2"><button class="toggle-comment-btn text-blue-600 hover:text-blue-800 text-xs underline" data-index="${index}" data-full-text="${escapeHtml(comment)}" data-short-text="${escapeHtml(displayText)}">Show more</button></div>` : ''}
              </div>
            `;
          }
          
          container.appendChild(commentDiv);
          console.log('DEBUG: Comment div added to container, container now has', container.children.length, 'children');
        }
      });
      
      console.log('DEBUG: Final container state:', {
        id: container.id,
        childCount: container.children.length,
        innerHTML: container.innerHTML.substring(0, 200) + '...'
      });
      
      // Add event listeners to toggle buttons
      container.querySelectorAll('.toggle-comment-btn').forEach(button => {
        button.addEventListener('click', (event) => {
          const target = event.target as HTMLButtonElement;
          const index = target.getAttribute('data-index');
          const fullText = target.getAttribute('data-full-text');
          const shortText = target.getAttribute('data-short-text');
          
          if (index && fullText && shortText) {
            const contentDiv = document.querySelector(`.comment-content-${index}`);
            
            if (contentDiv) {
              // Check if we're currently showing the short version by looking at the button text
              if (target.textContent === 'Show more') {
                // Show full comment
                const fullFormattedComment = formatRedditComment(fullText);
                contentDiv.innerHTML = fullFormattedComment.html;
                target.textContent = 'Show less';
              } else {
                // Show short comment
                const shortFormattedComment = formatRedditComment(shortText);
                contentDiv.innerHTML = shortFormattedComment.html;
                target.textContent = 'Show more';
              }
            }
          }
        });
      });
    }

    // Simple Reddit comment formatter (client-side version)
    function formatRedditComment(text: string) {
      if (!text || typeof text !== 'string') {
        return { html: '', hasLinks: false, linkCount: 0 };
      }



      let html = text;
      let linkCount = 0;

      // Decode HTML entities first
      html = decodeHtmlEntities(html);

      // Convert markdown links [text](url) to HTML
      html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (_match, linkText, url) => {
        linkCount++;
        return `<a href="${escapeHtml(url)}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline break-all">${escapeHtml(linkText)}</a>`;
      });

      // Convert plain URLs to clickable links
      // First, handle complete URLs
      html = html.replace(/(https?:\/\/[^\s<>"']+)/g, (_match, url) => {
        linkCount++;
        // Clean up the URL by removing trailing punctuation that shouldn't be part of the URL
        const cleanUrl = url.replace(/[.,;:!?]+$/, '');
        return `<a href="${escapeHtml(cleanUrl)}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline break-all">${escapeHtml(cleanUrl)}</a>`;
      });

      // Then handle potentially truncated URLs that end with common patterns
      html = html.replace(/(https?:\/\/[^\s<>"']*?)(?=\s|$|>|"|'|\)|,|\.|;|!|\?)/g, (_match, partialUrl) => {
        // Only process if it looks like a real URL that might be truncated
        if (partialUrl.startsWith('http') && partialUrl.length > 15 && !partialUrl.includes(' ') && !partialUrl.includes('<') && !partialUrl.includes('>')) {
          return `<a href="${escapeHtml(partialUrl)}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline break-all">${escapeHtml(partialUrl)}</a>`;
        }
        return partialUrl;
      });

      // Special handling for common truncated URL patterns
      // Look for "https://www.document" and similar patterns that might be incomplete
      html = html.replace(/(https?:\/\/www\.document)(?=\s|$)/g, (_match, partialUrl) => {
        // For now, just make the partial URL clickable
        return `<a href="${escapeHtml(partialUrl)}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline break-all">${escapeHtml(partialUrl)}</a>`;
      });



      // Convert Reddit-style links /r/subreddit and /u/username
      html = html.replace(/\/(r|u)\/([a-zA-Z0-9_-]+)/g, (_match, type, name) => {
        const url = type === 'r' ? `https://reddit.com/r/${name}` : `https://reddit.com/u/${name}`;
        return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline break-all">${_match}</a>`;
      });

      // Convert **bold** text
      html = html.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');

      // Convert *italic* text
      html = html.replace(/\*([^*]+)\*/g, '<em>$1</em>');

      // Convert `code` text
      html = html.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">$1</code>');

      // Normalize line breaks - remove extra whitespace and handle line breaks properly
      html = html.replace(/\r\n/g, '\n'); // Normalize Windows line endings
      html = html.replace(/\r/g, '\n'); // Normalize Mac line endings
      html = html.replace(/\n{3,}/g, '\n\n'); // Reduce 3+ consecutive line breaks to 2
      html = html.replace(/\n\n/g, '<br><br>'); // Double line breaks become double <br>
      html = html.replace(/\n/g, '<br>'); // Single line breaks become <br>

      return {
        html,
        hasLinks: linkCount > 0,
        linkCount
      };
    }

    // Helper functions for HTML encoding/decoding
    function decodeHtmlEntities(str: string): string {
      if (typeof str !== 'string') return '';
      return str
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&nbsp;/g, ' ');
    }

    function escapeHtml(str: string): string {
      if (typeof str !== 'string') return '';
      return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
    }

    // Enhanced fetch with security measures
    async function secureFetch(url: string, options: RequestInit = {}) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          }
        });

        clearTimeout(timeoutId);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          throw new Error(errorData.error || `HTTP ${response.status}`);
        }

        return response;
      } catch (error: unknown) {
        clearTimeout(timeoutId);
        if (error && typeof error === 'object' && 'message' in error) {
          showError((error as { message?: string }).message || 'An unexpected error occurred');
        } else {
          showError('An unexpected error occurred');
        }
        throw error;
      }
    }

    // History management
    function loadHistory() {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]');
        if (history.length > 0 && elements.historyContainer && elements.historyList) {
          elements.historyContainer.classList.remove('hidden');
          elements.historyList.innerHTML = '';
          history.slice(0, 5).forEach((item: any) => {
            if (item && typeof item.title === 'string' && typeof item.url === 'string') {
              const button = document.createElement('button');
              button.className = 'text-xs bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-full text-gray-700 truncate max-w-xs';
              SecurityUtils.safeSetText(button, item.title);
              button.title = SecurityUtils.escapeHtml(item.url);
              button.onclick = () => {
                if (elements.urlInput && elements.form) {
                  (elements.urlInput as HTMLInputElement).value = item.url;
                  elements.form.dispatchEvent(new Event('submit'));
                }
              };
              if (elements.historyList && button) {
                elements.historyList.appendChild(button);
              }
            }
          });
        }
      } catch (error: unknown) {
        console.warn('Could not load history:', error);
      }
    }

    function addToHistory(url: string, title: string) {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]');
        const existing = history.findIndex((item: any) => item.url === url);
        if (existing !== -1) {
          history.splice(existing, 1);
        }
        history.unshift({ url, title, date: Date.now() });
        localStorage.setItem('analyzedRedditThreads', JSON.stringify(history.slice(0, 10)));
        loadHistory();
      } catch (error: unknown) {
        console.warn('Could not save to history:', error);
      }
    }

    // Share functionality (adapted for Reddit)
    async function shareResults() {
      if (!currentRedditUrl || !currentSummary) return;
      try {
        const sentimentData = analysisCache.get(currentRedditUrl)?.data.sentiment;
        const meta = analysisCache.get(currentRedditUrl)?.data.meta;
        if (sentimentData && meta) {
          const response = await secureFetch('/api/save-result', {
            method: 'POST',
            body: JSON.stringify({
              sentimentData,
              meta,
              redditUrl: currentRedditUrl,
              platform: 'reddit'
            }),
          });
          const result = await response.json();
          const shareUrl = result.shareUrl;
          const threadTitle = elements.threadTitle?.textContent || 'this Reddit thread';
          const positive = elements.genuinePositiveComments?.textContent || '0%';
          const neutral = elements.neutralComments?.textContent || '0%';
          const negative = elements.sarcasticComments?.textContent || '0%';
          createShareModal(shareUrl, threadTitle, positive, neutral, negative);
        }
      } catch (error: unknown) {
        console.error('Error sharing results:', error);
        const fallbackUrl = `${window.location.origin}/reddit-sentiment-analyzer?thread=${encodeURIComponent(currentRedditUrl)}`;
        navigator.clipboard?.writeText(fallbackUrl);
      }
    }

    // Share modal (adapted for Reddit)
    function createShareModal(shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string) {
      const existingModal = document.getElementById('share-modal');
      if (existingModal) existingModal.remove();

      const modal = document.createElement('div');
      modal.id = 'share-modal';
      modal.className = 'fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 p-4';
      modal.innerHTML = `
        <div class="bg-white rounded-2xl max-w-md w-full p-6 relative animate-fade-in">
          <button id="close-share-modal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          <h3 class="text-xl font-bold text-gray-800 mb-6">Share Reddit Analysis</h3>
          <div class="grid grid-cols-3 gap-4 mb-6">
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="twitter">
              <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">X (Twitter)</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="facebook">
              <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Facebook</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="linkedin">
              <div class="w-12 h-12 bg-blue-700 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">LinkedIn</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="whatsapp">
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">WhatsApp</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="reddit">
              <div class="w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Reddit</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="copy">
              <div class="w-12 h-12 bg-gray-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copy Link</span>
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      document.getElementById('close-share-modal')?.addEventListener('click', () => modal.remove());
      modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
      });

      modal.querySelectorAll('.share-option').forEach(button => {
        button.addEventListener('click', () => {
          const platform = button.getAttribute('data-platform');
          handlePlatformShare(platform ?? '', shareUrl ?? '', threadTitle ?? '', positive ?? '', neutral ?? '', negative ?? '', modal);
        });
      });
    }

    function handlePlatformShare(platform: string, shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string, modal: HTMLElement) {
      const shareMessages = {
        twitter: `🧵 Reddit sentiment analysis: "${threadTitle.length > 120 ? threadTitle.substring(0, 120) + '...' : threadTitle}"\n\n✅ ${positive} positive\n➖ ${neutral} neutral  \n❌ ${negative} negative\n\nAnalyze any Reddit thread! 🚀`,
        facebook: `I just analyzed the sentiment of this Reddit thread!\n\n"${threadTitle}"\n\n📊 Results:\n• Positive: ${positive}\n• Neutral: ${neutral}\n• Negative: ${negative}\n\nTry it yourself with any Reddit thread!`,
        linkedin: `Interesting sentiment analysis of this Reddit thread:\n\n"${threadTitle}"\n\n📈 ${positive} positive comments\n➖ ${neutral} neutral comments\n📉 ${negative} negative comments\n\nGreat tool for community managers and marketers!`,
        whatsapp: `Check out this Reddit thread sentiment analysis!\n\n"${threadTitle}"\n✅ Positive: ${positive}\n➖ Neutral: ${neutral}\n❌ ${negative}\n\nTry it yourself:`,
        reddit: `[Tool] I analyzed the sentiment of this Reddit thread - ${positive} positive, ${neutral} neutral, ${negative} negative comments`,
        copy: shareUrl
      };

      switch(platform) {
        case 'twitter':
          window.open(
            `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareMessages.twitter)}&url=${encodeURIComponent(shareUrl)}`,
            '_blank'
          );
          break;
        case 'facebook':
          window.open(
            `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareMessages.facebook)}`,
            '_blank'
          );
          break;
        case 'linkedin':
          window.open(
            `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&summary=${encodeURIComponent(shareMessages.linkedin)}`,
            '_blank'
          );
          break;
        case 'whatsapp':
          window.open(
            `https://wa.me/?text=${encodeURIComponent(shareMessages.whatsapp + ' ' + shareUrl)}`,
            '_blank'
          );
          break;
        case 'reddit':
          window.open(
            `https://www.reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareMessages.reddit)}`,
            '_blank'
          );
          break;
        case 'copy':
          navigator.clipboard?.writeText(shareUrl);
          const copyButton = modal.querySelector('[data-platform="copy"]');
          if (copyButton) {
            const originalHTML = copyButton.innerHTML;
            copyButton.innerHTML = `
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copied!</span>
            `;
            setTimeout(() => {
              if (copyButton) copyButton.innerHTML = originalHTML;
            }, 2000);
          }
          break;
      }
      
      if (platform !== 'copy') {
        setTimeout(() => modal.remove(), 500);
      }
    }

    // Main form submission handler
    if (elements.form) {
      elements.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isAnalyzing) return;
        if (!elements.urlInput) return;
        
        const redditUrl = (elements.urlInput as HTMLInputElement).value.trim();
        
        // Input validation
        if (!redditUrl) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a Reddit URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (redditUrl.length > 2048) {
          SecurityUtils.safeSetText(elements.urlError, 'URL is too long');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (!SecurityUtils.isValidRedditUrl(redditUrl)) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a valid Reddit thread URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        (elements.urlError as HTMLElement).classList.add('hidden');

        // Rate limiting
        if (!SecurityUtils.rateLimiter.isAllowed()) {
          showError('Too many requests. Please wait a minute before trying again.');
          return;
        }

        // Check if we're re-analyzing the same URL
        if (redditUrl === lastAnalyzedUrl && 
            elements.resultsContainer && 
            !elements.resultsContainer.classList.contains('hidden')) {
          return;
        }

        // Check cache
        const cached = analysisCache.get(redditUrl);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
          showResults(cached.data.sentiment, cached.data.meta);
          return;
        }

        isAnalyzing = true;
        lastAnalyzedUrl = redditUrl;
        currentRedditUrl = redditUrl;

        try {
          // Fetch comments
          showLoading('Fetching Reddit comments...');
          
          const commentsResponse = await secureFetch('/api/reddit-comments', {
            method: 'POST',
            body: JSON.stringify({ redditUrl })
          });

          const commentsData = await commentsResponse.json();
          
          console.log('Reddit API response received:', {
            hasComments: !!commentsData.comments,
            commentCount: commentsData.comments?.length,
            threadInfo: commentsData.threadInfo,
            imageUrl: commentsData.threadInfo?.imageUrl
          });

          if (!commentsData.comments || commentsData.comments.length === 0) {
            throw new Error('No comments found for this Reddit thread');
          }

          // Analyze sentiment
          showLoading('Analyzing sentiment...');
          
          // Extract just the text from comment objects for sentiment analysis
          const commentTexts = commentsData.comments.map((comment: any) => 
            typeof comment === 'object' && comment.text ? comment.text : comment
          );

          console.log('Sending to sentiment API:', {
            commentCount: commentTexts.length,
            mostUpvoted: commentsData.mostUpvoted,
            platform: 'reddit'
          });

          const sentimentResponse = await secureFetch('/api/sentiment', {
            method: 'POST',
            body: JSON.stringify({
              comments: commentTexts,
              analyzedCount: commentsData.analyzedCount,
              totalComments: commentsData.totalComments,
              mostUpvoted: commentsData.mostUpvoted,
              videoInfo: commentsData.threadInfo,
              channelInfo: {},
              platform: 'reddit',
              commentsWithMetadata: commentsData.comments // Send full comment objects for threading
            })
          });

          const sentimentData = await sentimentResponse.json();
          console.log('Sentiment API response:', sentimentData);
          console.log('Sentiment API mostUpvoted:', sentimentData.mostUpvoted);

          const meta = {
            analyzedCount: commentsData.analyzedCount,
            totalComments: commentsData.totalComments,
            mostUpvoted: {
              ...commentsData.mostUpvoted,
              sentiment: sentimentData.mostUpvoted?.sentiment
            },
            threadInfo: commentsData.threadInfo,
          };
          console.log('Final meta object:', meta);

          // Cache results
          analysisCache.set(redditUrl, {
            data: { sentiment: sentimentData, meta },
            timestamp: Date.now()
          });

          showResults(sentimentData, meta);

        } catch (error: unknown) {
          console.error('Analysis error:', error);
          if (error && typeof error === 'object' && 'message' in error) {
            showError((error as { message?: string }).message || 'An unexpected error occurred');
          } else {
            showError('An unexpected error occurred');
          }
        } finally {
          isAnalyzing = false;
        }
      });
    }

    // Analyze Another button
    elements.analyzeAnother?.addEventListener('click', () => {
      if (elements.urlInput) {
        (elements.urlInput as HTMLInputElement).value = '';
      }
      hideAllStates();
      elements.urlInput?.focus();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });

    // Share Results button
    elements.shareResults?.addEventListener('click', shareResults);

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && 
          document.activeElement === elements.urlInput && elements.form) {
        e.preventDefault();
        elements.form.dispatchEvent(new Event('submit'));
      }
      
      if (e.key === 'Escape' && elements.resultsContainer && 
          !elements.resultsContainer.classList.contains('hidden')) {
        hideAllStates();
        if (elements.urlInput) {
          (elements.urlInput as HTMLInputElement).value = '';
          elements.urlInput.focus();
        }
      }
    });

    // Check URL params for shared threads
    const urlParams = new URLSearchParams(window.location.search);
    const sharedThread = urlParams.get('thread');
    if (sharedThread && SecurityUtils.isValidRedditUrl(sharedThread) && 
        elements.urlInput && elements.form) {
      (elements.urlInput as HTMLInputElement).value = sharedThread;
      elements.form.dispatchEvent(new Event('submit'));
    }

          // Mobile features initialized with existing code

    // Load history on startup
    loadHistory();

    // Initialize tab navigation
    initializeTabNavigation();

    // Clean up intervals on page unload
    window.addEventListener('beforeunload', () => {
      clearProgress();
    });

    // Generate unique session ID
    function generateSessionId(): string {
      return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // Setup real-time progress tracking
    function setupProgressTracking(sessionId: string) {
      if (progressEventSource) {
        progressEventSource.close();
      }
      
      progressEventSource = new EventSource(`/api/sentiment-progress?sessionId=${sessionId}`);
      
      progressEventSource.onmessage = function(event) {
        try {
          const data = JSON.parse(event.data);
          
          if (data.type === 'progress') {
            updateProgressUI(data.stage, data.progress);
          } else if (data.type === 'complete') {
            progressEventSource?.close();
            progressEventSource = null;
          }
        } catch (error) {
          console.error('Error parsing progress data:', error);
        }
      };
      
      progressEventSource.onerror = function(error) {
        console.error('Progress EventSource error:', error);
        progressEventSource?.close();
        progressEventSource = null;
      };
    }

    // Update progress UI with real data
    function updateProgressUI(stage: string, progress: number) {
      const progressFill = elements.progressFill as HTMLElement;
      const progressText = document.getElementById('progress-text');
      
      if (progressFill) {
        progressFill.style.width = `${progress}%`;
      }
      
      if (progressText) {
        progressText.textContent = stage;
      }
      
      console.log(`Progress: ${stage} - ${progress}%`);
    }

    async function analyze() {
      if (isAnalyzing) return;
      
      const url = (elements.urlInput as HTMLInputElement)?.value?.trim();
      if (!url) {
        showError('Please enter a Reddit URL');
        return;
      }

      // Generate session ID and setup progress tracking
      currentSessionId = generateSessionId();
      setupProgressTracking(currentSessionId);

      isAnalyzing = true;
      currentRedditUrl = url;
      hideAllStates();
      
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = true;
      }

      try {
        // Fetch Reddit comments
        showLoading('Fetching Reddit comments...');
        updateProgressUI('Connecting to Reddit...', 0);
        
        console.log('Fetching Reddit comments for:', url);
        
        const commentsResponse = await secureFetch('/api/reddit-comments', {
          method: 'POST',
          body: JSON.stringify({ redditUrl: url })
        });

        if (!commentsResponse.ok) {
          const errorData = await commentsResponse.json().catch(() => ({ error: 'Unknown error' }));
          throw new Error(errorData.error || `HTTP ${commentsResponse.status}`);
        }

        const commentsData = await commentsResponse.json();
        console.log('Reddit comments received:', commentsData);

        if (!commentsData.comments || commentsData.comments.length === 0) {
          throw new Error('No comments found on this Reddit thread');
        }

        // Analyze sentiment
        showLoading('Analyzing sentiment...');
        
        // Extract just the text from comment objects for sentiment analysis
        const commentTexts = commentsData.comments.map((comment: any) => 
          typeof comment === 'object' && comment.text ? comment.text : comment
        );

        console.log('Sending to sentiment API:', {
          commentCount: commentTexts.length,
          mostUpvoted: commentsData.mostUpvoted,
          platform: 'reddit',
          sessionId: currentSessionId
        });

        const sentimentResponse = await secureFetch('/api/sentiment', {
          method: 'POST',
          body: JSON.stringify({
            comments: commentTexts,
            analyzedCount: commentsData.analyzedCount,
            totalComments: commentsData.totalComments,
            mostUpvoted: commentsData.mostUpvoted,
            videoInfo: commentsData.threadInfo,
            channelInfo: {},
            platform: 'reddit',
            commentsWithMetadata: commentsData.comments, // Send full comment objects for threading
            sessionId: currentSessionId // Send session ID for progress tracking
          })
        });

        if (!sentimentResponse.ok) {
          const errorData = await sentimentResponse.json().catch(() => ({ error: 'Analysis failed' }));
          throw new Error(errorData.error || `Analysis failed: ${sentimentResponse.status}`);
        }

        const sentimentData = await sentimentResponse.json();
        console.log('Sentiment data received:', sentimentData);

        // Final progress update
        updateProgressUI('Analysis complete!', 100);
        
        // Show results
        showResults(sentimentData, commentsData);
        
      } catch (error: any) {
        console.error('Analysis error:', error);
        showError(error.message || 'An unexpected error occurred');
      } finally {
        isAnalyzing = false;
        if (elements.analyzeButton) {
          (elements.analyzeButton as HTMLButtonElement).disabled = false;
        }
        // Close progress tracking
        if (progressEventSource) {
          progressEventSource.close();
          progressEventSource = null;
        }
      }
    }

    // Initialize tab navigation
    function initializeTabNavigation() {
      const sentimentTabs = document.getElementById('sentiment-tabs');
      if (sentimentTabs) {
        sentimentTabs.addEventListener('click', (e: Event) => {
          const button = (e.target as HTMLElement).closest('button[data-tab]') as HTMLButtonElement;
          if (button && button.dataset.tab) {
            const tabName = button.dataset.tab;

            // Remove highlight and gradient classes from all buttons
            sentimentTabs.querySelectorAll('button').forEach((btn: HTMLButtonElement) => {
              btn.classList.remove(
                'text-green-700', 'bg-green-50', 'border-green-500', 'border-b-2',
                'bg-gradient-to-r', 'from-green-50/50', 'to-emerald-50/50',
                'text-yellow-700', 'bg-yellow-50', 'border-yellow-500',
                'from-yellow-50/50', 'to-amber-50/50',
                'text-purple-700', 'bg-purple-50', 'border-purple-500',
                'from-purple-50/50', 'to-violet-50/50',
                'text-red-700', 'bg-red-50', 'border-red-500',
                'from-red-50/50', 'to-rose-50/50',
                'text-orange-700', 'bg-orange-50', 'border-orange-500',
                'from-orange-50/50', 'to-amber-50/50',
                'text-indigo-700', 'bg-indigo-50', 'border-indigo-500',
                'from-indigo-50/50', 'to-blue-50/50',
                'text-slate-700', 'bg-slate-50', 'border-slate-500',
                'from-slate-50/50', 'to-gray-50/50',
                'text-gray-700', 'bg-gray-50', 'border-gray-500',
                'from-gray-50/50', 'to-slate-50/50',
                'text-blue-700', 'bg-blue-50', 'border-blue-500',
                'from-blue-50/50', 'to-indigo-50/50'
              );
              btn.classList.add('text-gray-500', 'hover:text-gray-700', 'bg-white/50');
            });

            // Add appropriate highlight classes based on tab type
            button.classList.remove('text-gray-500', 'hover:text-gray-700', 'bg-white/50');
            
            switch(tabName) {
              case 'genuinePositive':
                button.classList.add('text-green-700', 'bg-gradient-to-r', 'from-green-50/50', 'to-emerald-50/50', 'border-b-2', 'border-green-500');
                break;
              case 'skeptical':
                button.classList.add('text-yellow-700', 'bg-gradient-to-r', 'from-yellow-50/50', 'to-amber-50/50', 'border-b-2', 'border-yellow-500');
                break;
              case 'sarcastic':
                button.classList.add('text-purple-700', 'bg-gradient-to-r', 'from-purple-50/50', 'to-violet-50/50', 'border-b-2', 'border-purple-500');
                break;
              case 'critical':
                button.classList.add('text-red-700', 'bg-gradient-to-r', 'from-red-50/50', 'to-rose-50/50', 'border-b-2', 'border-red-500');
                break;
              case 'frustrated':
                button.classList.add('text-orange-700', 'bg-gradient-to-r', 'from-orange-50/50', 'to-amber-50/50', 'border-b-2', 'border-orange-500');
                break;
              case 'fearful':
                button.classList.add('text-indigo-700', 'bg-gradient-to-r', 'from-indigo-50/50', 'to-blue-50/50', 'border-b-2', 'border-indigo-500');
                break;
              case 'cynical':
                button.classList.add('text-slate-700', 'bg-gradient-to-r', 'from-slate-50/50', 'to-gray-50/50', 'border-b-2', 'border-slate-500');
                break;
              case 'resigned':
                button.classList.add('text-gray-700', 'bg-gradient-to-r', 'from-gray-50/50', 'to-slate-50/50', 'border-b-2', 'border-gray-500');
                break;
              case 'neutral':
                button.classList.add('text-blue-700', 'bg-gradient-to-r', 'from-blue-50/50', 'to-indigo-50/50', 'border-b-2', 'border-blue-500');
                break;
            }

            // Update tab content
            document.querySelectorAll('.tab-content').forEach((content: Element) => {
              content.classList.add('hidden');
            });
            const activeTab = document.getElementById(`${tabName}-tab`);
            if (activeTab) {
              activeTab.classList.remove('hidden');
            }
          }
        });
      }
    }
  });
  </script>

  <!-- FAQ Schema Markup -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "How does Reddit sentiment analysis work?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our Reddit sentiment analyzer uses VADER, a free and open-source sentiment analysis engine designed for social media text. When you paste a Reddit URL, our system fetches all available comments using Reddit's public API, then processes them with VADER to determine the emotional tone. The analyzer categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category. For YouTube and premium features, we use advanced AI models."
        }
      },
      {
        "@type": "Question",
        "name": "Is this Reddit analyzer free to use?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Yes! Our Reddit sentiment analyzer is completely free to use with no subscription fees, hidden charges, or usage limits. You can analyze as many Reddit threads as you need without any cost barriers. The free version is powered by VADER sentiment analysis."
        }
      },
      {
        "@type": "Question",
        "name": "What types of Reddit threads can I analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis."
        }
      },
      {
        "@type": "Question",
        "name": "How many Reddit comments does the tool analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our tool analyzes all available comments from each Reddit thread (up to Reddit API limits), focusing on both top-level comments and highly-rated replies to provide a balanced view of community sentiment. This includes both top-level comments and replies. For very large threads, analysis is powered by VADER for speed and scalability."
        }
      },
      {
        "@type": "Question",
        "name": "Do you store Reddit data or track users?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information."
        }
      }
    ]
  }
  </script>

  <!-- Mobile-First Styles -->
  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    /* Modern animations and micro-interactions */
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(30px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        opacity: 1;
      }
      50% {
        opacity: 0.7;
      }
    }
    
    @keyframes shimmer {
      0% {
        background-position: -200px 0;
      }
      100% {
        background-position: calc(200px + 100%) 0;
      }
    }
    
    @keyframes bounce {
      0%, 20%, 53%, 80%, 100% {
        transform: translate3d(0,0,0);
      }
      40%, 43% {
        transform: translate3d(0, -8px, 0);
      }
      70% {
        transform: translate3d(0, -4px, 0);
      }
      90% {
        transform: translate3d(0, -2px, 0);
      }
    }
    
    /* Apply animations to main elements */
    .bg-white {
      animation: slideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    /* Hover effects and micro-interactions */
    .hover-lift {
      transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .hover-lift:hover {
      transform: translateY(-4px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    }
    
    /* Button interactions */
    button {
      transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    button:active {
      transform: scale(0.98);
    }
    
    /* Input focus effects */
    input:focus {
      transform: scale(1.02);
    }
    
    /* Progress bar animations */
    .progress-animate {
      transition: width 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    /* Loading shimmer effect */
    .shimmer {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200px 100%;
      animation: shimmer 1.5s infinite;
    }
    
    /* Card hover effects */
    .card-hover {
      transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .card-hover:hover {
      transform: translateY(-2px) scale(1.01);
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    }
    
    /* Tab transitions */
    .tab-content {
      transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    /* Icon animations */
    .icon-bounce:hover {
      animation: bounce 0.6s ease-in-out;
    }
    
    /* Gradient text animation */
    .gradient-text {
      background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57);
      background-size: 300% 300%;
      animation: gradientShift 3s ease infinite;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    @keyframes gradientShift {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }
    
    /* Backdrop blur enhancement */
    .backdrop-blur-xl {
      backdrop-filter: blur(24px);
      -webkit-backdrop-filter: blur(24px);
    }
    
    /* Glassmorphism effects */
    .glass {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }
    
    /* Focus indicators for accessibility */
    button:focus-visible,
    input:focus-visible {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }

    /* Mobile-first styles */
    @media (max-width: 768px) {
      /* Touch-friendly button sizes */
      button {
        min-height: 48px;
      }
      
      /* Improved touch targets */
      .tab-content {
        min-height: 250px;
      }
      
      /* Smooth transitions for mobile */
      .transform {
        transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
      
      /* Mobile-optimized spacing */
      .space-y-4 > * + * {
        margin-top: 1.25rem;
      }
      
      /* Better mobile scrolling */
      .tab-content {
        overflow-y: auto;
        max-height: 65vh;
        scrollbar-width: thin;
        scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
      }
      
      .tab-content::-webkit-scrollbar {
        width: 6px;
      }
      
      .tab-content::-webkit-scrollbar-track {
        background: transparent;
      }
      
      .tab-content::-webkit-scrollbar-thumb {
        background: rgba(156, 163, 175, 0.5);
        border-radius: 3px;
      }
      
      /* Mobile-friendly comment cards */
      .comment-card {
        padding: 1rem;
        margin-bottom: 0.75rem;
        border-radius: 1rem;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(229, 231, 235, 0.5);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
      
      .comment-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      }
      
      /* Improved mobile progress bars */
      .progress-bar-mobile {
        height: 10px;
        border-radius: 5px;
      }
      
      /* Mobile sentiment icons */
      .sentiment-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
      
      /* Mobile-specific animations */
      .mobile-slide-in {
        animation: slideIn 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
    }
    
    /* Desktop enhancements */
    @media (min-width: 769px) {
      .tab-content {
        min-height: 400px;
      }
      
      /* Enhanced desktop hover effects */
      .desktop-hover:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: 0 30px 60px rgba(0, 0, 0, 0.12);
      }
      
      /* Desktop-specific animations */
      .desktop-fade-in {
        animation: fadeIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
    }
    
    /* Dark mode support (if needed) */
    @media (prefers-color-scheme: dark) {
      .glass {
        background: rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
    }
    
    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
  </style>
</Layout>
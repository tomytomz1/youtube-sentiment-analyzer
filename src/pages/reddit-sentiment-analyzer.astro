---
import Layout from '../layouts/Layout.astro';
import FaqAccordion from '../components/FaqAccordion.astro';
import VoiceFaqAccordion from '../components/VoiceFaqAccordion.astro';
import Breadcrumb from '../components/Breadcrumb.astro';
import { redditAnalyzerVoiceFaqs } from '../data/voiceFaqs.ts';

const title = 'Reddit Sentiment Analysis Tool - Free AI Community Analyzer | Senti-Meter';
const description = 'Analyze Reddit thread sentiment with AI. Get detailed insights into community opinions, emotions, and reactions. High accuracy, start free.';
const url = 'https://www.senti-meter.com/reddit-sentiment-analyzer';

const breadcrumbItems = [
  { label: "Home", href: "/" },
  { label: "Reddit Sentiment Analyzer" }
];

const faqs = [
  {
    question: 'How does Reddit sentiment analysis work?',
    answer: `Our Reddit sentiment analyzer uses advanced AI to analyze the emotional tone of comments in Reddit threads. When you paste a Reddit URL, our system fetches up to 300 comments using Reddit's public API, then processes them with OpenAI's GPT-4o model to understand context, sarcasm, and nuanced emotional expressions. The AI categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category.`
  },
  {
    question: 'Is this Reddit analyzer free to use?',
    answer: `Yes! You can start using our Reddit sentiment analyzer for free. Free users have limited analyses per month, while premium subscribers get expanded access and advanced features.`
  },
  {
    question: 'What types of Reddit threads can I analyze?',
    answer: `You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis.`
  },
  {
    question: 'How many Reddit comments does the tool analyze?',
    answer: `Our tool analyzes up to 300 comments from each Reddit thread, focusing on the most upvoted and recent comments to provide a balanced view of community sentiment. This includes both top-level comments and highly-rated replies.`
  },
  {
    question: 'Do you store Reddit data or track users?',
    answer: `No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information.`
  }
];
---
<Layout title={title} description={description} url={url}>
  <Breadcrumb items={breadcrumbItems} />
  
  <head>
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/logo.svg" />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/logo.svg" />
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Reddit Sentiment Analyzer" />
    <meta name="keywords" content="reddit, sentiment analysis, comment analysis, thread sentiment, ai analysis, free tool" />
    <link rel="canonical" href={url} />
  </head>

  <!-- Skip Link for Accessibility -->
  <a href="#analysis-form" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-orange-600 text-white px-4 py-2 rounded z-50">
    Skip to analyzer
  </a>

  <main class="min-h-screen bg-gradient-to-br from-orange-50 to-red-100 flex items-center justify-center px-4 py-8">
    <div class="max-w-4xl w-full mx-auto">
      <div class="bg-white rounded-2xl shadow-xl p-8 md:p-12">
        <div class="text-center mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4">
            Reddit Sentiment Analyzer
          </h1>
          <p class="text-lg text-gray-600 leading-relaxed">
            Paste any Reddit thread link below to get detailed sentiment analysis of the comments.
            Discover what the Reddit community really thinks about the discussion with AI-powered insights.
          </p>
        </div>

        <!-- Recent History -->
        <div id="history-container" class="hidden mb-6">
          <div id="history-list" class="flex flex-wrap gap-2"></div>
        </div>

        <form id="analysis-form" class="space-y-6 mb-12">
          <div>
            <label for="reddit-url" class="block text-sm font-medium text-gray-700 mb-2">
              Reddit Thread URL
            </label>
            <input
              type="url"
              id="reddit-url"
              name="reddit-url"
              placeholder="https://www.reddit.com/r/AskReddit/comments/..."
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors duration-200 text-gray-900 placeholder-gray-500"
              required
              aria-describedby="url-error"
            />
            <span id="url-error" class="hidden text-red-600 text-sm mt-1" role="alert"></span>
          </div>
          <button
            type="submit"
            id="analyze-button"
            class="w-full bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Analyze Reddit Sentiment
          </button>
        </form>

        <!-- Loading State -->
        <div id="loading-state" class="hidden mt-8 text-center" role="status" aria-live="polite">
          <div class="inline-flex items-center space-x-2">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-600" aria-hidden="true"></div>
            <span class="text-gray-600" id="loading-text">Fetching comments...</span>
          </div>
          <div id="progress-bar" class="mt-4 w-full bg-gray-200 rounded-full h-2 hidden">
            <div id="progress-fill" class="bg-orange-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden mt-8 p-4 bg-red-50 border border-red-200 rounded-lg" role="alert" aria-live="assertive">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-red-800 font-medium">Error:</span>
            <span class="text-red-700 ml-1" id="error-message"></span>
          </div>
          <div id="error-suggestions" class="mt-2 text-sm text-red-600"></div>
        </div>

        <!-- Thread Info Card -->
        <div id="thread-info" class="mb-8 p-6 bg-orange-50 rounded-lg border border-orange-200 hidden">
          <div class="flex items-start space-x-4">
            <div id="thread-image-container" class="w-20 h-20 md:w-24 md:h-24 bg-orange-600 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden">
              <!-- Reddit post image will be inserted here by JS -->
            </div>
            <div class="flex-1">
              <h2 id="thread-title" class="font-semibold text-lg text-gray-900 mb-1"></h2>
              <div class="flex items-center text-orange-600 text-sm mb-2">
                <span id="subreddit-name" class="font-medium"></span>
                <span class="mx-1">•</span>
                <span id="thread-author"></span>
                <span class="mx-1">•</span>
                <span id="thread-score"></span>&nbsp;upvotes
              </div>
              <!-- Removed thread-stats from here -->
            </div>
          </div>
        </div>

                  <!-- Enhanced Results Container -->
          <div id="results-container" class="hidden mt-8">
            <div id="sample-info" class="mb-4 text-sm text-orange-700 font-medium hidden"></div>
            <div id="most-upvoted-callout" class="mb-6 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded shadow hidden">
              <div class="flex items-center mb-2">
                <span class="text-xl mr-2">⬆️</span>
                <span class="font-bold text-gray-800" id="most-upvoted-label"></span>
              </div>
              <blockquote class="text-gray-700 italic" id="most-upvoted-text"></blockquote>
            </div>
            
            <!-- Enhanced Analysis Container -->
            <div id="analysis-results" class="enhanced-analysis-container">
              <!-- Analysis Content -->
              <div class="analysis-content">
                <!-- Overview Section -->
                <div id="overview-section" class="analysis-section mb-8">
                  <div class="overview-grid">
                    <div class="overview-card">
                      <h3 class="card-title">Sentiment Analysis</h3>
                      <div class="sentiment-bars">
                        <div class="sentiment-bar-item">
                          <div class="sentiment-bar-header">
                            <span class="sentiment-label positive">Positive</span>
                            <span class="sentiment-percentage" id="positive-percentage">0%</span>
                          </div>
                          <div class="sentiment-bar-track">
                            <div class="sentiment-bar-fill positive" id="positive-bar"></div>
                          </div>
                        </div>
                        <div class="sentiment-bar-item">
                          <div class="sentiment-bar-header">
                            <span class="sentiment-label neutral">Neutral</span>
                            <span class="sentiment-percentage" id="neutral-percentage">0%</span>
                          </div>
                          <div class="sentiment-bar-track">
                            <div class="sentiment-bar-fill neutral" id="neutral-bar"></div>
                          </div>
                        </div>
                        <div class="sentiment-bar-item">
                          <div class="sentiment-bar-header">
                            <span class="sentiment-label negative">Negative</span>
                            <span class="sentiment-percentage" id="negative-percentage">0%</span>
                          </div>
                          <div class="sentiment-bar-track">
                            <div class="sentiment-bar-fill negative" id="negative-bar"></div>
                          </div>
                        </div>
                      </div>

                    </div>
                    <div class="overview-card">
                      <h3 class="card-title">Key Metrics</h3>
                      <div class="metrics-grid">
                        <div class="metric-item">
                          <div class="metric-value" id="overview-confidence">0%</div>
                          <div class="metric-label">Confidence</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value" id="overview-analyzed">0</div>
                          <div class="metric-label">Comments</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value" id="overview-themes">0</div>
                          <div class="metric-label">Themes</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value" id="overview-risk">None</div>
                          <div class="metric-label">Main Risk</div>
                        </div>
                      </div>
                    </div>
                    <div class="overview-card full-width">
                      <h3 class="card-title">Summary</h3>
                      <div class="summary-container">
                        <div class="summary-text" id="enhanced-summary"></div>
                      </div>
                    </div>
                  </div>
                </div>

              <!-- Sentiment Section -->
              <div id="sentiment-section" class="analysis-section mb-8">
                <div class="sentiment-grid">
                  <div class="sentiment-card">
                    <h3 class="card-title">Sentiment by Depth</h3>
                    <div class="chart-container">
                      <canvas id="sentiment-depth-chart"></canvas>
                    </div>
                  </div>
                  <div class="sentiment-card">
                    <h3 class="card-title">Sentiment Over Time</h3>
                    <div class="chart-container">
                      <canvas id="sentiment-time-chart"></canvas>
                      <div id="sentiment-time-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Time-based sentiment data will appear here</p>
                      </div>
                    </div>
                  </div>
                  <div class="sentiment-card">
                    <h3 class="card-title">Raw Distribution</h3>
                    <div class="chart-container">
                      <canvas id="raw-distribution-chart"></canvas>
                      <div id="raw-distribution-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Raw sentiment distribution will appear here</p>
                      </div>
                    </div>
                  </div>

                </div>
              </div>

              <!-- Themes Section -->
              <div id="enhanced-themes-section" class="analysis-section mb-8">
                <div class="themes-header">
                  <h3 class="card-title">Discussion Themes</h3>
                  <div class="theme-controls">
                    <div class="theme-filters">
                      <button class="filter-btn active" data-filter="all">All</button>
                      <button class="filter-btn" data-filter="positive">Positive</button>
                      <button class="filter-btn" data-filter="neutral">Neutral</button>
                      <button class="filter-btn" data-filter="negative">Negative</button>
                    </div>
                  </div>
                </div>
                <div class="themes-grid" id="themes-grid">
                  <!-- Theme cards will be populated here -->
                </div>
              </div>

              <!-- Comments Section -->
              <div id="comments-section" class="analysis-section mb-8">
                <div class="comments-sections">
                  <div class="comment-section">
                    <h3 class="section-title positive">
                      <svg class="section-icon" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                      </svg>
                      Top Positive Comments
                    </h3>
                    <div id="positive-comments" class="comments-list"></div>
                  </div>
                  <div class="comment-section">
                    <h3 class="section-title neutral">
                      <svg class="section-icon" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 100-12 6 6 0 000 12zm0-9a1 1 0 011 1v4a1 1 0 11-2 0V8a1 1 0 011-1z" clip-rule="evenodd"></path>
                      </svg>
                      Neutral Comments
                    </h3>
                    <div id="neutral-comments" class="comments-list"></div>
                  </div>
                  <div class="comment-section">
                    <h3 class="section-title negative">
                      <svg class="section-icon" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                      </svg>
                      Top Negative Comments
                    </h3>
                    <div id="negative-comments" class="comments-list"></div>
                  </div>
                </div>
              </div>

              <!-- Analytics Section -->
              <div id="analytics-section" class="analysis-section mb-8">
                <div class="analytics-grid">
                  <div class="analytics-card">
                    <h3 class="card-title">Age Distribution</h3>
                    <div class="chart-container">
                      <canvas id="age-distribution-chart"></canvas>
                      <div id="age-distribution-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Age demographic data will appear here</p>
                      </div>
                    </div>
                  </div>
                  <div class="analytics-card">
                    <h3 class="card-title">Gender Distribution</h3>
                    <div class="chart-container">
                      <canvas id="gender-distribution-chart"></canvas>
                      <div id="gender-distribution-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Gender demographic data will appear here</p>
                      </div>
                    </div>
                  </div>
                  <div class="analytics-card">
                    <h3 class="card-title">Depth Distribution</h3>
                    <div class="chart-container">
                      <canvas id="depth-distribution-chart"></canvas>
                      <div id="depth-distribution-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Comment depth analysis will appear here</p>
                      </div>
                    </div>
                  </div>
                  <div class="analytics-card full-width">
                    <h3 class="card-title">Demographic Insights</h3>
                    <div id="demographic-insights-display" class="insights-content"></div>
                  </div>
                </div>
              </div>
              
              <!-- Advanced Analysis Section -->
              <div id="advanced-section" class="analysis-section mb-8 hidden">
                <div class="analytics-grid">
                  <div class="analytics-card">
                    <h3 class="card-title">Sentiment by Depth</h3>
                    <div id="depth-analysis-display" class="chart-container"></div>
                  </div>
                  <div class="analytics-card">
                    <h3 class="card-title">Emerging Topics</h3>
                    <div id="main-emerging-topics-display" class="topics-content"></div>
                  </div>
                  <div class="analytics-card">
                    <h3 class="card-title">Risk Alerts</h3>
                    <div id="main-risk-alerts-display" class="alerts-content"></div>
                  </div>
                  <div class="analytics-card">
                    <h3 class="card-title">Community Language</h3>
                    <div id="main-community-lingo-display" class="lingo-content"></div>
                  </div>
                  <div class="analytics-card full-width">
                    <h3 class="card-title">Technical Metrics</h3>
                    <div id="technical-metrics-display" class="warnings-content"></div>
                  </div>
                </div>
              </div>

              <!-- Quality Section -->
              <div id="quality-section" class="analysis-section mb-8">
                <div class="quality-grid">
                  <div class="quality-card">
                    <h3 class="card-title">Language Distribution</h3>
                    <div class="chart-container">
                      <canvas id="language-distribution-chart"></canvas>
                    </div>
                  </div>
                  <div class="quality-card">
                    <h3 class="card-title">Feedback Trends</h3>
                    <div class="chart-container">
                      <canvas id="feedback-trends-chart"></canvas>
                      <div id="feedback-trends-placeholder" class="chart-placeholder">
                        <p class="text-gray-500 text-center">Feedback trend analysis will appear here</p>
                      </div>
                    </div>
                  </div>
                  <div class="quality-card">
                    <h3 class="card-title">Quality Metrics</h3>
                    <div class="quality-metrics">
                      <div class="quality-metric">
                        <div class="metric-value" id="quality-sample-rate">0%</div>
                        <div class="metric-label">Sample Rate</div>
                      </div>
                      <div class="quality-metric">
                        <div class="metric-value" id="quality-representativeness">Good</div>
                        <div class="metric-label">Representativeness</div>
                      </div>
                      <div class="quality-metric">
                        <div class="metric-value" id="quality-language-diversity">0</div>
                        <div class="metric-label">Language Diversity</div>
                      </div>
                    </div>
                  </div>
                  <div class="quality-card full-width">
                    <h3 class="card-title">Analysis Quality</h3>
                    <div id="quality-warnings-display" class="warnings-content">
                      <div class="quality-placeholder">
                        <p class="text-gray-500 text-center">Analysis quality metrics will appear here</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Insights Section -->
              <div id="insights-section" class="analysis-section mb-8">
                <div class="insights-grid">
                  <div class="insight-card">
                    <h3 class="card-title">Risk Alerts</h3>
                    <div id="risk-alerts-display" class="alerts-content"></div>
                  </div>
                  <div class="insight-card">
                    <h3 class="card-title">Emerging Topics</h3>
                    <div id="emerging-topics-display" class="topics-content"></div>
                  </div>
                  <div class="insight-card">
                    <h3 class="card-title">Community Language</h3>
                    <div id="community-lingo-display" class="lingo-content"></div>
                  </div>
                  <div class="insight-card full-width">
                    <h3 class="card-title">Sarcasm Detection</h3>
                    <div id="enhanced-sarcasm-display" class="sarcasm-content"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Legacy display removed - using enhanced layout only -->
          
          <!-- Legacy Themes Display Section - REMOVED to prevent duplication -->

          <!-- Legacy Sarcasm Detection Section - REMOVED to prevent duplication -->

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3 mt-6">
            <button id="analyze-another" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
              Analyze Another Thread
            </button>
            <button id="share-results" class="flex-1 bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.632 4.316C18.114 15.062 18 14.518 18 14c0-.482.114-.938.316-1.342m0 2.684a3 3 0 110-2.684M9 10a1 1 0 100-2 1 1 0 000 2zm6 12a1 1 0 100-2 1 1 0 000 2zM9 21a1 1 0 100-2 1 1 0 000 2z"></path>
              </svg>
              Share Results
            </button>
          </div>
        </div>
        <div class="mt-8 text-center">
          <p class="text-sm text-gray-500">
            Powered by AI • Fast • Accurate • Free
          </p>
        </div>
      </div>
    </div>
  </main>

  <!-- How It Works Section -->
  <section id="how-it-works" class="py-16 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">How Our Reddit Sentiment Analyzer Works</h2>
        <p class="text-lg text-gray-600">Get detailed sentiment insights in just three simple steps</p>
      </div>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Step 1 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-orange-600">1</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Paste Reddit URL</h3>
          <p class="text-gray-600">Simply copy any Reddit thread link and paste it into our analyzer. We support all standard Reddit URL formats.</p>
        </div>
        <!-- Step 2 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-purple-600">2</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">AI Analysis</h3>
          <p class="text-gray-600">Our advanced AI analyzes up to 300 comments, understanding context, sarcasm, and emotional nuances. The process typically takes 1-2 minutes.</p>
        </div>
        <!-- Step 3 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-green-600">3</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Get Insights</h3>
          <p class="text-gray-600">Receive detailed sentiment breakdowns, percentage analysis, sample comments, and a comprehensive summary of community opinions.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Use Cases Section -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Who Uses Reddit Sentiment Analysis?</h2>
        <p class="text-lg text-gray-600">Discover how different professionals leverage Reddit sentiment insights</p>
      </div>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Market Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Market Researchers</h3>
          <p class="text-gray-600 mb-4">Analyze public opinion on products, brands, and trends by studying Reddit community discussions and sentiment patterns.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Track brand perception across communities</li>
            <li>• Identify emerging trends and opinions</li>
            <li>• Analyze competitor discussions</li>
            <li>• Study consumer behavior patterns</li>
          </ul>
        </div>
        
        <!-- Social Media Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Social Media Managers</h3>
          <p class="text-gray-600 mb-4">Monitor brand mentions and community discussions to understand audience sentiment and improve engagement strategies.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Monitor brand mentions</li>
            <li>• Track campaign performance</li>
            <li>• Identify community hot topics</li>
            <li>• Measure audience engagement</li>
          </ul>
        </div>
        
        <!-- Product Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Product Managers</h3>
          <p class="text-gray-600 mb-4">Gather user feedback and feature requests from Reddit communities to inform product development decisions.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Analyze user feedback</li>
            <li>• Identify feature requests</li>
            <li>• Monitor product discussions</li>
            <li>• Track user satisfaction</li>
          </ul>
        </div>
        
        <!-- Academic Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Academic Researchers</h3>
          <p class="text-gray-600 mb-4">Study social phenomena, public opinion, and community behavior through Reddit sentiment analysis for academic research.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Social behavior analysis</li>
            <li>• Public opinion studies</li>
            <li>• Community research</li>
            <li>• Trend identification</li>
          </ul>
        </div>
        
        <!-- Content Creators -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Content Creators</h3>
          <p class="text-gray-600 mb-4">Understand audience reactions to content ideas and topics by analyzing relevant Reddit discussions and community sentiment.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Content idea validation</li>
            <li>• Audience interest analysis</li>
            <li>• Topic research</li>
            <li>• Community engagement tracking</li>
          </ul>
        </div>
        
        <!-- Business Analysts -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Business Analysts</h3>
          <p class="text-gray-600 mb-4">Analyze market sentiment, competitor discussions, and industry trends through Reddit community conversations.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Market sentiment analysis</li>
            <li>• Competitive intelligence</li>
            <li>• Industry trend monitoring</li>
            <li>• Consumer insight gathering</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- Voice-Optimized FAQ Section -->
  <section class="bg-gray-50 py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <VoiceFaqAccordion faqs={redditAnalyzerVoiceFaqs} />
    </div>
  </section>

  <!-- FAQ Section -->
  <section id="faq" class="bg-white py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Detailed Questions & Answers</h2>
        <p class="text-lg text-gray-600">Comprehensive information about our Reddit sentiment analyzer</p>
      </div>
      <FaqAccordion faqs={faqs} />
    </div>
  </section>

  <!-- JSON-LD Schema -->
  <script type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Reddit Sentiment Analyzer",
      "description": "Free AI-powered tool to analyze Reddit thread comment sentiment. Get percentage breakdowns, sentiment summaries, and community insights in 1-2 minutes.",
      "url": "https://www.senti-meter.com/reddit-sentiment-analyzer",
      "applicationCategory": "AnalyticsApplication",
      "operatingSystem": "Any",
      "browserRequirements": "Requires JavaScript",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock"
      },
      "featureList": [
        "AI-powered sentiment analysis using GPT-4o",
        "Analyzes up to 300 Reddit comments",
        "Real-time processing with detailed results",
        "Privacy-focused with no data storage",
        "Supports all Reddit URL formats",
        "Percentage breakdowns by sentiment",
        "Sample comments for each sentiment category",
        "Most upvoted comment highlighting"
      ]
    }
  </script>

  <!-- JavaScript -->
  <script>
  // Type declarations for global objects
  declare global {
    interface Window {
      interactiveCharts?: any;
      themeExplorer?: any;
      enhancedUI?: any;
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize enhanced UI components
    initializeEnhancedUI();
    
    // Enhanced UI functions
    function initializeEnhancedUI() {
      console.log('Initializing Enhanced UI...');
      
      // Initialize filter buttons
      const filterButtons = document.querySelectorAll('.filter-btn');
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const filter = button.getAttribute('data-filter');
          
          // Remove active class from all filter buttons
          filterButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          button.classList.add('active');
          
          // Apply filter to themes if themeExplorer is available
          if (window.themeExplorer) {
            window.themeExplorer.applyFilter(filter);
          }
        });
      });
    }
    
    // Enhanced results display function
    function displayEnhancedResults(data: any) {
      console.log('Displaying enhanced results with data:', data);
      
      // Update overview metrics
      updateOverviewMetrics(data);
      
      // Update sentiment charts
      updateSentimentCharts(data);
      
      // Update themes
      updateThemes(data);
      
      // Update comments
      updateComments(data);
      
      // Update analytics
      updateAnalytics(data);
      
      // Update quality metrics
      updateQualityMetrics(data);
      
      // Update insights
      updateInsights(data);
      
      // Initialize theme explorer if available
      if (window.themeExplorer && data.themes) {
        window.themeExplorer.initialize(data.themes, data.emerging_topics || [], data.community_lingo || []);
      }
      
      // Show the results container
      const resultsContainer = document.getElementById('results-container');
      if (resultsContainer) {
        resultsContainer.classList.remove('hidden');
      }
      
      // Reveal sections with data
      if (data.themes && data.themes.length > 0) {
        // Enhanced themes section is already visible in the enhanced layout
        const enhancedThemesSection = document.getElementById('enhanced-themes-section');
        if (enhancedThemesSection) {
          enhancedThemesSection.style.display = 'block';
        }
      }
      
      if (data.sarcasm_flags && data.sarcasm_flags.length > 0) {
        // Enhanced sarcasm section is already visible in the insights section
        console.log('Sarcasm flags found, enhanced section should be visible');
      }
      
      console.log('Enhanced results display completed');
    }
    
    function updateOverviewMetrics(data: any) {
      const overviewConfidence = document.getElementById('overview-confidence');
      const overviewAnalyzed = document.getElementById('overview-analyzed');
      const overviewThemes = document.getElementById('overview-themes');
      const overviewRisk = document.getElementById('overview-risk');
      const enhancedSummary = document.getElementById('enhanced-summary');
      
      if (overviewConfidence) overviewConfidence.textContent = Math.round(data.overall_sentiment?.confidence * 100) + '%';
      if (overviewAnalyzed) overviewAnalyzed.textContent = data.analyzed_count || 0;
      if (overviewThemes) overviewThemes.textContent = data.themes?.length || 0;
      if (overviewRisk) {
        const alerts = data.risk_alerts || [];
        if (alerts.length > 0) {
          const mainRisk = alerts[0];
          const riskText = mainRisk.alert_type || 'Controversy';
          overviewRisk.textContent = `${riskText}`;
          overviewRisk.title = `${mainRisk.explanation || 'Risk detected'} (${mainRisk.severity || 'medium'} severity)`;
        } else {
          overviewRisk.textContent = 'None';
          overviewRisk.title = 'No significant risks detected';
        }
      }
      if (enhancedSummary) enhancedSummary.textContent = data.overall_sentiment?.explainability || '';
    }
    
    function updateSentimentCharts(data: any) {
      // Create sentiment wheel if interactive charts are available
      if (window.interactiveCharts) {
        window.interactiveCharts.createSentimentWheel('sentiment-wheel', data);
        window.interactiveCharts.createSentimentDepthChart('sentiment-depth-chart', data);
        
        // Handle sentiment over time chart with placeholder
        if (data.sentiment_over_time && Object.keys(data.sentiment_over_time).length > 0) {
          window.interactiveCharts.createSentimentTimeChart('sentiment-time-chart', data);
          const placeholder = document.getElementById('sentiment-time-placeholder');
          if (placeholder) placeholder.style.display = 'none';
        }
        
        // Handle raw distribution chart with placeholder
        if (data.raw_distribution && Object.keys(data.raw_distribution).length > 0) {
          window.interactiveCharts.createRawDistributionChart('raw-distribution-chart', data);
          const placeholder = document.getElementById('raw-distribution-placeholder');
          if (placeholder) placeholder.style.display = 'none';
        }
      }
    }
    
    function updateThemes(data: any) {
      const themesGrid = document.getElementById('themes-grid');
      if (!themesGrid || !data.themes) return;
      
      console.log('Updating themes grid with:', data.themes);
      
      themesGrid.innerHTML = data.themes.map((theme: any, index: number) => `
        <div class="theme-card ${SecurityUtils.escapeHtml(theme.sentiment)}" data-theme-id="${index}">
          <div class="theme-header">
            <h4>${SecurityUtils.escapeHtml(theme.theme)}</h4>
            <div class="theme-meta">
              <span class="sentiment-badge ${SecurityUtils.escapeHtml(theme.sentiment)}">${SecurityUtils.escapeHtml(theme.sentiment)}</span>
              <span class="share-badge">${Math.round((theme.share || 0) * 100)}%</span>
            </div>
          </div>
          <div class="theme-summary">
            <p>${SecurityUtils.escapeHtml(theme.summary)}</p>
          </div>
        </div>
      `).join('');
      
      // Enhanced themes section is handled by the enhanced layout
    }
    
    function updateComments(data: any) {
      // Update comment sections with enhanced display
      updateCommentSection('positive-comments', data.top_positive_comments || []);
      updateCommentSection('neutral-comments', []); // API doesn't provide neutral comments separately
      updateCommentSection('negative-comments', data.top_negative_comments || []);
    }
    
    function updateCommentSection(elementId: string, comments: any[]) {
      const element = document.getElementById(elementId);
      if (!element) return;
      
      element.innerHTML = comments.map((comment: any) => `
        <div class="comment-item">
          <div class="comment-header">
            <span class="comment-author">${SecurityUtils.escapeHtml(comment.author || 'Anonymous')}</span>
            <span class="comment-score">${comment.upvotes || 0} upvotes</span>
          </div>
          <div class="comment-text">${SecurityUtils.escapeHtml(comment.text || comment)}</div>
          <div class="comment-confidence">Confidence: ${Math.round((comment.confidence || 0) * 100)}%</div>
        </div>
      `).join('');
    }
    
    function updateAnalytics(data: any) {
      // Create depth distribution chart if data is available
      if (window.interactiveCharts && data.sentiment_by_depth) {
        window.interactiveCharts.createDepthDistributionChart('depth-distribution-chart', data);
        const placeholder = document.getElementById('depth-distribution-placeholder');
        if (placeholder) placeholder.style.display = 'none';
      }
      
      // Create age distribution chart if data is available
      if (window.interactiveCharts && data.demographic_analysis?.age_distribution) {
        window.interactiveCharts.createAgeDistributionChart('age-distribution-chart', data);
        const placeholder = document.getElementById('age-distribution-placeholder');
        if (placeholder) placeholder.style.display = 'none';
      }
      
      // Create gender distribution chart if data is available
      if (window.interactiveCharts && data.demographic_analysis?.gender_distribution) {
        window.interactiveCharts.createGenderDistributionChart('gender-distribution-chart', data);
        const placeholder = document.getElementById('gender-distribution-placeholder');
        if (placeholder) placeholder.style.display = 'none';
      }
    }
    
    function updateQualityMetrics(data: any) {
      const qualitySampleRate = document.getElementById('quality-sample-rate');
      const qualityRepresentativeness = document.getElementById('quality-representativeness');
      const qualityLanguageDiversity = document.getElementById('quality-language-diversity');
      
      if (qualitySampleRate) qualitySampleRate.textContent = Math.round((data.analyzed_sample_rate || 0) * 100) + '%';
      if (qualityRepresentativeness) qualityRepresentativeness.textContent = data.sampling_quality?.sample_representativeness || 'Good';
      if (qualityLanguageDiversity) qualityLanguageDiversity.textContent = Object.keys(data.language_analysis?.language_distribution || {}).length.toString();
      
      // Create language distribution chart if data is available
      if (window.interactiveCharts && data.language_analysis?.language_distribution) {
        window.interactiveCharts.createLanguageDistributionChart('language-distribution-chart', data);
      }
      
      // Create feedback trends chart if data is available
      if (window.interactiveCharts && data.feedback_trends) {
        window.interactiveCharts.createFeedbackTrendsChart('feedback-trends-chart', data);
        const placeholder = document.getElementById('feedback-trends-placeholder');
        if (placeholder) placeholder.style.display = 'none';
      }
      
      // Update quality warnings display
      const qualityWarningsDisplay = document.getElementById('quality-warnings-display');
      if (qualityWarningsDisplay) {
        const warnings = data.quality_warnings || [];
        if (warnings.length > 0) {
          qualityWarningsDisplay.innerHTML = warnings.map((warning: any) => `
            <div class="quality-warning">
              <div class="warning-header">
                <span class="warning-icon">⚠️</span>
                <span class="warning-title">${warning.type || 'Quality Warning'}</span>
              </div>
              <div class="warning-description">${warning.message || warning.description || 'No details available'}</div>
              <div class="warning-severity">${warning.severity || 'medium'} severity</div>
            </div>
          `).join('');
        } else {
          qualityWarningsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No quality issues detected</div>';
        }
      }
    }
    
    function updateInsights(data: any) {
      updateRiskAlerts(data);
      updateEmergingTopics(data);
      updateCommunityLanguage(data);
      updateSarcasmDetection(data);
      updateDemographicInsights(data);
      
      // Also update main content sections
      updateMainRiskAlerts(data);
      updateMainEmergingTopics(data);
      updateMainCommunityLanguage(data);
      updateMainSarcasmDetection(data);
      updateMainDemographicInsights(data);
    }
    
    function updateRiskAlerts(data: any) {
      const riskAlertsDisplay = document.getElementById('risk-alerts-display');
      if (!riskAlertsDisplay) return;
      
      const alerts = data.risk_alerts || [];
      console.log('Risk alerts found:', alerts);
      
      if (alerts.length === 0) {
        riskAlertsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No significant risks detected in this discussion</div>';
        return;
      }
      
      riskAlertsDisplay.innerHTML = alerts.map((alert: any) => `
        <div class="risk-alert ${alert.severity}">
          <div class="alert-header">
            <span class="alert-icon">⚠️</span>
            <span class="alert-title">${alert.alert_type || 'Risk Alert'}</span>
          </div>
          <div class="alert-description">${alert.explanation || alert.description || 'No details available'}</div>
          <div class="alert-meta">
            <span class="severity-badge ${alert.severity}">${alert.severity} severity</span>
            <span class="confidence">${Math.round((alert.confidence || 0) * 100)}% confidence</span>
          </div>
        </div>
      `).join('');
    }
    
    function updateEmergingTopics(data: any) {
      const emergingTopicsDisplay = document.getElementById('emerging-topics-display');
      if (!emergingTopicsDisplay) return;
      
      const topics = data.emerging_topics || [];
      console.log('Emerging topics found:', topics);
      
      if (topics.length === 0) {
        emergingTopicsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No emerging topics detected in this discussion</div>';
        return;
      }
      
      emergingTopicsDisplay.innerHTML = topics.map((topic: any) => `
        <div class="emerging-topic">
          <h4>${topic.topic || 'Unknown Topic'}</h4>
          <p>${topic.explanation || topic.description || 'No description available'}</p>
          <div class="topic-meta">
            <span class="trend-badge ${topic.trend_direction}">${topic.trend_direction} trend</span>
            <span class="confidence">${Math.round((topic.confidence || 0) * 100)}% confidence</span>
          </div>
          ${topic.sample_comment ? `<div class="sample-comment">"${topic.sample_comment}"</div>` : ''}
        </div>
      `).join('');
    }
    
    function updateCommunityLanguage(data: any) {
      const communityLingoDisplay = document.getElementById('community-lingo-display');
      if (!communityLingoDisplay) return;
      
      const lingo = data.community_lingo || [];
      console.log('Community lingo found:', lingo);
      
      if (lingo.length === 0) {
        communityLingoDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No community-specific language detected</div>';
        return;
      }
      
      communityLingoDisplay.innerHTML = lingo.map((term: any) => `
        <div class="lingo-term">
          <span class="term">"${term.term || 'Unknown Term'}"</span>
          <span class="definition">${term.explanation || term.definition || 'No definition available'}</span>
          <div class="lingo-meta">
            <span class="frequency">${term.frequency || 0} uses</span>
            <span class="context">${term.context || 'General usage'}</span>
          </div>
        </div>
      `).join('');
    }
    
    function updateSarcasmDetection(data: any) {
      const sarcasmDisplay = document.getElementById('sarcasm-display');
      const enhancedSarcasmDisplay = document.getElementById('enhanced-sarcasm-display');
      
      const sarcasmFlags = data.sarcasm_flags || [];
      console.log('Sarcasm flags found:', sarcasmFlags);
      
      const sarcasmHtml = sarcasmFlags.length === 0 
        ? '<div class="text-center text-gray-500 py-4">No sarcasm detected in this discussion</div>'
        : sarcasmFlags.map((flag: any) => `
            <div class="sarcasm-item p-4 bg-yellow-50 rounded-lg border-l-4 border-yellow-400 mb-3">
              <p class="text-gray-800 italic mb-2">"${SecurityUtils.escapeHtml(flag.text || 'Unknown text')}"</p>
              <div class="flex items-center gap-3 text-sm">
                <span class="text-yellow-700 font-medium">
                  ${Math.round((flag.confidence || 0) * 100)}% confidence
                </span>
                <span class="text-gray-600">
                  by ${SecurityUtils.escapeHtml(flag.author || 'unknown')}
                </span>
                <span class="text-gray-600">
                  ${flag.upvotes || 0} upvotes
                </span>
              </div>
            </div>
          `).join('');
      
      if (sarcasmDisplay) sarcasmDisplay.innerHTML = sarcasmHtml;
      if (enhancedSarcasmDisplay) enhancedSarcasmDisplay.innerHTML = sarcasmHtml;
    }
    
    // Main content update functions for the advanced sections
    function updateMainRiskAlerts(data: any) {
      const mainRiskAlertsDisplay = document.getElementById('main-risk-alerts-display');
      if (!mainRiskAlertsDisplay) return;
      
      const alerts = data.risk_alerts || [];
      console.log('Main risk alerts found:', alerts);
      
      if (alerts.length === 0) {
        mainRiskAlertsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No significant risks detected in this discussion</div>';
        return;
      }
      
      mainRiskAlertsDisplay.innerHTML = alerts.map((alert: any) => `
        <div class="risk-alert ${alert.severity}">
          <div class="alert-header">
            <span class="alert-icon">⚠️</span>
            <span class="alert-title">${alert.alert_type || 'Risk Alert'}</span>
          </div>
          <div class="alert-description">${alert.explanation || alert.description || 'No details available'}</div>
          <div class="alert-meta">
            <span class="severity-badge ${alert.severity}">${alert.severity} severity</span>
            <span class="confidence">${Math.round((alert.confidence || 0) * 100)}% confidence</span>
          </div>
        </div>
      `).join('');
    }
    
    function updateMainEmergingTopics(data: any) {
      const mainEmergingTopicsDisplay = document.getElementById('main-emerging-topics-display');
      if (!mainEmergingTopicsDisplay) return;
      
      const topics = data.emerging_topics || [];
      console.log('Main emerging topics found:', topics);
      
      if (topics.length === 0) {
        mainEmergingTopicsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No emerging topics detected in this discussion</div>';
        return;
      }
      
      mainEmergingTopicsDisplay.innerHTML = topics.map((topic: any) => `
        <div class="emerging-topic">
          <h4>${topic.topic || 'Unknown Topic'}</h4>
          <p>${topic.explanation || topic.description || 'No description available'}</p>
          <div class="topic-meta">
            <span class="trend-badge ${topic.trend_direction}">${topic.trend_direction} trend</span>
            <span class="confidence">${Math.round((topic.confidence || 0) * 100)}% confidence</span>
          </div>
          ${topic.sample_comment ? `<div class="sample-comment">"${topic.sample_comment}"</div>` : ''}
        </div>
      `).join('');
    }
    
    function updateMainCommunityLanguage(data: any) {
      const mainCommunityLingoDisplay = document.getElementById('main-community-lingo-display');
      if (!mainCommunityLingoDisplay) return;
      
      const lingo = data.community_lingo || [];
      console.log('Main community lingo found:', lingo);
      
      if (lingo.length === 0) {
        mainCommunityLingoDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No community-specific language detected</div>';
        return;
      }
      
      mainCommunityLingoDisplay.innerHTML = lingo.map((term: any) => `
        <div class="lingo-term">
          <span class="term">"${term.term || 'Unknown Term'}"</span>
          <span class="definition">${term.explanation || term.definition || 'No definition available'}</span>
          <div class="lingo-meta">
            <span class="frequency">${term.frequency || 0} uses</span>
            <span class="context">${term.context || 'General usage'}</span>
          </div>
        </div>
      `).join('');
    }
    
    function updateMainSarcasmDetection(data: any) {
      const mainSarcasmDisplay = document.getElementById('main-sarcasm-display');
      if (!mainSarcasmDisplay) return;
      
      const sarcasmFlags = data.sarcasm_flags || [];
      console.log('Main sarcasm flags found:', sarcasmFlags);
      
      if (sarcasmFlags.length === 0) {
        mainSarcasmDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No sarcasm detected in this discussion</div>';
        return;
      }
      
      mainSarcasmDisplay.innerHTML = sarcasmFlags.map((flag: any) => `
        <div class="sarcasm-item">
          <div class="sarcasm-text">"${flag.text || 'Unknown text'}"</div>
          <div class="sarcasm-meta">
            <span class="confidence">${Math.round((flag.confidence || 0) * 100)}% confidence</span>
            <span class="author">by ${flag.author || 'unknown'}</span>
            <span class="upvotes">${flag.upvotes || 0} upvotes</span>
          </div>
          <div class="sarcasm-reason">${flag.reason || 'Sarcasm indicators detected'}</div>
        </div>
      `).join('');
    }
    
    function updateDemographicInsights(data: any) {
      const demographicInsightsDisplay = document.getElementById('demographic-insights-display');
      if (!demographicInsightsDisplay) return;
      
      const demographicInsights = data.demographic_insights;
      console.log('Demographic insights found:', demographicInsights);
      
      if (!demographicInsights) {
        demographicInsightsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No demographic insights available for this analysis</div>';
        return;
      }
      
      let insightsHtml = '';

      // Age groups
      if (demographicInsights.age_groups) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-indigo-50 rounded-lg">
            <h4 class="font-semibold text-indigo-900 mb-2">Age Demographics</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
              ${Object.entries(demographicInsights.age_groups).map(([age, percentage]: [string, any]) => `
                <div class="text-center">
                  <div class="text-indigo-700 font-bold">${Math.round(percentage)}%</div>
                  <div class="text-indigo-600 text-sm">${age}</div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Geographic insights
      if (demographicInsights.geographic_indicators) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-green-50 rounded-lg">
            <h4 class="font-semibold text-green-900 mb-2">Geographic Indicators</h4>
            <div class="space-y-2">
              ${demographicInsights.geographic_indicators.slice(0, 5).map((geo: any) => `
                <div class="flex justify-between">
                  <span class="text-green-700">${SecurityUtils.escapeHtml(geo.region || geo.location)}</span>
                  <span class="text-green-600">${Math.round(geo.confidence * 100)}% confidence</span>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Interest categories
      if (demographicInsights.interest_categories) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-yellow-50 rounded-lg">
            <h4 class="font-semibold text-yellow-900 mb-2">Interest Categories</h4>
            <div class="flex flex-wrap gap-2">
              ${demographicInsights.interest_categories.slice(0, 8).map((interest: any) => `
                <span class="px-3 py-1 bg-yellow-200 text-yellow-800 rounded-full text-sm">
                  ${SecurityUtils.escapeHtml(interest.category)} (${Math.round(interest.score * 100)}%)
                </span>
              `).join('')}
            </div>
          </div>
        `;
      }

      demographicInsightsDisplay.innerHTML = insightsHtml || '<div class="text-center text-gray-500 py-4">No demographic insights available</div>';
    }
    
    function updateMainDemographicInsights(data: any) {
      const mainDemographicInsightsDisplay = document.getElementById('main-demographic-insights-display');
      if (!mainDemographicInsightsDisplay) return;
      
      const demographicInsights = data.demographic_insights;
      console.log('Main demographic insights found:', demographicInsights);
      
      if (!demographicInsights) {
        mainDemographicInsightsDisplay.innerHTML = '<div class="text-center text-gray-500 py-4">No demographic insights available for this analysis</div>';
        return;
      }
      
      let insightsHtml = '';

      // Age groups
      if (demographicInsights.age_groups) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-indigo-50 rounded-lg">
            <h4 class="font-semibold text-indigo-900 mb-2">Age Demographics</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
              ${Object.entries(demographicInsights.age_groups).map(([age, percentage]: [string, any]) => `
                <div class="text-center">
                  <div class="text-indigo-700 font-bold">${Math.round(percentage)}%</div>
                  <div class="text-indigo-600 text-sm">${age}</div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Geographic insights
      if (demographicInsights.geographic_indicators) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-green-50 rounded-lg">
            <h4 class="font-semibold text-green-900 mb-2">Geographic Indicators</h4>
            <div class="space-y-2">
              ${demographicInsights.geographic_indicators.slice(0, 5).map((geo: any) => `
                <div class="flex justify-between">
                  <span class="text-green-700">${SecurityUtils.escapeHtml(geo.region || geo.location)}</span>
                  <span class="text-green-600">${Math.round(geo.confidence * 100)}% confidence</span>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Interest categories
      if (demographicInsights.interest_categories) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-yellow-50 rounded-lg">
            <h4 class="font-semibold text-yellow-900 mb-2">Interest Categories</h4>
            <div class="flex flex-wrap gap-2">
              ${demographicInsights.interest_categories.slice(0, 8).map((interest: any) => `
                <span class="px-3 py-1 bg-yellow-200 text-yellow-800 rounded-full text-sm">
                  ${SecurityUtils.escapeHtml(interest.category)} (${Math.round(interest.score * 100)}%)
                </span>
              `).join('')}
            </div>
          </div>
        `;
      }

      mainDemographicInsightsDisplay.innerHTML = insightsHtml || '<div class="text-center text-gray-500 py-4">No demographic insights available</div>';
    }
    
    // Security utilities (reused from YouTube analyzer)
    const SecurityUtils = {
      escapeHtml: (text: string) => {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      },
      isValidUrl: (string: string) => {
        try {
          const url = new URL(string);
          return ['http:', 'https:'].includes(url.protocol);
        } catch (_) {
          return false;
        }
      },
      isValidRedditUrl: (url: string) => {
        if (!SecurityUtils.isValidUrl(url)) return false;
        const patterns = [
          /^https?:\/\/(www\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(old\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(new\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
        ];
        return patterns.some(pattern => pattern.test(url));
      },
      safeSetText: (element: HTMLElement | null, text: string) => {
        console.log('safeSetText called with element:', element, 'text:', text);
        if (element && typeof text === 'string') {
          element.textContent = text;
          console.log('Text set successfully on element:', element.id || element.className);
        } else {
          console.log('safeSetText failed - element or text invalid');
        }
      },
      rateLimiter: (() => {
        const requests = new Map();
        const WINDOW_MS = 60000;
        const MAX_REQUESTS = 5;
        return {
          isAllowed: () => {
            const now = Date.now();
            const windowStart = now - WINDOW_MS;
            for (const [time, count] of requests.entries()) {
              if (time < windowStart) {
                requests.delete(time);
              }
            }
            let recentRequests = 0;
            for (const [time, count] of requests.entries()) {
              if (time >= windowStart) {
                recentRequests += count;
              }
            }
            if (recentRequests >= MAX_REQUESTS) {
              return false;
            }
            const minute = Math.floor(now / WINDOW_MS) * WINDOW_MS;
            requests.set(minute, (requests.get(minute) || 0) + 1);
            return true;
          }
        };
      })()
    };

    // Cache all DOM elements
    const elements = {
      form: document.getElementById('analysis-form'),
      urlInput: document.getElementById('reddit-url'),
      urlError: document.getElementById('url-error'),
      analyzeButton: document.getElementById('analyze-button'),
      loadingState: document.getElementById('loading-state'),
      loadingText: document.getElementById('loading-text'),
      progressBar: document.getElementById('progress-bar'),
      progressFill: document.getElementById('progress-fill'),
      errorState: document.getElementById('error-state'),
      errorMessage: document.getElementById('error-message'),
      errorSuggestions: document.getElementById('error-suggestions'),
      resultsContainer: document.getElementById('results-container'),
      positivePercentage: document.getElementById('positive-percentage'),
      neutralPercentage: document.getElementById('neutral-percentage'),
      negativePercentage: document.getElementById('negative-percentage'),
      positiveBar: document.getElementById('positive-bar'),
      neutralBar: document.getElementById('neutral-bar'),
      negativeBar: document.getElementById('negative-bar'),
      positiveComments: document.getElementById('positive-comments'),
      neutralComments: document.getElementById('neutral-comments'),
      negativeComments: document.getElementById('negative-comments'),
      sampleInfo: document.getElementById('sample-info'),
      mostUpvotedCallout: document.getElementById('most-upvoted-callout'),
      mostUpvotedLabel: document.getElementById('most-upvoted-label'),
      mostUpvotedText: document.getElementById('most-upvoted-text'),
      threadInfo: document.getElementById('thread-info'),
      threadTitle: document.getElementById('thread-title'),
      subredditName: document.getElementById('subreddit-name'),
      threadAuthor: document.getElementById('thread-author'),
      threadScore: document.getElementById('thread-score'),
      threadStats: document.getElementById('thread-stats'),
      analyzeAnother: document.getElementById('analyze-another'),
      shareResults: document.getElementById('share-results'),
      historyContainer: document.getElementById('history-container'),
      historyList: document.getElementById('history-list')
    };

    // Application state
    let isAnalyzing = false;
    let lastAnalyzedUrl = '';
    let currentRedditUrl = '';
    let currentSummary = '';
    let progressInterval: ReturnType<typeof setInterval> | null = null;
    let progressStage = 0;
    let lastProgress = 0;

    const progressMessages = [
      'Validating URL...',
      'Connecting to Reddit...',
      'Fetching comments...',
      'Preparing for analysis...',
      'Analyzing sentiment with AI...',
      'Generating results...'
    ];

    // Results cache
    const analysisCache = new Map();
    const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours
    const STORAGE_KEY = 'reddit_sentiment_cache_v2';

    // Enhanced persistent cache functions
    function saveAnalysisToCache(url: string, title: string, analysisData: any) {
      const cacheEntry = {
        url,
        title,
        timestamp: Date.now(),
        data: analysisData.data,
        meta: analysisData.meta,
        fullAnalysis: analysisData.fullAnalysis
      };
      // Save to in-memory cache
      analysisCache.set(url, cacheEntry);
      // Save to localStorage
      let allCache: Record<string, any> = {};
      try {
        allCache = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}') as Record<string, any>;
      } catch {}
      allCache[url] = cacheEntry;
      // Limit to 10 entries
      const entries = Object.entries(allCache).sort((a, b) => (b[1]?.timestamp || 0) - (a[1]?.timestamp || 0));
      const limitedCache = Object.fromEntries(entries.slice(0, 10));
      localStorage.setItem(STORAGE_KEY, JSON.stringify(limitedCache));
      console.log('[CACHE] Saved analysis to cache:', { key: url, value: cacheEntry });
    }

    function loadAnalysisCache() {
      try {
        const allCache = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}') as Record<string, any>;
        Object.values(allCache).forEach((entry: any) => {
          if (entry.url && entry.data) {
            analysisCache.set(entry.url, entry);
          }
        });
      } catch {}
    }

    function getCachedAnalysis(url: string) {
      let allCache: Record<string, any> = {};
      try {
        allCache = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}') as Record<string, any>;
      } catch {}
      const cached = allCache[url];
      if (cached) {
        console.log('[CACHE] Read analysis from cache:', { key: url, value: cached });
      } else {
        console.warn('[CACHE] No cache found for key:', url, 'Available keys:', Object.keys(allCache));
      }
      return cached;
    }

    // On page load, load cache
    loadAnalysisCache();

    // Utility functions
    function hideAllStates() {
      // Only log once per call to reduce console spam
      const statesToHide = [
        elements.loadingState,
        elements.errorState,
        elements.resultsContainer,
        elements.sampleInfo,
        elements.mostUpvotedCallout,
        elements.threadInfo,
        elements.progressBar,
        elements.urlError
      ];
      
      let hiddenCount = 0;
      statesToHide.forEach(el => {
        if (el && !el.classList.contains('hidden')) {
          el.classList.add('hidden');
          hiddenCount++;
        }
      });
      
      // Only log if we actually hid something
      if (hiddenCount > 0) {
        console.log(`hideAllStates: Hidden ${hiddenCount} elements`);
      }
      
      clearProgress();
    }

    function showLoading(message: string, progress?: number) {
      hideAllStates();
      SecurityUtils.safeSetText(elements.loadingText, message);
      elements.loadingState?.classList.remove('hidden');
      elements.progressBar?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = true;
      }
      // Only update if progress increases or stays the same
      if (typeof progress === 'number' && progress >= lastProgress) {
        lastProgress = progress;
        if (elements.progressFill) {
          (elements.progressFill as HTMLElement).style.width = `${progress}%`;
        }
      }
      startProgress();
    }

    function showError(message: string) {
      hideAllStates();
      SecurityUtils.safeSetText(elements.errorMessage, message);
      elements.errorState?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }
      let suggestion = '';
      if (message.toLowerCase().includes('url') || message.toLowerCase().includes('format')) {
        suggestion = 'Tip: Copy the complete URL from your browser\'s address bar.';
      } else if (message.toLowerCase().includes('comments') || message.toLowerCase().includes('private')) {
        suggestion = 'Tip: Make sure the thread is public and has comments.';
      } else if (message.toLowerCase().includes('rate limit')) {
        suggestion = 'Tip: Wait a few minutes before trying again.';
      }
      SecurityUtils.safeSetText(elements.errorSuggestions, suggestion);
    }

    function startProgress() {
      lastProgress = 0;
      progressStage = 0;
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '0%';
      }
      updateProgress();
      progressInterval = setInterval(updateProgress, 1000);
    }

    function updateProgress() {
      if (progressStage < progressMessages.length) {
        SecurityUtils.safeSetText(elements.loadingText, progressMessages[progressStage]);
        const progress = ((progressStage + 1) / progressMessages.length) * 90;
        if (elements.progressFill) {
          (elements.progressFill as HTMLElement).style.width = `${progress}%`;
        }
        progressStage++;
      }
    }

    function clearProgress() {
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      progressStage = 0;
    }

    function showResults(data: any, meta: any, fullAnalysis?: any) {
      hideAllStates();
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '100%';
      }



      // Display thread info
      if (meta.threadInfo) {
        displayThreadInfo(meta.threadInfo);
      }

      // Display sample size info
      if (meta.analyzedCount && meta.totalComments) {
        displaySampleInfo(meta);
      }

      // Display most upvoted comment
      if (meta.mostUpvoted) {
        displayMostUpvotedComment(meta.mostUpvoted);
      }

      // Update sentiment data
      displaySentimentData(data);
      
      // Display sample comments from the comprehensive analysis
      if (fullAnalysis?.top_positive_comments || fullAnalysis?.top_negative_comments) {
        const sampleComments = {
          positive: (fullAnalysis.top_positive_comments || []).map((c: any) => c.text || c),
          neutral: [], // Add neutral comments if available
          negative: (fullAnalysis.top_negative_comments || []).map((c: any) => c.text || c)
        };
        displaySampleComments(sampleComments);
      }

      // Display enhanced results with sidebar features
      if (fullAnalysis) {
        displayEnhancedResults(fullAnalysis);
      }

      elements.resultsContainer?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }

      currentSummary = data.explainability || fullAnalysis?.overall_sentiment?.explainability || '';
      if (meta.threadInfo?.title) {
        addToHistory(currentRedditUrl, meta.threadInfo.title);
        // Save full analysis to persistent cache
        saveAnalysisToCache(currentRedditUrl, meta.threadInfo.title, { 
          data: fullAnalysis.overall_sentiment, 
          meta, 
          fullAnalysis: fullAnalysis 
        });
      }
    }

    function displayThreadInfo(threadInfo: any) {
      SecurityUtils.safeSetText(elements.threadTitle, threadInfo.title || '');
      SecurityUtils.safeSetText(elements.subredditName, `r/${threadInfo.subreddit}` || '');
      SecurityUtils.safeSetText(elements.threadAuthor, `u/${threadInfo.author}` || '');
      SecurityUtils.safeSetText(elements.threadScore, threadInfo.score?.toString() || '0');
      // Add a space before 'upvotes' in the thread info row
      const threadScoreEl = document.getElementById('thread-score');
      if (threadScoreEl && threadScoreEl.nextSibling && threadScoreEl.nextSibling.textContent?.startsWith('upvotes')) {
        threadScoreEl.nextSibling.textContent = ' upvotes';
      }
      // Set post image if available
      const imageContainer = document.getElementById('thread-image-container');
      if (imageContainer) {
        imageContainer.innerHTML = '';
        console.log('Thread image URL:', threadInfo.imageUrl);
        if (threadInfo.imageUrl) {
          // Skip image loading for external URLs that are likely to have CORS issues
          if (threadInfo.imageUrl && !threadInfo.imageUrl.includes('redd.it') && !threadInfo.imageUrl.includes('reddit.com')) {
            // Show fallback with Reddit logo
            const img = document.createElement('img');
            img.src = '/reddit-logo.png';
            img.alt = 'Reddit logo';
            img.className = 'w-full h-full object-cover rounded-lg';
            img.onerror = function() {
              // Fallback to SVG if Reddit logo fails
              imageContainer.innerHTML = `<svg class="w-full h-full text-orange-500" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`;
            };
            imageContainer.appendChild(img);
          } else {
            // Load Reddit images normally
            const img = document.createElement('img');
            img.src = threadInfo.imageUrl;
            img.alt = `Reddit post image for "${threadInfo.title || 'thread'}"`;
            img.className = 'w-full h-full object-cover rounded-lg';
            img.onerror = function() { 
              console.error('Image failed to load:', threadInfo.imageUrl);
              // Show fallback with link to original image
              imageContainer.innerHTML = `
                <div class="flex flex-col items-center justify-center h-full bg-gray-100 rounded-lg p-4">
                  <svg class="w-12 h-12 md:w-16 md:h-16 text-gray-400 mb-2" fill="currentColor" viewBox="0 0 20 20">
                    <circle cx="10" cy="10" r="10" fill="#FF4500"/>
                    <ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/>
                    <circle cx="7" cy="13" r="1.5" fill="#000"/>
                    <circle cx="13" cy="13" r="1.5" fill="#000"/>
                    <ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/>
                    <circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/>
                    <circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/>
                  </svg>
                  <p class="text-xs text-gray-500 text-center mb-2">Image failed to load</p>
                  <a href="${threadInfo.imageUrl}" target="_blank" class="text-xs text-blue-600 hover:text-blue-800 underline">View original image</a>
                </div>
              `; 
            };
            img.onload = function() {
              console.log('Image loaded successfully:', threadInfo.imageUrl);
            };
            imageContainer.appendChild(img);
          }
        } else {
          console.log('No image URL found, using fallback');
          // fallback: Reddit logo SVG
          imageContainer.innerHTML = `<svg class="w-12 h-12 md:w-16 md:h-16 text-white mx-auto" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`;
        }
      }
      elements.threadInfo?.classList.remove('hidden');
    }

    function displaySampleInfo(meta: any) {
      console.log('displaySampleInfo called with:', meta);
      let infoText = '';
      if (meta.totalComments <= meta.analyzedCount) {
        infoText = `Analyzed all ${meta.analyzedCount} comments for this thread.`;
      } else {
        infoText = `Analyzed a sample of ${meta.analyzedCount} out of ${meta.totalComments} comments.`;
      }
      console.log('Sample info text:', infoText);
      SecurityUtils.safeSetText(elements.sampleInfo, infoText);
      elements.sampleInfo?.classList.remove('hidden');
    }

    function displayMostUpvotedComment(mostUpvoted: any) {
      if (mostUpvoted.text && typeof mostUpvoted.score === 'number') {
        SecurityUtils.safeSetText(elements.mostUpvotedLabel, `Most upvoted comment (${mostUpvoted.score} upvotes):`);
        SecurityUtils.safeSetText(elements.mostUpvotedText, `"${mostUpvoted.text}"`);
        elements.mostUpvotedCallout?.classList.remove('hidden');
      }
    }

    function displaySentimentData(data: any) {
      console.log('displaySentimentData called with:', data);
      
      const positive = Math.max(0, Math.min(100, Math.round(Number(data.positive) || 0)));
      const neutral = Math.max(0, Math.min(100, Math.round(Number(data.neutral) || 0)));
      const negative = Math.max(0, Math.min(100, Math.round(Number(data.negative) || 0)));

      console.log('Calculated percentages:', { positive, neutral, negative });
      console.log('Elements found:', {
        positivePercentage: elements.positivePercentage,
        neutralPercentage: elements.neutralPercentage,
        negativePercentage: elements.negativePercentage
      });
      
      SecurityUtils.safeSetText(elements.positivePercentage, `${positive}%`);
      SecurityUtils.safeSetText(elements.neutralPercentage, `${neutral}%`);
      SecurityUtils.safeSetText(elements.negativePercentage, `${negative}%`);

      setTimeout(() => {
        if (elements.positiveBar) (elements.positiveBar as HTMLElement).style.width = `${positive}%`;
        if (elements.neutralBar) (elements.neutralBar as HTMLElement).style.width = `${neutral}%`;
        if (elements.negativeBar) (elements.negativeBar as HTMLElement).style.width = `${negative}%`;
      }, 100);


    }

    function displaySampleComments(sampleComments: any) {
      if (!sampleComments) return;
      console.log('Displaying sample comments:', sampleComments);
      
      updateCommentsContainer(elements.positiveComments, sampleComments.positive, 'text-green-700');
      updateCommentsContainer(elements.neutralComments, sampleComments.neutral, 'text-gray-700');
      updateCommentsContainer(elements.negativeComments, sampleComments.negative, 'text-red-700');
    }

    function updateCommentsContainer(container: HTMLElement | null, comments: any[], textColor: string) {
      if (!container || !Array.isArray(comments)) return;
      container.innerHTML = '';
      comments.forEach(comment => {
        if (typeof comment === 'string' && comment.trim()) {
          const commentDiv = document.createElement('div');
          commentDiv.className = `text-sm ${textColor} bg-white p-3 rounded-lg border border-gray-200`;
          SecurityUtils.safeSetText(commentDiv, `"${comment.trim()}"`);
          container.appendChild(commentDiv);
        }
      });
    }

    // Enhanced fetch with security measures
    async function secureFetch(url: string, options: RequestInit = {}) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000); // Increased to 60s for comprehensive analysis

      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          }
        });

        clearTimeout(timeoutId);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          throw new Error(errorData.error || `HTTP ${response.status}`);
        }

        return response;
      } catch (error: unknown) {
        clearTimeout(timeoutId);
        if (error && typeof error === 'object' && 'message' in error) {
          showError((error as { message?: string }).message || 'An unexpected error occurred');
        } else {
          showError('An unexpected error occurred');
        }
        throw error;
      }
    }

    // Streaming analysis function
    async function analyzeWithStreaming(redditUrl: string, maxComments: number) {
      const timeoutDuration = 120000; // 2 minutes timeout
      let timeoutId;
      
      try {
        isAnalyzing = true;
        lastAnalyzedUrl = redditUrl;
        currentRedditUrl = redditUrl;

        // Reset progress
        let progressStage = 0;
        const stages = ['validating', 'parsing_url', 'fetching_reddit', 'reddit_fetched', 'ai_analysis', 'ai_processing', 'ai_complete', 'finalizing', 'complete'];
        
        // Set up timeout for the entire operation
        const timeoutPromise = new Promise((_, reject) => {
          timeoutId = setTimeout(() => {
            reject(new Error('Analysis timed out. Please try again.'));
          }, timeoutDuration);
        });
        
        // Start streaming request
        const fetchPromise = fetch('/api/reddit-sentiment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            redditUrl: redditUrl,
            maxComments: maxComments,
            stream: true
          })
        });

        const response = await Promise.race([fetchPromise, timeoutPromise]) as Response;

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const reader = response.body?.getReader();
        if (!reader) {
          throw new Error('No response stream available');
        }

        const decoder = new TextDecoder();
        let buffer = '';
        let analysisData: any = {};

        try {
          while (true) {
            const { done, value } = await reader.read();
            
            if (done) {
              console.log('Stream reading completed');
              break;
            }

            buffer += decoder.decode(value, { stream: true });
            console.log('Received stream chunk:', buffer);
            
            // Process complete SSE messages
            const lines = buffer.split('\n');
            buffer = lines.pop() || '';

            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6).trim();
                
                if (data) {
                  try {
                    const message = JSON.parse(data);
                    console.log('Parsed streaming message:', message);
                    await handleStreamingMessage(message, analysisData);
                    
                    // If it's an error message, break out of the streaming loop
                    if (message.type === 'error') {
                      break;
                    }
                  } catch (e) {
                    console.warn('Failed to parse streaming message:', data, e);
                  }
                }
              }
            }
          }
        } finally {
          reader.releaseLock();
        }

      } catch (error: any) {
        console.error('Streaming analysis error:', error);
        showError(error.message || 'Streaming analysis failed');
      } finally {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        isAnalyzing = false;
      }
    }

    // Handle individual streaming messages
    async function handleStreamingMessage(message: any, analysisData: any) {
      switch (message.type) {
        case 'progress':
          handleProgressMessage(message);
          break;

        case 'complete':
          handleCompleteMessage(message, analysisData);
          break;

        case 'error':
          showError(message.error || 'Analysis failed');
          return; // Exit the streaming handler gracefully

        default:
          console.log('Streaming message:', message);
      }
    }

    // Handle progress messages
    function handleProgressMessage(message: any) {
      const progressMessages: { [key: string]: string } = {
        'validating': 'Validating request...',
        'parsing_url': 'Extracting thread information...',
        'fetching_reddit': 'Fetching Reddit comments...',
        'reddit_fetched': `Fetched ${message.data?.commentCount || 0} comments from r/${message.data?.subreddit || 'unknown'}`,
        'ai_analysis': 'Starting comprehensive AI analysis...',
        'openai_request': 'Sending analysis request to OpenAI...',
        'ai_processing': 'AI is analyzing sentiment and themes...',
        'sentiment_detected': 'Overall sentiment analysis detected...',
        'advanced_analysis': 'Advanced analysis (themes, sarcasm) in progress...',
        'ai_complete': 'AI analysis complete, processing results...',
        'finalizing': 'Finalizing analysis...'
      };

      const displayMessage = progressMessages[message.stage] || message.message || 'Processing...';
      
      // Only update loading text, don't hide all states on every progress message
      SecurityUtils.safeSetText(elements.loadingText, displayMessage);

      // Update progress bar if we have progress percentage
      if (message.progress && elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = `${message.progress}%`;
      }

      // Show thread info when available (only once)
      if (message.data?.threadTitle && message.stage === 'reddit_fetched') {
        displayThreadInfo({
          title: message.data.threadTitle,
          subreddit: message.data.subreddit,
          author: message.data.author,
          score: message.data.score,
          imageUrl: message.data.imageUrl
        });
      }
    }

    // Handle completion message
    function handleCompleteMessage(message: any, analysisData: any) {
      console.log('handleCompleteMessage called with message:', message);
      if (message.data) {
        // Use the same processing as the regular API
        const analysisResult = message.data;
        console.log('Analysis result from streaming:', analysisResult);
        console.log('Analysis result keys:', Object.keys(analysisResult));
        console.log('Overall sentiment from analysis result:', analysisResult.overall_sentiment);
        
        // Display enhanced UI with complete analysis results
        displayEnhancedResults(analysisResult);
        
        // Also update sidebar insights specifically for streaming
        updateInsights(analysisResult);
        
        console.log('Thread image URL from API:', analysisResult.thread_image_url);
        console.log('Thread URL from API:', analysisResult.thread_url);
        
        const meta = {
          analyzedCount: analysisResult.analyzed_count,
          totalComments: analysisResult.sampling_quality?.total_comments_available || analysisResult.analyzed_count,
          threadInfo: {
            title: analysisResult.thread_title,
            subreddit: analysisResult.subreddit,
            author: analysisResult.thread_post_author?.replace('u/', ''),
            score: analysisResult.thread_score,
            imageUrl: analysisResult.thread_image_url || analysisResult.thread_url // Use the image URL or thread URL as fallback
          }
        };

        // Cache results
        analysisCache.set(currentRedditUrl, {
          data: { sentiment: analysisResult.overall_sentiment, meta, fullAnalysis: analysisResult },
          timestamp: Date.now()
        });

        // Show results with progressive enhancements for streaming
        showStreamingResults(analysisResult, meta);
      }
    }

    // Enhanced results display for streaming with progressive reveals
    function showStreamingResults(analysisData: any, meta: any) {
      console.log('showStreamingResults called with:', analysisData, meta);
      console.log('analysisData structure:', Object.keys(analysisData));
      
      // First show basic sentiment
      console.log('Hiding all states before showing results');
      hideAllStates();
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '100%';
      }

      // Display thread info
      if (meta.threadInfo) {
        displayThreadInfo(meta.threadInfo);
      }

      // Display sample size info
      console.log('Meta data:', meta);
      if (meta.analyzedCount && meta.totalComments) {
        displaySampleInfo(meta);
      }

      // Start with sentiment analysis
      console.log('Displaying sentiment data:', analysisData.overall_sentiment);
      if (analysisData.overall_sentiment) {
        displaySentimentData(analysisData.overall_sentiment);
      } else {
        console.error('No overall_sentiment data found in analysisData');
      }
      
      console.log('Results container element:', elements.resultsContainer);
      console.log('Results container classes before:', elements.resultsContainer?.className);
      elements.resultsContainer?.classList.remove('hidden');
      console.log('Results container classes after:', elements.resultsContainer?.className);

      // Progressive reveals with delays for better UX
      setTimeout(() => {
        // Show themes after 500ms
        console.log('Attempting to show themes:', analysisData.themes);
        if (analysisData.themes && analysisData.themes.length > 0) {
          displayAdvancedThemes(analysisData.themes);
          // Enhanced themes section is already visible in the enhanced layout
        } else {
          console.log('No themes to display');
        }
      }, 500);

      setTimeout(() => {
        // Show sample comments after 1000ms  
        if (analysisData.top_positive_comments || analysisData.top_negative_comments) {
          const sampleComments = {
            positive: (analysisData.top_positive_comments || []).map((c: any) => c.text || c),
            neutral: [], // Add neutral comments if they exist
            negative: (analysisData.top_negative_comments || []).map((c: any) => c.text || c)
          };
          displaySampleComments(sampleComments);
        }
      }, 1000);

      setTimeout(() => {
        // Show sarcasm detection after 1500ms
        console.log('Attempting to show sarcasm flags:', analysisData.sarcasm_flags);
        if (analysisData.sarcasm_flags && analysisData.sarcasm_flags.length > 0) {
          displaySarcasmFlags(analysisData.sarcasm_flags);
          // Enhanced sarcasm section is already visible in the insights section
        } else {
          console.log('No sarcasm flags to display');
        }
      }, 1500);

      setTimeout(() => {
        // Show advanced features after 2000ms
        console.log('About to call displayAdvancedAnalysis with:', analysisData);
        displayAdvancedAnalysis(analysisData);
        
        // Always reveal the advanced section container, even if individual subsections might be empty
        console.log('Revealing advanced-section container');
        revealSectionWithAnimation('advanced-section');
        
        // Also reveal the insights tab content since updateInsights has already populated it
        console.log('Revealing insights tab content');
        const insightsTab = document.getElementById('insights-tab');
        if (insightsTab) {
          insightsTab.classList.remove('hidden');
        }
      }, 2000);

      // Enable analyze button
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }

      // Set summary
      currentSummary = analysisData.overall_sentiment?.explainability || '';
      if (meta.threadInfo?.title) {
        addToHistory(currentRedditUrl, meta.threadInfo.title);
        // Save full analysis to persistent cache
        saveAnalysisToCache(currentRedditUrl, meta.threadInfo.title, { 
          data: analysisData.overall_sentiment, 
          meta, 
          fullAnalysis: analysisData 
        });
      }
    }

    // Reveal section with smooth animation
    function revealSectionWithAnimation(sectionId: string) {
      console.log('revealSectionWithAnimation called for:', sectionId);
      const section = document.getElementById(sectionId);
      console.log('Section element found:', !!section);
      if (section) {
        console.log('Section classes before revealing:', section.className);
        console.log('Section innerHTML length:', section.innerHTML.length);
        
        section.classList.remove('hidden');
        section.style.opacity = '1';
        section.style.transform = 'translateY(0)';
        section.style.transition = 'all 0.6s ease-out';
        
        console.log('Section classes after revealing:', section.className);
        console.log('Section styles applied - opacity:', section.style.opacity, 'transform:', section.style.transform);
        
        // Ensure it's fully visible
        setTimeout(() => {
          section.style.opacity = '1';
          section.style.transform = 'translateY(0)';
          console.log('Section animation completed for:', sectionId);
        }, 100);
      } else {
        console.error('Section not found:', sectionId);
      }
    }

    // Display advanced themes with more detail
    function displayAdvancedThemes(themes: any[]) {
      const container = document.getElementById('themes-grid');
      if (!container || !Array.isArray(themes)) {
        console.log('Themes container not found or themes not array:', container, themes);
        return;
      }

      console.log('Displaying themes:', themes);

      const themesHtml = themes.slice(0, 5).map(theme => `
        <div class="theme-item p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border-l-4 border-blue-500 mb-3">
          <h4 class="font-semibold text-gray-800 mb-2">${SecurityUtils.escapeHtml(theme.theme || theme.name || 'Unknown Theme')}</h4>
          <p class="text-gray-600 text-sm mb-2">${SecurityUtils.escapeHtml(theme.summary || theme.description || 'No description available')}</p>
          <div class="flex items-center gap-3">
            <span class="px-2 py-1 rounded-full text-xs font-medium ${getSentimentClass(theme.sentiment)}">
              ${theme.sentiment || 'neutral'}
            </span>
            <span class="text-xs text-gray-500">
              ${Math.round((theme.share || 0) * 100)}% of comments
            </span>
            <span class="text-xs text-gray-500">
              ${Math.round((theme.confidence || 0) * 100)}% confidence
            </span>
          </div>
        </div>
      `).join('');

      container.innerHTML = themesHtml;
      console.log('Themes HTML rendered:', themesHtml);
    }

    // Display sarcasm flags
    function displaySarcasmFlags(sarcasmFlags: any[]) {
      const container = document.getElementById('enhanced-sarcasm-display');
      
      if (!container) return;

      const sarcasmHtml = sarcasmFlags.slice(0, 3).map(flag => `
        <div class="sarcasm-item p-4 bg-yellow-50 rounded-lg border-l-4 border-yellow-400 mb-3">
          <p class="text-gray-800 italic mb-2">"${SecurityUtils.escapeHtml(flag.text)}"</p>
          <div class="flex items-center gap-3 text-sm">
            <span class="text-yellow-700 font-medium">
              ${Math.round((flag.confidence || 0) * 100)}% confidence
            </span>
            <span class="text-gray-600">
              by ${SecurityUtils.escapeHtml(flag.author || 'unknown')}
            </span>
            <span class="text-gray-600">
              ${flag.upvotes || 0} upvotes
            </span>
          </div>
        </div>
      `).join('');

      if (container) container.innerHTML = sarcasmHtml;
    }

    // Display advanced analysis features
    function displayAdvancedAnalysis(analysisData: any) {
      console.log('displayAdvancedAnalysis called with data:', analysisData);
      console.log('Available keys in analysisData:', Object.keys(analysisData));
      
      // Display sentiment by depth
      console.log('Checking sentiment_by_depth:', analysisData.sentiment_by_depth);
      if (analysisData.sentiment_by_depth && analysisData.sentiment_by_depth.length > 0) {
        console.log('Displaying sentiment by depth...');
        displaySentimentByDepth(analysisData.sentiment_by_depth);
      } else {
        console.log('No sentiment_by_depth data to display');
      }

      // Display emerging topics
      console.log('Checking emerging_topics:', analysisData.emerging_topics);
      if (analysisData.emerging_topics && analysisData.emerging_topics.length > 0) {
        console.log('Displaying emerging topics...');
        displayEmergingTopics(analysisData.emerging_topics);
      } else {
        console.log('No emerging_topics data to display');
      }

      // Display risk alerts
      console.log('Checking risk_alerts:', analysisData.risk_alerts);
      if (analysisData.risk_alerts && analysisData.risk_alerts.length > 0) {
        console.log('Displaying risk alerts...');
        displayRiskAlerts(analysisData.risk_alerts);
      } else {
        console.log('No risk_alerts data to display');
      }

      // Display community language
      console.log('Checking community_lingo:', analysisData.community_lingo);
      if (analysisData.community_lingo && analysisData.community_lingo.length > 0) {
        console.log('Displaying community lingo...');
        displayCommunityLingo(analysisData.community_lingo);
      } else {
        console.log('No community_lingo data to display');
      }

      // Display demographic insights
      console.log('Checking demographic_insights:', analysisData.demographic_insights);
      if (analysisData.demographic_insights) {
        console.log('Displaying demographic insights...');
        displayDemographicInsights(analysisData.demographic_insights);
      } else {
        console.log('No demographic_insights data - showing placeholder');
        // Always show the section with placeholder content
        const container = document.getElementById('demographic-insights-display');
        if (container) {
          container.innerHTML = '<div class="text-center text-gray-500 py-4">No demographic insights available for this analysis</div>';
          console.log('Demographic insights placeholder set');
        }
      }

      // Display technical metrics
      console.log('Checking technical_metrics:', analysisData.technical_metrics);
      if (analysisData.technical_metrics) {
        console.log('Displaying technical metrics...');
        displayTechnicalMetrics(analysisData.technical_metrics);
      } else {
        console.log('No technical_metrics data - showing placeholder');
        // Always show the section with placeholder content
        const container = document.getElementById('technical-metrics-display');
        if (container) {
          container.innerHTML = '<div class="text-center text-gray-500 py-4">No technical metrics available for this analysis</div>';
          console.log('Technical metrics placeholder set');
        }
      }
    }

    // Helper function to get sentiment class
    function getSentimentClass(sentiment: string) {
      switch (sentiment) {
        case 'positive': return 'bg-green-100 text-green-800';
        case 'negative': return 'bg-red-100 text-red-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    // Add a new analysis section
    function addAnalysisSection(title: string, content: string) {
      if (!content) return;
      
      const resultsContainer = document.getElementById('analysis-results') || elements.resultsContainer;
      if (!resultsContainer) return;

      const section = document.createElement('div');
      section.className = 'analysis-section bg-white rounded-lg shadow-md p-6 mb-4';
      section.innerHTML = `
        <h3 class="text-lg font-semibold text-gray-800 mb-4 border-b pb-2">${title}</h3>
        <div class="content">${content}</div>
      `;
      
      resultsContainer.appendChild(section);
      revealSectionWithAnimation(section.id);
    }

    // Display sentiment by depth analysis
    function displaySentimentByDepth(sentimentByDepth: any[]) {
      console.log('displaySentimentByDepth called with:', sentimentByDepth);
      const container = document.getElementById('depth-analysis-display');
      console.log('depth-analysis-display container:', container);
      if (!container || !Array.isArray(sentimentByDepth) || sentimentByDepth.length === 0) {
        console.log('displaySentimentByDepth early return - container:', !!container, 'isArray:', Array.isArray(sentimentByDepth), 'length:', sentimentByDepth?.length);
        return;
      }
      
      const depthHtml = sentimentByDepth.map(depth => `
        <div class="depth-analysis mb-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
          <div class="font-medium text-gray-800 mb-2">
            Comment Thread Depth ${depth.depth} 
            <span class="text-gray-600 text-sm">(${depth.comment_count || 0} comments)</span>
          </div>
          <div class="grid grid-cols-3 gap-4 text-sm">
            <div class="text-center">
              <div class="text-green-600 font-bold text-lg">${depth.positive || 0}%</div>
              <div class="text-green-600">Positive</div>
            </div>
            <div class="text-center">
              <div class="text-gray-600 font-bold text-lg">${depth.neutral || 0}%</div>
              <div class="text-gray-600">Neutral</div>
            </div>
            <div class="text-center">
              <div class="text-red-600 font-bold text-lg">${depth.negative || 0}%</div>
              <div class="text-red-600">Negative</div>
            </div>
          </div>
          <div class="mt-2 text-xs text-gray-500">
            ${depth.insights || 'Deeper conversations tend to become more nuanced'}
          </div>
        </div>
      `).join('');

      container.innerHTML = depthHtml;
      console.log('displaySentimentByDepth completed - HTML set:', depthHtml.length > 0);
    }

    // Display emerging topics
    function displayEmergingTopics(emergingTopics: any[]) {
      console.log('displayEmergingTopics called with:', emergingTopics);
      const container = document.getElementById('emerging-topics-display');
      console.log('emerging-topics-display container:', container);
      if (!container || !Array.isArray(emergingTopics) || emergingTopics.length === 0) {
        console.log('displayEmergingTopics early return - container:', !!container, 'isArray:', Array.isArray(emergingTopics), 'length:', emergingTopics?.length);
        return;
      }
      
      const topicsHtml = emergingTopics.slice(0, 8).map(topic => `
        <div class="topic-item mb-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
          <div class="font-semibold text-blue-900 mb-2">${SecurityUtils.escapeHtml(topic.topic || topic.name || 'Unknown Topic')}</div>
          <div class="text-blue-700 text-sm mb-2">${SecurityUtils.escapeHtml(topic.description || topic.summary || 'No description available')}</div>
          <div class="flex items-center justify-between text-xs">
            <span class="px-2 py-1 rounded-full bg-blue-100 text-blue-800">
              ${Math.round((topic.frequency || topic.share || 0) * 100)}% discussion
            </span>
            <span class="text-blue-600">
              ${Math.round((topic.confidence || 0) * 100)}% confidence
            </span>
          </div>
        </div>
      `).join('');

      container.innerHTML = topicsHtml;
      console.log('displayEmergingTopics completed - HTML set:', topicsHtml.length > 0);
    }

    // Display risk alerts
    function displayRiskAlerts(riskAlerts: any[]) {
      console.log('displayRiskAlerts called with:', riskAlerts);
      const container = document.getElementById('risk-alerts-display');
      console.log('risk-alerts-display container:', container);
      if (!container || !Array.isArray(riskAlerts) || riskAlerts.length === 0) {
        console.log('displayRiskAlerts early return - container:', !!container, 'isArray:', Array.isArray(riskAlerts), 'length:', riskAlerts?.length);
        if (container) container.innerHTML = '<div class="text-center text-gray-500 py-4">No significant risks detected in this discussion</div>';
        return;
      }
      
      const alertsHtml = riskAlerts.map(alert => {
        const severityClass = getSeverityClass(alert.severity);
        return `
          <div class="alert-item mb-3 p-4 rounded-lg border-l-4 ${severityClass.bg} ${severityClass.border}">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="font-semibold ${severityClass.text} mb-1">
                  ${SecurityUtils.escapeHtml(alert.alert_type || alert.type || 'Risk Alert')}
                </div>
                <div class="text-sm ${severityClass.textSecondary} mb-2">
                  ${SecurityUtils.escapeHtml(alert.explanation || alert.description || 'No details available')}
                </div>
                <div class="flex items-center gap-3 text-xs">
                  <span class="px-2 py-1 rounded ${severityClass.badge}">
                    ${alert.severity || 'unknown'} severity
                  </span>
                  ${alert.affected_comments ? `<span class="${severityClass.textSecondary}">${alert.affected_comments} comments affected</span>` : ''}
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('');

      container.innerHTML = alertsHtml;
      console.log('displayRiskAlerts completed - HTML set:', alertsHtml.length > 0);
    }

    // Display community language and lingo
    function displayCommunityLingo(communityLingo: any[]) {
      console.log('displayCommunityLingo called with:', communityLingo);
      const container = document.getElementById('community-lingo-display');
      console.log('community-lingo-display container:', container);
      if (!container || !Array.isArray(communityLingo) || communityLingo.length === 0) {
        console.log('displayCommunityLingo early return - container:', !!container, 'isArray:', Array.isArray(communityLingo), 'length:', communityLingo?.length);
        return;
      }
      
      const lingoHtml = communityLingo.slice(0, 10).map(lingo => `
        <div class="lingo-item mb-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="font-semibold text-purple-900 mb-1">
                "${SecurityUtils.escapeHtml(lingo.term || lingo.phrase || 'Unknown Term')}"
              </div>
              <div class="text-purple-700 text-sm mb-2">
                ${SecurityUtils.escapeHtml(lingo.meaning || lingo.definition || lingo.explanation || 'No definition available')}
              </div>
              <div class="flex items-center gap-3 text-xs">
                <span class="px-2 py-1 rounded-full bg-purple-100 text-purple-800">
                  ${lingo.frequency || lingo.usage_count || 0} uses
                </span>
                ${lingo.context ? `<span class="text-purple-600">${SecurityUtils.escapeHtml(lingo.context)}</span>` : ''}
              </div>
            </div>
          </div>
        </div>
      `).join('');

      container.innerHTML = lingoHtml;
      console.log('displayCommunityLingo completed - HTML set:', lingoHtml.length > 0);
    }

    // Display demographic insights
    function displayDemographicInsights(demographicInsights: any) {
      console.log('displayDemographicInsights called with:', demographicInsights);
      const container = document.getElementById('demographic-insights-display');
      console.log('demographic-insights-display container:', container);
      if (!container || !demographicInsights) {
        console.log('displayDemographicInsights early return - container:', !!container, 'data:', !!demographicInsights);
        return;
      }

      let insightsHtml = '';

      // Age groups
      if (demographicInsights.age_groups) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-indigo-50 rounded-lg">
            <h4 class="font-semibold text-indigo-900 mb-2">Age Demographics</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
              ${Object.entries(demographicInsights.age_groups).map(([age, percentage]: [string, any]) => `
                <div class="text-center">
                  <div class="text-indigo-700 font-bold">${Math.round(percentage)}%</div>
                  <div class="text-indigo-600 text-sm">${age}</div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Geographic insights
      if (demographicInsights.geographic_indicators) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-green-50 rounded-lg">
            <h4 class="font-semibold text-green-900 mb-2">Geographic Indicators</h4>
            <div class="space-y-2">
              ${demographicInsights.geographic_indicators.slice(0, 5).map((geo: any) => `
                <div class="flex justify-between">
                  <span class="text-green-700">${SecurityUtils.escapeHtml(geo.region || geo.location)}</span>
                  <span class="text-green-600">${Math.round(geo.confidence * 100)}% confidence</span>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }

      // Interest categories
      if (demographicInsights.interest_categories) {
        insightsHtml += `
          <div class="insight-group mb-4 p-4 bg-yellow-50 rounded-lg">
            <h4 class="font-semibold text-yellow-900 mb-2">Interest Categories</h4>
            <div class="flex flex-wrap gap-2">
              ${demographicInsights.interest_categories.slice(0, 8).map((interest: any) => `
                <span class="px-3 py-1 bg-yellow-200 text-yellow-800 rounded-full text-sm">
                  ${SecurityUtils.escapeHtml(interest.category)} (${Math.round(interest.score * 100)}%)
                </span>
              `).join('')}
            </div>
          </div>
        `;
      }

      container.innerHTML = insightsHtml || '<div class="text-center text-gray-500 py-4">No demographic insights available</div>';
      console.log('displayDemographicInsights completed - HTML set:', insightsHtml ? insightsHtml.length > 0 : false);
    }

    // Display technical metrics
    function displayTechnicalMetrics(technicalMetrics: any) {
      console.log('displayTechnicalMetrics called with:', technicalMetrics);
      const container = document.getElementById('technical-metrics-display');
      console.log('technical-metrics-display container:', container);
      if (!container || !technicalMetrics) {
        console.log('displayTechnicalMetrics early return - container:', !!container, 'data:', !!technicalMetrics);
        return;
      }

      let metricsHtml = '';

      // Processing metrics
      if (technicalMetrics.processing_stats) {
        const stats = technicalMetrics.processing_stats;
        metricsHtml += `
          <div class="metric-group mb-4 p-4 bg-gray-50 rounded-lg">
            <h4 class="font-semibold text-gray-900 mb-3">Processing Statistics</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div class="text-center">
                <div class="text-gray-800 font-bold text-lg">${stats.total_processing_time || 'N/A'}</div>
                <div class="text-gray-600 text-sm">Processing Time</div>
              </div>
              <div class="text-center">
                <div class="text-gray-800 font-bold text-lg">${stats.tokens_analyzed || 'N/A'}</div>
                <div class="text-gray-600 text-sm">Tokens Analyzed</div>
              </div>
              <div class="text-center">
                <div class="text-gray-800 font-bold text-lg">${Math.round((stats.confidence_score || 0) * 100)}%</div>
                <div class="text-gray-600 text-sm">Confidence</div>
              </div>
              <div class="text-center">
                <div class="text-gray-800 font-bold text-lg">${stats.api_calls || 'N/A'}</div>
                <div class="text-gray-600 text-sm">API Calls</div>
              </div>
            </div>
          </div>
        `;
      }

      // Quality metrics
      if (technicalMetrics.quality_metrics) {
        const quality = technicalMetrics.quality_metrics;
        metricsHtml += `
          <div class="metric-group mb-4 p-4 bg-blue-50 rounded-lg">
            <h4 class="font-semibold text-blue-900 mb-3">Analysis Quality</h4>
            <div class="space-y-2">
              <div class="flex justify-between">
                <span class="text-blue-700">Sample Quality</span>
                <span class="text-blue-600 font-medium">${quality.sample_quality || 'Good'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-blue-700">Data Completeness</span>
                <span class="text-blue-600 font-medium">${Math.round((quality.completeness || 0) * 100)}%</span>
              </div>
              <div class="flex justify-between">
                <span class="text-blue-700">Analysis Depth</span>
                <span class="text-blue-600 font-medium">${quality.analysis_depth || 'Standard'}</span>
              </div>
            </div>
          </div>
        `;
      }

      container.innerHTML = metricsHtml || '<div class="text-center text-gray-500 py-4">No technical metrics available</div>';
      console.log('displayTechnicalMetrics completed - HTML set:', metricsHtml ? metricsHtml.length > 0 : false);
    }

    // Helper function for severity styling
    function getSeverityClass(severity: string) {
      switch (severity?.toLowerCase()) {
        case 'high':
          return {
            bg: 'bg-red-50',
            border: 'border-red-400',
            text: 'text-red-800',
            textSecondary: 'text-red-600',
            badge: 'bg-red-100 text-red-800'
          };
        case 'medium':
          return {
            bg: 'bg-yellow-50',
            border: 'border-yellow-400',
            text: 'text-yellow-800',
            textSecondary: 'text-yellow-600',
            badge: 'bg-yellow-100 text-yellow-800'
          };
        case 'low':
          return {
            bg: 'bg-blue-50',
            border: 'border-blue-400',
            text: 'text-blue-800',
            textSecondary: 'text-blue-600',
            badge: 'bg-blue-100 text-blue-800'
          };
        default:
          return {
            bg: 'bg-gray-50',
            border: 'border-gray-400',
            text: 'text-gray-800',
            textSecondary: 'text-gray-600',
            badge: 'bg-gray-100 text-gray-800'
          };
      }
    }

    // History management
    function loadHistory() {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]') as Array<{ url: string, title: string, date: number }>;
        if (history.length > 0 && elements.historyContainer && elements.historyList) {
          elements.historyContainer.classList.remove('hidden');
          elements.historyList.innerHTML = '';
          history.slice(0, 5).forEach((item: { url: string, title: string, date: number }) => {
            if (item && typeof item.title === 'string' && typeof item.url === 'string') {
              // Create container for the history item
              const itemContainer = document.createElement('div');
              itemContainer.className = 'flex items-center gap-1 mb-2';
              
              // Create the main history button
              const button = document.createElement('button');
              button.className = 'text-xs bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-full text-gray-700 truncate max-w-xs flex-1';
              SecurityUtils.safeSetText(button, item.title);
              button.title = SecurityUtils.escapeHtml(item.url);
              button.onclick = () => {
                // Try to load cached analysis
                const cached = getCachedAnalysis(item.url);
                console.log('Clicked history item, cached analysis:', cached);
                if (cached && cached.data && cached.meta) {
                  // Show results from cache instantly
                  showResults(cached.data, cached.meta, cached.fullAnalysis);
                } else if (cached) {
                  // Try fallback for legacy cache structure
                  if (cached.fullAnalysis && cached.fullAnalysis.overall_sentiment) {
                    showResults(
                      cached.fullAnalysis.overall_sentiment,
                      cached.meta || {},
                      cached.fullAnalysis
                    );
                  } else {
                    console.error('Cached analysis structure is invalid:', cached);
                  }
                } else if (elements.urlInput && elements.form) {
                  // Fallback: trigger fetch
                  (elements.urlInput as HTMLInputElement).value = item.url;
                  elements.form.dispatchEvent(new Event('submit'));
                }
              };
              
              // Create the remove button
              const removeButton = document.createElement('button');
              removeButton.className = 'text-xs bg-red-100 hover:bg-red-200 text-red-600 hover:text-red-800 px-2 py-1 rounded-full transition-colors';
              removeButton.innerHTML = '×';
              removeButton.title = 'Remove from history';
              removeButton.onclick = (e) => {
                e.stopPropagation();
                removeFromHistory(item.url);
              };
              
              // Add both buttons to container
              itemContainer.appendChild(button);
              itemContainer.appendChild(removeButton);
              
              if (elements.historyList && itemContainer) {
                elements.historyList.appendChild(itemContainer);
              }
            }
          });
        }
      } catch (error) {
        console.warn('Could not load history:', error);
      }
    }

    function removeFromHistory(url: string) {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]') as Array<{ url: string, title: string, date: number }>;
        const filteredHistory = history.filter(item => item.url !== url);
        localStorage.setItem('analyzedRedditThreads', JSON.stringify(filteredHistory));
        
        // Also remove from cache
        removeFromCache(url);
        
        // Reload the history display
        loadHistory();
      } catch (error) {
        console.warn('Could not remove from history:', error);
      }
    }

    function removeFromCache(url: string) {
      try {
        // Remove from in-memory cache
        analysisCache.delete(url);
        
        // Remove from localStorage cache
        let allCache: Record<string, any> = {};
        try {
          allCache = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}') as Record<string, any>;
        } catch {}
        delete allCache[url];
        localStorage.setItem(STORAGE_KEY, JSON.stringify(allCache));
        
        console.log(`[CACHE] Removed from cache: ${url}`);
      } catch (error) {
        console.warn('Could not remove from cache:', error);
      }
    }

    function addToHistory(url: string, title: string) {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]') as Array<{ url: string, title: string, date: number }>;
        const existing = history.findIndex((item: { url: string }) => item.url === url);
        if (existing !== -1) {
          history.splice(existing, 1);
        }
        history.unshift({ url, title, date: Date.now() });
        localStorage.setItem('analyzedRedditThreads', JSON.stringify(history.slice(0, 10)));
        loadHistory();
      } catch (error) {
        console.warn('Could not save to history:', error);
      }
    }

    // Share functionality (adapted for Reddit)
    async function shareResults() {
      if (!currentRedditUrl || !currentSummary) return;
      try {
        const sentimentData = analysisCache.get(currentRedditUrl)?.data.sentiment;
        const meta = analysisCache.get(currentRedditUrl)?.data.meta;
        if (sentimentData && meta) {
          const response = await secureFetch('/api/save-result', {
            method: 'POST',
            body: JSON.stringify({
              sentimentData,
              meta,
              redditUrl: currentRedditUrl,
              platform: 'reddit'
            }),
          });
          const result = await response.json();
          const shareUrl = result.shareUrl;
          const threadTitle = elements.threadTitle?.textContent || 'this Reddit thread';
          const positive = elements.positivePercentage?.textContent || '0%';
          const neutral = elements.neutralPercentage?.textContent || '0%';
          const negative = elements.negativePercentage?.textContent || '0%';
          createShareModal(shareUrl, threadTitle, positive, neutral, negative);
        }
      } catch (error: unknown) {
        console.error('Error sharing results:', error);
        const fallbackUrl = `${window.location.origin}/reddit-sentiment-analyzer?thread=${encodeURIComponent(currentRedditUrl)}`;
        navigator.clipboard?.writeText(fallbackUrl);
      }
    }

    // Share modal (adapted for Reddit)
    function createShareModal(shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string) {
      const existingModal = document.getElementById('share-modal');
      if (existingModal) existingModal.remove();

      const modal = document.createElement('div');
      modal.id = 'share-modal';
      modal.className = 'fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 p-4';
      modal.innerHTML = `
        <div class="bg-white rounded-2xl max-w-md w-full p-6 relative animate-fade-in">
          <button id="close-share-modal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          <h3 class="text-xl font-bold text-gray-800 mb-6">Share Reddit Analysis</h3>
          <div class="grid grid-cols-3 gap-4 mb-6">
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="twitter">
              <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">X (Twitter)</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="facebook">
              <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Facebook</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="linkedin">
              <div class="w-12 h-12 bg-blue-700 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">LinkedIn</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="whatsapp">
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">WhatsApp</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="reddit">
              <div class="w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Reddit</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="copy">
              <div class="w-12 h-12 bg-gray-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copy Link</span>
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      document.getElementById('close-share-modal')?.addEventListener('click', () => modal.remove());
      modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
      });

      modal.querySelectorAll('.share-option').forEach(button => {
        button.addEventListener('click', () => {
          const platform = button.getAttribute('data-platform');
          handlePlatformShare(platform ?? '', shareUrl ?? '', threadTitle ?? '', positive ?? '', neutral ?? '', negative ?? '', modal);
        });
      });
    }

    function handlePlatformShare(platform: string, shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string, modal: HTMLElement) {
      const shareMessages = {
        twitter: `🧵 Reddit sentiment analysis: "${threadTitle.length > 120 ? threadTitle.substring(0, 120) + '...' : threadTitle}"\n\n✅ ${positive} positive\n➖ ${neutral} neutral  \n❌ ${negative} negative\n\nAnalyze any Reddit thread! 🚀`,
        facebook: `I just analyzed the sentiment of this Reddit thread!\n\n"${threadTitle}"\n\n📊 Results:\n• Positive: ${positive}\n• Neutral: ${neutral}\n• Negative: ${negative}\n\nTry it yourself with any Reddit thread!`,
        linkedin: `Interesting sentiment analysis of this Reddit thread:\n\n"${threadTitle}"\n\n📈 ${positive} positive comments\n➖ ${neutral} neutral comments\n📉 ${negative} negative comments\n\nGreat tool for community managers and marketers!`,
        whatsapp: `Check out this Reddit thread sentiment analysis!\n\n"${threadTitle}"\n✅ Positive: ${positive}\n➖ Neutral: ${neutral}\n❌ ${negative}\n\nTry it yourself:`,
        reddit: `[Tool] I analyzed the sentiment of this Reddit thread - ${positive} positive, ${neutral} neutral, ${negative} negative comments`,
        copy: shareUrl
      };

      switch(platform) {
        case 'twitter':
          window.open(
            `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareMessages.twitter)}&url=${encodeURIComponent(shareUrl)}`,
            '_blank'
          );
          break;
        case 'facebook':
          window.open(
            `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareMessages.facebook)}`,
            '_blank'
          );
          break;
        case 'linkedin':
          window.open(
            `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&summary=${encodeURIComponent(shareMessages.linkedin)}`,
            '_blank'
          );
          break;
        case 'whatsapp':
          window.open(
            `https://wa.me/?text=${encodeURIComponent(shareMessages.whatsapp + ' ' + shareUrl)}`,
            '_blank'
          );
          break;
        case 'reddit':
          window.open(
            `https://www.reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareMessages.reddit)}`,
            '_blank'
          );
          break;
        case 'copy':
          navigator.clipboard?.writeText(shareUrl);
          const copyButton = modal.querySelector('[data-platform="copy"]');
          if (copyButton) {
            const originalHTML = copyButton.innerHTML;
            copyButton.innerHTML = `
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copied!</span>
            `;
            setTimeout(() => {
              if (copyButton) copyButton.innerHTML = originalHTML;
            }, 2000);
          }
          break;
      }
      
      if (platform !== 'copy') {
        setTimeout(() => modal.remove(), 500);
      }
    }

    // Main form submission handler
    if (elements.form) {
      elements.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isAnalyzing) return;
        if (!elements.urlInput) return;
        
        const redditUrl = (elements.urlInput as HTMLInputElement).value.trim();
        
        // Input validation
        if (!redditUrl) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a Reddit URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (redditUrl.length > 2048) {
          SecurityUtils.safeSetText(elements.urlError, 'URL is too long');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (!SecurityUtils.isValidRedditUrl(redditUrl)) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a valid Reddit thread URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        (elements.urlError as HTMLElement).classList.add('hidden');

        // Rate limiting
        if (!SecurityUtils.rateLimiter.isAllowed()) {
          showError('Too many requests. Please wait a minute before trying again.');
          return;
        }

        // Check if we're re-analyzing the same URL
        if (redditUrl === lastAnalyzedUrl && 
            elements.resultsContainer && 
            !elements.resultsContainer.classList.contains('hidden')) {
          return;
        }

        // Check cache
        const cached = analysisCache.get(redditUrl);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
          // Check if cached data has the correct image URL
          if (cached.meta?.threadInfo?.imageUrl?.includes('redd.it')) {
            showResults(cached.data, cached.meta, cached.fullAnalysis);
            return;
          } else {
            // Clear cache if image URL is incorrect
            console.log('Clearing cache due to incorrect image URL');
            analysisCache.delete(redditUrl);
            removeFromCache(redditUrl);
          }
        }

        isAnalyzing = true;
        lastAnalyzedUrl = redditUrl;
        currentRedditUrl = redditUrl;

        try {
          // Analyze sentiment directly (new comprehensive API handles Reddit fetching internally)
          showLoading('Fetching Reddit comments and analyzing sentiment...');
          
          // Try streaming first, fall back to regular if needed
          const useStreaming = true; // Set to false to use regular mode
          
          if (useStreaming) {
            await analyzeWithStreaming(redditUrl, 300);
            return; // Exit early for streaming
          }
          
          const sentimentResponse = await secureFetch('/api/reddit-sentiment', {
            method: 'POST',
            body: JSON.stringify({
              redditUrl: redditUrl,
              maxComments: 300
            })
          });

          const analysisData = await sentimentResponse.json();
          
          // Debug: Log the actual response data
          console.log('Full analysis data received:', analysisData);
          console.log('Top positive comments:', analysisData.top_positive_comments);
          console.log('Top negative comments:', analysisData.top_negative_comments);

          // Extract meta information from the comprehensive analysis
          const meta = {
            analyzedCount: analysisData.analyzed_count,
            totalComments: analysisData.sampling_quality?.total_comments_available || analysisData.analyzed_count,
            threadInfo: {
              title: analysisData.thread_title,
              subreddit: analysisData.subreddit,
              author: analysisData.thread_post_author?.replace('u/', ''),
              score: analysisData.thread_score,
              imageUrl: analysisData.thread_image_url || analysisData.thread_url // Use the image URL or thread URL as fallback
            }
          };

          // Cache results
          analysisCache.set(redditUrl, {
            data: { sentiment: analysisData.overall_sentiment, meta, fullAnalysis: analysisData },
            timestamp: Date.now()
          });

          showResults(analysisData.overall_sentiment, meta, analysisData);
          
          // Also display enhanced results for sidebar features
          displayEnhancedResults(analysisData);

        } catch (error: unknown) {
          console.error('Analysis error:', error);
          if (error && typeof error === 'object' && 'message' in error) {
            showError((error as { message?: string }).message || 'An unexpected error occurred');
          } else {
            showError('An unexpected error occurred');
          }
        } finally {
          isAnalyzing = false;
        }
      });
    }

    // Analyze Another button
    elements.analyzeAnother?.addEventListener('click', () => {
      if (elements.urlInput) {
        (elements.urlInput as HTMLInputElement).value = '';
      }
      hideAllStates();
      elements.urlInput?.focus();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });

    // Share Results button
    elements.shareResults?.addEventListener('click', shareResults);

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && 
          document.activeElement === elements.urlInput && elements.form) {
        e.preventDefault();
        elements.form.dispatchEvent(new Event('submit'));
      }
      
      if (e.key === 'Escape' && elements.resultsContainer && 
          !elements.resultsContainer.classList.contains('hidden')) {
        hideAllStates();
        if (elements.urlInput) {
          (elements.urlInput as HTMLInputElement).value = '';
          elements.urlInput.focus();
        }
      }
    });

    // Check URL params for shared threads
    const urlParams = new URLSearchParams(window.location.search);
    const sharedThread = urlParams.get('thread');
    if (sharedThread && SecurityUtils.isValidRedditUrl(sharedThread) && 
        elements.urlInput && elements.form) {
      (elements.urlInput as HTMLInputElement).value = sharedThread;
      elements.form.dispatchEvent(new Event('submit'));
    }

    // Load history on startup
    loadHistory();

    // Clean up intervals on page unload
    window.addEventListener('beforeunload', () => {
      clearProgress();
    });
  });
  </script>

  <!-- FAQ Schema Markup -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "How does Reddit sentiment analysis work?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our Reddit sentiment analyzer uses advanced AI to analyze the emotional tone of comments in Reddit threads. When you paste a Reddit URL, our system fetches up to 300 comments using Reddit's public API, then processes them with OpenAI's GPT-4o model to understand context, sarcasm, and nuanced emotional expressions. The AI categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category."
        }
      },
      {
        "@type": "Question",
        "name": "Is this Reddit analyzer free to use?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Yes! You can start using our Reddit sentiment analyzer for free. Free users have limited analyses per month, while premium subscribers get expanded access and advanced features."
        }
      },
      {
        "@type": "Question",
        "name": "What types of Reddit threads can I analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis."
        }
      },
      {
        "@type": "Question",
        "name": "How many Reddit comments does the tool analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our tool analyzes up to 300 comments from each Reddit thread, focusing on the most upvoted and recent comments to provide a balanced view of community sentiment. This includes both top-level comments and highly-rated replies."
        }
      },
      {
        "@type": "Question",
        "name": "Do you store Reddit data or track users?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information."
        }
      }
    ]
  }
  </script>
  
  <!-- Enhanced UI Styles -->
  <style>
    @import url('../styles/enhanced-sentiment-ui.css');
    
    /* Analysis Section Styles */
    .analysis-section {
      padding: 2rem;
      border-bottom: 1px solid #e5e7eb;
      display: block !important;
    }
    
    .analysis-section:last-child {
      border-bottom: none;
    }
    
    .analysis-section h3 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 1.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #f59e0b;
    }
    
    .analysis-content {
      background: white;
    }
    
    /* Fix image sizing */
    #thread-image-container img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 0.5rem;
    }
    
    /* Ensure proper grid layout */
    .overview-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .sentiment-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .themes-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
    
    .analytics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .quality-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .insights-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    /* Full width cards */
    .full-width {
      grid-column: 1 / -1;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .overview-grid,
      .sentiment-grid,
      .themes-grid,
      .analytics-grid,
      .quality-grid,
      .insights-grid {
        grid-template-columns: 1fr;
      }
      
      .analysis-section {
        padding: 1rem;
      }
    }
    
    /* Basic card styles for enhanced layout */
    .overview-card,
    .sentiment-card,
    .analytics-card,
    .quality-card,
    .insight-card {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid #e5e7eb;
      transition: all 0.3s ease;
    }
    
    .overview-card:hover,
    .sentiment-card:hover,
    .analytics-card:hover,
    .quality-card:hover,
    .insight-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    }
    
    .card-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #f59e0b;
    }
    
    .chart-container {
      min-height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 1rem;
    }
    
    .metric-item {
      text-align: center;
    }
    
    .metric-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1f2937;
    }
    
    .metric-label {
      font-size: 0.875rem;
      color: #6b7280;
      margin-top: 0.25rem;
    }
    
    .summary-container {
      background: #f9fafb;
      padding: 1rem;
      border-radius: 8px;
      border-left: 4px solid #f59e0b;
    }
    
    .summary-text {
      color: #374151;
      line-height: 1.6;
    }
    
    /* Enhanced layout specific styles */
    .themes-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .theme-controls {
      display: flex;
      gap: 0.5rem;
    }
    
    .theme-filters {
      display: flex;
      gap: 0.25rem;
    }
    
    .filter-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #d1d5db;
      background: white;
      color: #6b7280;
      border-radius: 0.5rem;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .filter-btn:hover {
      background: #f3f4f6;
      color: #374151;
    }
    
    .filter-btn.active {
      background: #f59e0b;
      color: white;
      border-color: #f59e0b;
    }
    
    .comments-sections {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
    
    .comment-section {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid #e5e7eb;
    }
    
    .section-title {
      display: flex;
      align-items: center;
      font-size: 1.125rem;
      font-weight: 600;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid;
    }
    
    .section-title.positive {
      color: #059669;
      border-bottom-color: #059669;
    }
    
    .section-title.neutral {
      color: #6b7280;
      border-bottom-color: #6b7280;
    }
    
    .section-title.negative {
      color: #dc2626;
      border-bottom-color: #dc2626;
    }
    
    .section-icon {
      width: 1.25rem;
      height: 1.25rem;
      margin-right: 0.5rem;
    }
    
    .comments-list {
      space-y: 0.75rem;
    }
    
    .sentiment-bars {
      space-y: 1rem;
    }
    
    .sentiment-bar-item {
      margin-bottom: 1rem;
    }
    
    .sentiment-bar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }
    
    .sentiment-label {
      font-weight: 500;
      font-size: 0.875rem;
    }
    
    .sentiment-label.positive {
      color: #059669;
    }
    
    .sentiment-label.neutral {
      color: #6b7280;
    }
    
    .sentiment-label.negative {
      color: #dc2626;
    }
    
    .sentiment-percentage {
      font-weight: 600;
      font-size: 0.875rem;
    }
    
    .sentiment-bar-track {
      width: 100%;
      height: 0.75rem;
      background: #f3f4f6;
      border-radius: 0.375rem;
      overflow: hidden;
    }
    
    .sentiment-bar-fill {
      height: 100%;
      border-radius: 0.375rem;
      transition: width 0.5s ease;
    }
    
    .sentiment-bar-fill.positive {
      background: #10b981;
    }
    
    .sentiment-bar-fill.neutral {
      background: #6b7280;
    }
    
    .sentiment-bar-fill.negative {
      background: #ef4444;
    }
    
    .quality-metrics {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 1rem;
    }
    
    .quality-metric {
      text-align: center;
    }
    
    /* Chart container and placeholder styles */
    .chart-container {
      position: relative;
      min-height: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .chart-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f9fafb;
      border-radius: 0.5rem;
      border: 2px dashed #d1d5db;
    }
    
    .chart-placeholder p {
      font-size: 0.875rem;
      color: #6b7280;
      text-align: center;
      padding: 1rem;
    }
    
    .quality-placeholder {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
    }
    
    /* Content display styles */
    .alerts-content,
    .topics-content,
    .lingo-content,
    .sarcasm-content,
    .insights-content,
    .warnings-content {
      max-height: 400px;
      overflow-y: auto;
      padding: 0.5rem;
    }
    
    .alerts-content::-webkit-scrollbar,
    .topics-content::-webkit-scrollbar,
    .lingo-content::-webkit-scrollbar,
    .sarcasm-content::-webkit-scrollbar,
    .insights-content::-webkit-scrollbar,
    .warnings-content::-webkit-scrollbar {
      width: 6px;
    }
    
    .alerts-content::-webkit-scrollbar-track,
    .topics-content::-webkit-scrollbar-track,
    .lingo-content::-webkit-scrollbar-track,
    .sarcasm-content::-webkit-scrollbar-track,
    .insights-content::-webkit-scrollbar-track,
    .warnings-content::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 3px;
    }
    
    .alerts-content::-webkit-scrollbar-thumb,
    .topics-content::-webkit-scrollbar-thumb,
    .lingo-content::-webkit-scrollbar-thumb,
    .sarcasm-content::-webkit-scrollbar-thumb,
    .insights-content::-webkit-scrollbar-thumb,
    .warnings-content::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 3px;
    }
    
    .alerts-content::-webkit-scrollbar-thumb:hover,
    .topics-content::-webkit-scrollbar-thumb:hover,
    .lingo-content::-webkit-scrollbar-thumb:hover,
    .sarcasm-content::-webkit-scrollbar-thumb:hover,
    .insights-content::-webkit-scrollbar-thumb:hover,
    .warnings-content::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }
  </style>
  
  <!-- Enhanced UI Scripts -->
  <script src="../components/enhanced-sentiment-ui.js"></script>
  <script src="../components/interactive-charts.js"></script>
  <script src="../components/theme-explorer.js"></script>
  <script src="../components/enhanced-streaming-integration.js"></script>
  
  <!-- PWA Manager -->
  <script type="module">
    import { pwaManager } from '/src/scripts/pwa.js';
    
    // Initialize PWA manager
    document.addEventListener('DOMContentLoaded', () => {
      pwaManager.init();
    });
  </script>
  
  <!-- HowTo Schema -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "HowTo",
    "name": "How to Analyze Reddit Thread Sentiment",
    "description": "Step-by-step guide to analyzing Reddit thread comments for sentiment and community opinions using AI",
    "image": "https://www.senti-meter.com/reddit-logo.png",
    "totalTime": "PT3M",
    "estimatedCost": {
      "@type": "MonetaryAmount",
      "currency": "USD",
      "value": "0"
    },
    "step": [
      {
        "@type": "HowToStep",
        "name": "Find Reddit Thread",
        "text": "Navigate to Reddit and find the thread you want to analyze",
        "image": "https://www.senti-meter.com/reddit-logo.png"
      },
      {
        "@type": "HowToStep",
        "name": "Copy Thread URL",
        "text": "Copy the Reddit thread URL from your browser's address bar",
        "image": "https://www.senti-meter.com/reddit-logo.png"
      },
      {
        "@type": "HowToStep",
        "name": "Paste URL",
        "text": "Paste the Reddit URL into the sentiment analyzer input field",
        "image": "https://www.senti-meter.com/logo.svg"
      },
      {
        "@type": "HowToStep",
        "name": "Start Analysis",
        "text": "Click the 'Analyze Comments' button to begin AI-powered sentiment analysis",
        "image": "https://www.senti-meter.com/logo.svg"
      },
      {
        "@type": "HowToStep",
        "name": "Review Results",
        "text": "Examine the sentiment breakdown, community insights, and trending topics",
        "image": "https://www.senti-meter.com/logo.svg"
      }
    ]
  }
  </script>
  
</Layout>
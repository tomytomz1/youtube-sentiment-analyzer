---
import Layout from '../layouts/Layout.astro';
import FaqAccordion from '../components/FaqAccordion.astro';

const title = 'Reddit Sentiment Analyzer - Free AI-Powered Comment Analysis';
const description = 'Analyze Reddit thread sentiment with AI. Get instant insights into community opinions, emotions, and reactions. Free, no registration required.';
const url = 'https://senti-meter.com/reddit-sentiment-analyzer';

const faqs = [
  {
    question: 'How does Reddit sentiment analysis work?',
    answer: `Our Reddit sentiment analyzer uses advanced AI to analyze the emotional tone of comments in Reddit threads. When you paste a Reddit URL, our system fetches up to 300 comments using Reddit's public API, then processes them with OpenAI's GPT-4o model to understand context, sarcasm, and nuanced emotional expressions. The AI categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category.`
  },
  {
    question: 'Is this Reddit analyzer free to use?',
    answer: `Yes! Our Reddit sentiment analyzer is completely free to use with no subscription fees, hidden charges, or usage limits. You can analyze as many Reddit threads as you need without any cost barriers.`
  },
  {
    question: 'What types of Reddit threads can I analyze?',
    answer: `You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis.`
  },
  {
    question: 'How many Reddit comments does the tool analyze?',
    answer: `Our tool analyzes up to 300 comments from each Reddit thread, focusing on the most upvoted and recent comments to provide a balanced view of community sentiment. This includes both top-level comments and highly-rated replies.`
  },
  {
    question: 'Do you store Reddit data or track users?',
    answer: `No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information.`
  }
];
---
<Layout>
  <head>
    <title>{title}</title>
    <meta name="description" content={description} />
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/logo.svg" />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/logo.svg" />
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Reddit Sentiment Analyzer" />
    <meta name="keywords" content="reddit, sentiment analysis, comment analysis, thread sentiment, ai analysis, free tool" />
    <link rel="canonical" href={url} />
  </head>

  <!-- Skip Link for Accessibility -->
  <a href="#analysis-form" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-orange-600 text-white px-4 py-2 rounded z-50">
    Skip to analyzer
  </a>

  <main class="min-h-screen bg-gradient-to-br from-orange-50 to-red-100 flex items-center justify-center px-4 py-8">
    <div class="max-w-4xl w-full mx-auto">
      <div class="bg-white rounded-2xl shadow-xl p-8 md:p-12">
        <div class="text-center mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4">
            Reddit Sentiment Analyzer
          </h1>
          <p class="text-lg text-gray-600 leading-relaxed">
            Paste any Reddit thread link below to get instant sentiment analysis of the comments.
            Discover what the Reddit community really thinks about the discussion with AI-powered insights.
          </p>
        </div>

        <!-- Recent History -->
        <div id="history-container" class="hidden mb-6">
          <h3 class="text-sm font-medium text-gray-700 mb-2">Recently Analyzed</h3>
          <div id="history-list" class="flex flex-wrap gap-2"></div>
        </div>

        <form id="analysis-form" class="space-y-6">
          <div>
            <label for="reddit-url" class="block text-sm font-medium text-gray-700 mb-2">
              Reddit Thread URL
            </label>
            <input
              type="url"
              id="reddit-url"
              name="reddit-url"
              placeholder="https://www.reddit.com/r/AskReddit/comments/..."
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors duration-200 text-gray-900 placeholder-gray-500"
              required
              aria-describedby="url-error"
            />
            <span id="url-error" class="hidden text-red-600 text-sm mt-1" role="alert"></span>
          </div>
          <button
            type="submit"
            id="analyze-button"
            class="w-full bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Analyze Reddit Sentiment
          </button>
        </form>

        <!-- Loading State -->
        <div id="loading-state" class="hidden mt-8 text-center" role="status" aria-live="polite">
          <div class="inline-flex items-center space-x-2">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-600" aria-hidden="true"></div>
            <span class="text-gray-600" id="loading-text">Fetching comments...</span>
          </div>
          <div id="progress-bar" class="mt-4 w-full bg-gray-200 rounded-full h-2 hidden">
            <div id="progress-fill" class="bg-orange-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden mt-8 p-4 bg-red-50 border border-red-200 rounded-lg" role="alert" aria-live="assertive">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-red-800 font-medium">Error:</span>
            <span class="text-red-700 ml-1" id="error-message"></span>
          </div>
          <div id="error-suggestions" class="mt-2 text-sm text-red-600"></div>
        </div>

        <!-- Thread Info Card -->
        <div id="thread-info" class="mb-8 p-6 bg-orange-50 rounded-lg border border-orange-200 hidden">
          <div class="flex items-start space-x-4">
            <div id="thread-image-container" class="w-16 h-16 md:w-24 md:h-16 bg-orange-600 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden">
              <!-- Reddit post image will be inserted here by JS -->
            </div>
            <div class="flex-1">
              <h2 id="thread-title" class="font-semibold text-lg text-gray-900 mb-1"></h2>
              <div class="flex items-center text-orange-600 text-sm mb-2">
                <span id="subreddit-name" class="font-medium"></span>
                <span class="mx-1">•</span>
                <span id="thread-author"></span>
                <span class="mx-1">•</span>
                <span id="thread-score"></span> upvotes
              </div>
              <!-- Removed thread-stats from here -->
            </div>
          </div>
        </div>

        <!-- Results -->
        <div id="results-container" class="hidden mt-8 space-y-6">
          <div id="sample-info" class="mb-4 text-sm text-orange-700 font-medium hidden"></div>
          <div id="most-upvoted-callout" class="mb-6 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded shadow hidden">
            <div class="flex items-center mb-2">
              <span class="text-xl mr-2">⬆️</span>
              <span class="font-bold text-gray-800" id="most-upvoted-label"></span>
            </div>
            <blockquote class="text-gray-700 italic" id="most-upvoted-text"></blockquote>
          </div>
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Sentiment Analysis</h3>
            <div class="space-y-3">
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-green-700">Positive</span>
                <span class="text-sm font-bold text-green-700" id="positive-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-green-500 h-3 rounded-full transition-all duration-500" id="positive-bar" style="width: 0%"></div>
              </div>
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-gray-700">Neutral</span>
                <span class="text-sm font-bold text-gray-700" id="neutral-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-gray-500 h-3 rounded-full transition-all duration-500" id="neutral-bar" style="width: 0%"></div>
              </div>
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-red-700">Negative</span>
                <span class="text-sm font-bold text-red-700" id="negative-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-red-500 h-3 rounded-full transition-all duration-500" id="negative-bar" style="width: 0%"></div>
              </div>
            </div>
            <div class="mt-6 p-4 bg-orange-50 rounded-lg">
              <h4 class="text-sm font-medium text-orange-900 mb-2">Summary</h4>
              <p class="text-orange-800" id="sentiment-summary" style="white-space: pre-line;"></p>
            </div>
          </div>
          <div class="grid md:grid-cols-3 gap-6">
            <div class="bg-green-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-green-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                </svg>
                Positive
              </h4>
              <div id="positive-comments" class="space-y-2"></div>
            </div>
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 100-12 6 6 0 000 12zm0-9a1 1 0 011 1v4a1 1 0 11-2 0V8a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Neutral
              </h4>
              <div id="neutral-comments" class="space-y-2"></div>
            </div>
            <div class="bg-red-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-red-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                </svg>
                Negative
              </h4>
              <div id="negative-comments" class="space-y-2"></div>
            </div>
          </div>
          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3 mt-6">
            <button id="analyze-another" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
              Analyze Another Thread
            </button>
            <button id="share-results" class="flex-1 bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.632 4.316C18.114 15.062 18 14.518 18 14c0-.482.114-.938.316-1.342m0 2.684a3 3 0 110-2.684M9 10a1 1 0 100-2 1 1 0 000 2zm6 12a1 1 0 100-2 1 1 0 000 2zM9 21a1 1 0 100-2 1 1 0 000 2z"></path>
              </svg>
              Share Results
            </button>
          </div>
        </div>
        <div class="mt-8 text-center">
          <p class="text-sm text-gray-500">
            Powered by AI • Fast • Accurate • Free
          </p>
        </div>
      </div>
    </div>
  </main>

  <!-- How It Works Section -->
  <section id="how-it-works" class="py-16 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">How Our Reddit Sentiment Analyzer Works</h2>
        <p class="text-lg text-gray-600">Get instant sentiment insights in just three simple steps</p>
      </div>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Step 1 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-orange-600">1</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Paste Reddit URL</h3>
          <p class="text-gray-600">Simply copy any Reddit thread link and paste it into our analyzer. We support all standard Reddit URL formats.</p>
        </div>
        <!-- Step 2 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-purple-600">2</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">AI Analysis</h3>
          <p class="text-gray-600">Our advanced AI analyzes up to 300 comments, understanding context, sarcasm, and emotional nuances. The process takes just 10-30 seconds.</p>
        </div>
        <!-- Step 3 -->
        <div class="text-center">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl font-bold text-green-600">3</span>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Get Insights</h3>
          <p class="text-gray-600">Receive detailed sentiment breakdowns, percentage analysis, sample comments, and a comprehensive summary of community opinions.</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Use Cases Section -->
  <section class="py-16 bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Who Uses Reddit Sentiment Analysis?</h2>
        <p class="text-lg text-gray-600">Discover how different professionals leverage Reddit sentiment insights</p>
      </div>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Market Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Market Researchers</h3>
          <p class="text-gray-600 mb-4">Analyze public opinion on products, brands, and trends by studying Reddit community discussions and sentiment patterns.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Track brand perception across communities</li>
            <li>• Identify emerging trends and opinions</li>
            <li>• Analyze competitor discussions</li>
            <li>• Study consumer behavior patterns</li>
          </ul>
        </div>
        
        <!-- Social Media Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Social Media Managers</h3>
          <p class="text-gray-600 mb-4">Monitor brand mentions and community discussions to understand audience sentiment and improve engagement strategies.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Monitor brand mentions</li>
            <li>• Track campaign performance</li>
            <li>• Identify community hot topics</li>
            <li>• Measure audience engagement</li>
          </ul>
        </div>
        
        <!-- Product Managers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Product Managers</h3>
          <p class="text-gray-600 mb-4">Gather user feedback and feature requests from Reddit communities to inform product development decisions.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Analyze user feedback</li>
            <li>• Identify feature requests</li>
            <li>• Monitor product discussions</li>
            <li>• Track user satisfaction</li>
          </ul>
        </div>
        
        <!-- Academic Researchers -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Academic Researchers</h3>
          <p class="text-gray-600 mb-4">Study social phenomena, public opinion, and community behavior through Reddit sentiment analysis for academic research.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Social behavior analysis</li>
            <li>• Public opinion studies</li>
            <li>• Community research</li>
            <li>• Trend identification</li>
          </ul>
        </div>
        
        <!-- Content Creators -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Content Creators</h3>
          <p class="text-gray-600 mb-4">Understand audience reactions to content ideas and topics by analyzing relevant Reddit discussions and community sentiment.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Content idea validation</li>
            <li>• Audience interest analysis</li>
            <li>• Topic research</li>
            <li>• Community engagement tracking</li>
          </ul>
        </div>
        
        <!-- Business Analysts -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4">
            <svg class="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">Business Analysts</h3>
          <p class="text-gray-600 mb-4">Analyze market sentiment, competitor discussions, and industry trends through Reddit community conversations.</p>
          <ul class="text-sm text-gray-500 space-y-1">
            <li>• Market sentiment analysis</li>
            <li>• Competitive intelligence</li>
            <li>• Industry trend monitoring</li>
            <li>• Consumer insight gathering</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section id="faq" class="bg-white py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
        <p class="text-lg text-gray-600">Everything you need to know about our Reddit sentiment analyzer</p>
      </div>
      <FaqAccordion faqs={faqs} />
    </div>
  </section>

  <!-- JSON-LD Schema -->
  <script type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Reddit Sentiment Analyzer",
      "description": "Free AI-powered tool to analyze Reddit thread comment sentiment instantly. Get percentage breakdowns, sentiment summaries, and community insights in seconds.",
      "url": "https://www.senti-meter.com/reddit-sentiment-analyzer",
      "applicationCategory": "AnalyticsApplication",
      "operatingSystem": "Any",
      "browserRequirements": "Requires JavaScript",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock"
      },
      "featureList": [
        "AI-powered sentiment analysis using GPT-4o",
        "Analyzes up to 300 Reddit comments",
        "Real-time processing with instant results",
        "Privacy-focused with no data storage",
        "Supports all Reddit URL formats",
        "Percentage breakdowns by sentiment",
        "Sample comments for each sentiment category",
        "Most upvoted comment highlighting"
      ]
    }
  </script>

  <!-- JavaScript -->
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    // Security utilities (reused from YouTube analyzer)
    const SecurityUtils = {
      escapeHtml: (text: string) => {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      },
      isValidUrl: (string: string) => {
        try {
          const url = new URL(string);
          return ['http:', 'https:'].includes(url.protocol);
        } catch (_) {
          return false;
        }
      },
      isValidRedditUrl: (url: string) => {
        if (!SecurityUtils.isValidUrl(url)) return false;
        const patterns = [
          /^https?:\/\/(www\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(old\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
          /^https?:\/\/(new\.)?reddit\.com\/r\/[^\/]+\/comments\/[a-zA-Z0-9]+/,
        ];
        return patterns.some(pattern => pattern.test(url));
      },
      safeSetText: (element: HTMLElement | null, text: string) => {
        if (element && typeof text === 'string') {
          element.textContent = text;
        }
      },
      rateLimiter: (() => {
        const requests = new Map();
        const WINDOW_MS = 60000;
        const MAX_REQUESTS = 5;
        return {
          isAllowed: () => {
            const now = Date.now();
            const windowStart = now - WINDOW_MS;
            for (const [time, count] of requests.entries()) {
              if (time < windowStart) {
                requests.delete(time);
              }
            }
            let recentRequests = 0;
            for (const [time, count] of requests.entries()) {
              if (time >= windowStart) {
                recentRequests += count;
              }
            }
            if (recentRequests >= MAX_REQUESTS) {
              return false;
            }
            const minute = Math.floor(now / WINDOW_MS) * WINDOW_MS;
            requests.set(minute, (requests.get(minute) || 0) + 1);
            return true;
          }
        };
      })()
    };

    // Cache all DOM elements
    const elements = {
      form: document.getElementById('analysis-form'),
      urlInput: document.getElementById('reddit-url'),
      urlError: document.getElementById('url-error'),
      analyzeButton: document.getElementById('analyze-button'),
      loadingState: document.getElementById('loading-state'),
      loadingText: document.getElementById('loading-text'),
      progressBar: document.getElementById('progress-bar'),
      progressFill: document.getElementById('progress-fill'),
      errorState: document.getElementById('error-state'),
      errorMessage: document.getElementById('error-message'),
      errorSuggestions: document.getElementById('error-suggestions'),
      resultsContainer: document.getElementById('results-container'),
      positivePercentage: document.getElementById('positive-percentage'),
      neutralPercentage: document.getElementById('neutral-percentage'),
      negativePercentage: document.getElementById('negative-percentage'),
      positiveBar: document.getElementById('positive-bar'),
      neutralBar: document.getElementById('neutral-bar'),
      negativeBar: document.getElementById('negative-bar'),
      sentimentSummary: document.getElementById('sentiment-summary'),
      positiveComments: document.getElementById('positive-comments'),
      neutralComments: document.getElementById('neutral-comments'),
      negativeComments: document.getElementById('negative-comments'),
      sampleInfo: document.getElementById('sample-info'),
      mostUpvotedCallout: document.getElementById('most-upvoted-callout'),
      mostUpvotedLabel: document.getElementById('most-upvoted-label'),
      mostUpvotedText: document.getElementById('most-upvoted-text'),
      threadInfo: document.getElementById('thread-info'),
      threadTitle: document.getElementById('thread-title'),
      subredditName: document.getElementById('subreddit-name'),
      threadAuthor: document.getElementById('thread-author'),
      threadScore: document.getElementById('thread-score'),
      threadStats: document.getElementById('thread-stats'),
      analyzeAnother: document.getElementById('analyze-another'),
      shareResults: document.getElementById('share-results'),
      historyContainer: document.getElementById('history-container'),
      historyList: document.getElementById('history-list')
    };

    // Application state
    let isAnalyzing = false;
    let lastAnalyzedUrl = '';
    let currentRedditUrl = '';
    let currentSummary = '';
    let progressInterval: ReturnType<typeof setInterval> | null = null;
    let progressStage = 0;

    const progressMessages = [
      'Validating URL...',
      'Connecting to Reddit...',
      'Fetching comments...',
      'Preparing for analysis...',
      'Analyzing sentiment with AI...',
      'Generating results...'
    ];

    // Results cache
    const analysisCache = new Map();
    const CACHE_DURATION = 5 * 60 * 1000;

    // Utility functions
    function hideAllStates() {
      [
        elements.loadingState,
        elements.errorState,
        elements.resultsContainer,
        elements.sampleInfo,
        elements.mostUpvotedCallout,
        elements.threadInfo,
        elements.progressBar,
        elements.urlError
      ].forEach(el => el?.classList.add('hidden'));
      clearProgress();
    }

    function showLoading(message: string) {
      hideAllStates();
      SecurityUtils.safeSetText(elements.loadingText, message);
      elements.loadingState?.classList.remove('hidden');
      elements.progressBar?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = true;
      }
      startProgress();
    }

    function showError(message: string) {
      hideAllStates();
      SecurityUtils.safeSetText(elements.errorMessage, message);
      elements.errorState?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }
      let suggestion = '';
      if (message.toLowerCase().includes('url') || message.toLowerCase().includes('format')) {
        suggestion = 'Tip: Copy the complete URL from your browser\'s address bar.';
      } else if (message.toLowerCase().includes('comments') || message.toLowerCase().includes('private')) {
        suggestion = 'Tip: Make sure the thread is public and has comments.';
      } else if (message.toLowerCase().includes('rate limit')) {
        suggestion = 'Tip: Wait a few minutes before trying again.';
      }
      SecurityUtils.safeSetText(elements.errorSuggestions, suggestion);
    }

    function startProgress() {
      progressStage = 0;
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '0%';
      }
      updateProgress();
      progressInterval = setInterval(updateProgress, 1000);
    }

    function updateProgress() {
      if (progressStage < progressMessages.length) {
        SecurityUtils.safeSetText(elements.loadingText, progressMessages[progressStage]);
        const progress = ((progressStage + 1) / progressMessages.length) * 90;
        if (elements.progressFill) {
          (elements.progressFill as HTMLElement).style.width = `${progress}%`;
        }
        progressStage++;
      }
    }

    function clearProgress() {
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      progressStage = 0;
    }

    function showResults(data: any, meta: any) {
      hideAllStates();
      if (elements.progressFill) {
        (elements.progressFill as HTMLElement).style.width = '100%';
      }

      // Display thread info
      if (meta.threadInfo) {
        displayThreadInfo(meta.threadInfo);
      }

      // Display sample size info
      if (meta.analyzedCount && meta.totalComments) {
        displaySampleInfo(meta);
      }

      // Display most upvoted comment
      if (meta.mostUpvoted) {
        displayMostUpvotedComment(meta.mostUpvoted);
      }

      // Update sentiment data
      displaySentimentData(data);
      displaySampleComments(data.sampleComments);

      elements.resultsContainer?.classList.remove('hidden');
      if (elements.analyzeButton) {
        (elements.analyzeButton as HTMLButtonElement).disabled = false;
      }

      currentSummary = data.summary || '';
      if (meta.threadInfo?.title) {
        addToHistory(currentRedditUrl, meta.threadInfo.title);
      }
    }

    function displayThreadInfo(threadInfo: any) {
      SecurityUtils.safeSetText(elements.threadTitle, threadInfo.title || '');
      SecurityUtils.safeSetText(elements.subredditName, `r/${threadInfo.subreddit}` || '');
      SecurityUtils.safeSetText(elements.threadAuthor, `u/${threadInfo.author}` || '');
      SecurityUtils.safeSetText(elements.threadScore, threadInfo.score?.toString() || '0');
      // Set post image if available
      const imageContainer = document.getElementById('thread-image-container');
      if (imageContainer) {
        imageContainer.innerHTML = '';
        console.log('Thread image URL:', threadInfo.imageUrl);
        if (threadInfo.imageUrl) {
          const img = document.createElement('img');
          img.src = threadInfo.imageUrl;
          img.alt = `Reddit post image for "${threadInfo.title || 'thread'}"`;
          img.className = 'object-cover w-full h-full rounded-lg border border-gray-200 bg-white';
          img.onerror = function() { 
            console.error('Image failed to load:', threadInfo.imageUrl);
            this.style.display = 'none'; 
            imageContainer.innerHTML = `<svg class="w-8 h-8 md:w-12 md:h-12 text-white mx-auto" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`; 
          };
          img.onload = function() {
            console.log('Image loaded successfully:', threadInfo.imageUrl);
          };
          imageContainer.appendChild(img);
        } else {
          console.log('No image URL found, using fallback');
          // fallback: Reddit logo SVG
          imageContainer.innerHTML = `<svg class="w-8 h-8 md:w-12 md:h-12 text-white mx-auto" fill="currentColor" viewBox="0 0 20 20"><circle cx="10" cy="10" r="10" fill="#FF4500"/><ellipse cx="10" cy="15" rx="6" ry="3" fill="#fff"/><circle cx="7" cy="13" r="1.5" fill="#000"/><circle cx="13" cy="13" r="1.5" fill="#000"/><ellipse cx="10" cy="15" rx="2" ry="1" fill="#000"/><circle cx="15.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/><circle cx="4.5" cy="6.5" r="1.5" fill="#fff" stroke="#000" stroke-width="0.5"/></svg>`;
        }
      }
      elements.threadInfo?.classList.remove('hidden');
    }

    function displaySampleInfo(meta: any) {
      let infoText = '';
      if (meta.totalComments <= meta.analyzedCount) {
        infoText = `Analyzed all ${meta.analyzedCount} comments for this thread.`;
      } else {
        infoText = `Analyzed a sample of ${meta.analyzedCount} out of ${meta.totalComments} comments.`;
      }
      SecurityUtils.safeSetText(elements.sampleInfo, infoText);
      elements.sampleInfo?.classList.remove('hidden');
    }

    function displayMostUpvotedComment(mostUpvoted: any) {
      if (mostUpvoted.text && typeof mostUpvoted.score === 'number') {
        SecurityUtils.safeSetText(elements.mostUpvotedLabel, `Most upvoted comment (${mostUpvoted.score} upvotes):`);
        SecurityUtils.safeSetText(elements.mostUpvotedText, `"${mostUpvoted.text}"`);
        elements.mostUpvotedCallout?.classList.remove('hidden');
      }
    }

    function displaySentimentData(data: any) {
      const positive = Math.max(0, Math.min(100, Math.round(Number(data.positive) || 0)));
      const neutral = Math.max(0, Math.min(100, Math.round(Number(data.neutral) || 0)));
      const negative = Math.max(0, Math.min(100, Math.round(Number(data.negative) || 0)));

      SecurityUtils.safeSetText(elements.positivePercentage, `${positive}%`);
      SecurityUtils.safeSetText(elements.neutralPercentage, `${neutral}%`);
      SecurityUtils.safeSetText(elements.negativePercentage, `${negative}%`);

      setTimeout(() => {
        if (elements.positiveBar) (elements.positiveBar as HTMLElement).style.width = `${positive}%`;
        if (elements.neutralBar) (elements.neutralBar as HTMLElement).style.width = `${neutral}%`;
        if (elements.negativeBar) (elements.negativeBar as HTMLElement).style.width = `${negative}%`;
      }, 100);

      SecurityUtils.safeSetText(elements.sentimentSummary, data.summary || '');
    }

    function displaySampleComments(sampleComments: any) {
      if (!sampleComments) return;
      updateCommentsContainer(elements.positiveComments, sampleComments.positive, 'text-green-700');
      updateCommentsContainer(elements.neutralComments, sampleComments.neutral, 'text-gray-700');
      updateCommentsContainer(elements.negativeComments, sampleComments.negative, 'text-red-700');
    }

    function updateCommentsContainer(container: HTMLElement | null, comments: any[], textColor: string) {
      if (!container || !Array.isArray(comments)) return;
      container.innerHTML = '';
      comments.forEach(comment => {
        if (typeof comment === 'string' && comment.trim()) {
          const commentDiv = document.createElement('div');
          commentDiv.className = `text-sm ${textColor} bg-white p-3 rounded-lg border border-gray-200`;
          SecurityUtils.safeSetText(commentDiv, `"${comment.trim()}"`);
          container.appendChild(commentDiv);
        }
      });
    }

    // Enhanced fetch with security measures
    async function secureFetch(url: string, options: RequestInit = {}) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal,
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          }
        });

        clearTimeout(timeoutId);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          throw new Error(errorData.error || `HTTP ${response.status}`);
        }

        return response;
      } catch (error: unknown) {
        clearTimeout(timeoutId);
        if (error && typeof error === 'object' && 'message' in error) {
          showError((error as { message?: string }).message || 'An unexpected error occurred');
        } else {
          showError('An unexpected error occurred');
        }
        throw error;
      }
    }

    // History management
    function loadHistory() {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]');
        if (history.length > 0 && elements.historyContainer && elements.historyList) {
          elements.historyContainer.classList.remove('hidden');
          elements.historyList.innerHTML = '';
          history.slice(0, 5).forEach((item: any) => {
            if (item && typeof item.title === 'string' && typeof item.url === 'string') {
              const button = document.createElement('button');
              button.className = 'text-xs bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-full text-gray-700 truncate max-w-xs';
              SecurityUtils.safeSetText(button, item.title);
              button.title = SecurityUtils.escapeHtml(item.url);
              button.onclick = () => {
                if (elements.urlInput && elements.form) {
                  (elements.urlInput as HTMLInputElement).value = item.url;
                  elements.form.dispatchEvent(new Event('submit'));
                }
              };
              if (elements.historyList && button) {
                elements.historyList.appendChild(button);
              }
            }
          });
        }
      } catch (error: unknown) {
        console.warn('Could not load history:', error);
      }
    }

    function addToHistory(url: string, title: string) {
      try {
        const history = JSON.parse(localStorage.getItem('analyzedRedditThreads') || '[]');
        const existing = history.findIndex((item: any) => item.url === url);
        if (existing !== -1) {
          history.splice(existing, 1);
        }
        history.unshift({ url, title, date: Date.now() });
        localStorage.setItem('analyzedRedditThreads', JSON.stringify(history.slice(0, 10)));
        loadHistory();
      } catch (error: unknown) {
        console.warn('Could not save to history:', error);
      }
    }

    // Share functionality (adapted for Reddit)
    async function shareResults() {
      if (!currentRedditUrl || !currentSummary) return;
      try {
        const sentimentData = analysisCache.get(currentRedditUrl)?.data.sentiment;
        const meta = analysisCache.get(currentRedditUrl)?.data.meta;
        if (sentimentData && meta) {
          const response = await secureFetch('/api/save-result', {
            method: 'POST',
            body: JSON.stringify({
              sentimentData,
              meta,
              redditUrl: currentRedditUrl,
              platform: 'reddit'
            }),
          });
          const result = await response.json();
          const shareUrl = result.shareUrl;
          const threadTitle = elements.threadTitle?.textContent || 'this Reddit thread';
          const positive = elements.positivePercentage?.textContent || '0%';
          const neutral = elements.neutralPercentage?.textContent || '0%';
          const negative = elements.negativePercentage?.textContent || '0%';
          createShareModal(shareUrl, threadTitle, positive, neutral, negative);
        }
      } catch (error: unknown) {
        console.error('Error sharing results:', error);
        const fallbackUrl = `${window.location.origin}/reddit-sentiment-analyzer?thread=${encodeURIComponent(currentRedditUrl)}`;
        navigator.clipboard?.writeText(fallbackUrl);
      }
    }

    // Share modal (adapted for Reddit)
    function createShareModal(shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string) {
      const existingModal = document.getElementById('share-modal');
      if (existingModal) existingModal.remove();

      const modal = document.createElement('div');
      modal.id = 'share-modal';
      modal.className = 'fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50 p-4';
      modal.innerHTML = `
        <div class="bg-white rounded-2xl max-w-md w-full p-6 relative animate-fade-in">
          <button id="close-share-modal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          <h3 class="text-xl font-bold text-gray-800 mb-6">Share Reddit Analysis</h3>
          <div class="grid grid-cols-3 gap-4 mb-6">
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="twitter">
              <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">X (Twitter)</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="facebook">
              <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Facebook</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="linkedin">
              <div class="w-12 h-12 bg-blue-700 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">LinkedIn</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="whatsapp">
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">WhatsApp</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="reddit">
              <div class="w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Reddit</span>
            </button>
            <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="copy">
              <div class="w-12 h-12 bg-gray-600 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copy Link</span>
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      document.getElementById('close-share-modal')?.addEventListener('click', () => modal.remove());
      modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
      });

      modal.querySelectorAll('.share-option').forEach(button => {
        button.addEventListener('click', () => {
          const platform = button.getAttribute('data-platform');
          handlePlatformShare(platform ?? '', shareUrl ?? '', threadTitle ?? '', positive ?? '', neutral ?? '', negative ?? '', modal);
        });
      });
    }

    function handlePlatformShare(platform: string, shareUrl: string, threadTitle: string, positive: string, neutral: string, negative: string, modal: HTMLElement) {
      const shareMessages = {
        twitter: `🧵 Reddit sentiment analysis: "${threadTitle.length > 120 ? threadTitle.substring(0, 120) + '...' : threadTitle}"\n\n✅ ${positive} positive\n➖ ${neutral} neutral  \n❌ ${negative} negative\n\nAnalyze any Reddit thread! 🚀`,
        facebook: `I just analyzed the sentiment of this Reddit thread!\n\n"${threadTitle}"\n\n📊 Results:\n• Positive: ${positive}\n• Neutral: ${neutral}\n• Negative: ${negative}\n\nTry it yourself with any Reddit thread!`,
        linkedin: `Interesting sentiment analysis of this Reddit thread:\n\n"${threadTitle}"\n\n📈 ${positive} positive comments\n➖ ${neutral} neutral comments\n📉 ${negative} negative comments\n\nGreat tool for community managers and marketers!`,
        whatsapp: `Check out this Reddit thread sentiment analysis!\n\n"${threadTitle}"\n✅ Positive: ${positive}\n➖ Neutral: ${neutral}\n❌ ${negative}\n\nTry it yourself:`,
        reddit: `[Tool] I analyzed the sentiment of this Reddit thread - ${positive} positive, ${neutral} neutral, ${negative} negative comments`,
        copy: shareUrl
      };

      switch(platform) {
        case 'twitter':
          window.open(
            `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareMessages.twitter)}&url=${encodeURIComponent(shareUrl)}`,
            '_blank'
          );
          break;
        case 'facebook':
          window.open(
            `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareMessages.facebook)}`,
            '_blank'
          );
          break;
        case 'linkedin':
          window.open(
            `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&summary=${encodeURIComponent(shareMessages.linkedin)}`,
            '_blank'
          );
          break;
        case 'whatsapp':
          window.open(
            `https://wa.me/?text=${encodeURIComponent(shareMessages.whatsapp + ' ' + shareUrl)}`,
            '_blank'
          );
          break;
        case 'reddit':
          window.open(
            `https://www.reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareMessages.reddit)}`,
            '_blank'
          );
          break;
        case 'copy':
          navigator.clipboard?.writeText(shareUrl);
          const copyButton = modal.querySelector('[data-platform="copy"]');
          if (copyButton) {
            const originalHTML = copyButton.innerHTML;
            copyButton.innerHTML = `
              <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-700">Copied!</span>
            `;
            setTimeout(() => {
              if (copyButton) copyButton.innerHTML = originalHTML;
            }, 2000);
          }
          break;
      }
      
      if (platform !== 'copy') {
        setTimeout(() => modal.remove(), 500);
      }
    }

    // Main form submission handler
    if (elements.form) {
      elements.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isAnalyzing) return;
        if (!elements.urlInput) return;
        
        const redditUrl = (elements.urlInput as HTMLInputElement).value.trim();
        
        // Input validation
        if (!redditUrl) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a Reddit URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (redditUrl.length > 2048) {
          SecurityUtils.safeSetText(elements.urlError, 'URL is too long');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        if (!SecurityUtils.isValidRedditUrl(redditUrl)) {
          SecurityUtils.safeSetText(elements.urlError, 'Please enter a valid Reddit thread URL');
          (elements.urlError as HTMLElement).classList.remove('hidden');
          return;
        }

        (elements.urlError as HTMLElement).classList.add('hidden');

        // Rate limiting
        if (!SecurityUtils.rateLimiter.isAllowed()) {
          showError('Too many requests. Please wait a minute before trying again.');
          return;
        }

        // Check if we're re-analyzing the same URL
        if (redditUrl === lastAnalyzedUrl && 
            elements.resultsContainer && 
            !elements.resultsContainer.classList.contains('hidden')) {
          return;
        }

        // Check cache
        const cached = analysisCache.get(redditUrl);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
          showResults(cached.data.sentiment, cached.data.meta);
          return;
        }

        isAnalyzing = true;
        lastAnalyzedUrl = redditUrl;
        currentRedditUrl = redditUrl;

        try {
          // Fetch comments
          showLoading('Fetching Reddit comments...');
          
          const commentsResponse = await secureFetch('/api/reddit-comments', {
            method: 'POST',
            body: JSON.stringify({ redditUrl })
          });

          const commentsData = await commentsResponse.json();
          
          console.log('Reddit API response received:', {
            hasComments: !!commentsData.comments,
            commentCount: commentsData.comments?.length,
            threadInfo: commentsData.threadInfo,
            imageUrl: commentsData.threadInfo?.imageUrl
          });

          if (!commentsData.comments || commentsData.comments.length === 0) {
            throw new Error('No comments found for this Reddit thread');
          }

          // Analyze sentiment
          showLoading('Analyzing sentiment...');
          
          const sentimentResponse = await secureFetch('/api/sentiment', {
            method: 'POST',
            body: JSON.stringify({
              comments: commentsData.comments,
              analyzedCount: commentsData.analyzedCount,
              totalComments: commentsData.totalComments,
              mostLiked: commentsData.mostUpvoted,
              videoInfo: commentsData.threadInfo,
              channelInfo: {},
              platform: 'reddit'
            })
          });

          const sentimentData = await sentimentResponse.json();

          const meta = {
            analyzedCount: commentsData.analyzedCount,
            totalComments: commentsData.totalComments,
            mostUpvoted: commentsData.mostUpvoted,
            threadInfo: commentsData.threadInfo,
          };

          // Cache results
          analysisCache.set(redditUrl, {
            data: { sentiment: sentimentData, meta },
            timestamp: Date.now()
          });

          showResults(sentimentData, meta);

        } catch (error: unknown) {
          console.error('Analysis error:', error);
          if (error && typeof error === 'object' && 'message' in error) {
            showError((error as { message?: string }).message || 'An unexpected error occurred');
          } else {
            showError('An unexpected error occurred');
          }
        } finally {
          isAnalyzing = false;
        }
      });
    }

    // Analyze Another button
    elements.analyzeAnother?.addEventListener('click', () => {
      if (elements.urlInput) {
        (elements.urlInput as HTMLInputElement).value = '';
      }
      hideAllStates();
      elements.urlInput?.focus();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });

    // Share Results button
    elements.shareResults?.addEventListener('click', shareResults);

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && 
          document.activeElement === elements.urlInput && elements.form) {
        e.preventDefault();
        elements.form.dispatchEvent(new Event('submit'));
      }
      
      if (e.key === 'Escape' && elements.resultsContainer && 
          !elements.resultsContainer.classList.contains('hidden')) {
        hideAllStates();
        if (elements.urlInput) {
          (elements.urlInput as HTMLInputElement).value = '';
          elements.urlInput.focus();
        }
      }
    });

    // Check URL params for shared threads
    const urlParams = new URLSearchParams(window.location.search);
    const sharedThread = urlParams.get('thread');
    if (sharedThread && SecurityUtils.isValidRedditUrl(sharedThread) && 
        elements.urlInput && elements.form) {
      (elements.urlInput as HTMLInputElement).value = sharedThread;
      elements.form.dispatchEvent(new Event('submit'));
    }

    // Load history on startup
    loadHistory();

    // Clean up intervals on page unload
    window.addEventListener('beforeunload', () => {
      clearProgress();
    });
  });
  </script>

  <!-- FAQ Schema Markup -->
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": "How does Reddit sentiment analysis work?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our Reddit sentiment analyzer uses advanced AI to analyze the emotional tone of comments in Reddit threads. When you paste a Reddit URL, our system fetches up to 300 comments using Reddit's public API, then processes them with OpenAI's GPT-4o model to understand context, sarcasm, and nuanced emotional expressions. The AI categorizes each comment as positive, neutral, or negative, and provides percentage breakdowns, a summary, and sample comments from each category."
        }
      },
      {
        "@type": "Question",
        "name": "Is this Reddit analyzer free to use?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Yes! Our Reddit sentiment analyzer is completely free to use with no subscription fees, hidden charges, or usage limits. You can analyze as many Reddit threads as you need without any cost barriers."
        }
      },
      {
        "@type": "Question",
        "name": "What types of Reddit threads can I analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "You can analyze any public Reddit thread from any subreddit as long as it has comments. The thread must be accessible without login and have at least a few comments for meaningful analysis."
        }
      },
      {
        "@type": "Question",
        "name": "How many Reddit comments does the tool analyze?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Our tool analyzes up to 300 comments from each Reddit thread, focusing on the most upvoted and recent comments to provide a balanced view of community sentiment. This includes both top-level comments and highly-rated replies."
        }
      },
      {
        "@type": "Question",
        "name": "Do you store Reddit data or track users?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "No, we do not store any Reddit data, URLs, or analysis results. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and do not track user activity or store any personal information."
        }
      }
    ]
  }
  </script>
</Layout>
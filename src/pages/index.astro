---
import Layout from '../layouts/Layout.astro';

// SEO Meta Tags
const title = "Free YouTube Sentiment Analyzer ‚Äì Instantly Summarize Video Comments";
const description = "Paste any YouTube video link and get an instant summary of comment sentiment: see if viewers love or hate a video in seconds. Free, no login needed.";
---
<Layout>
	<head>
		<title>{title}</title>
		<meta name="description" content={description} />
		<!-- ...meta tags unchanged... -->
	</head>

	<main class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8">
		<div class="max-w-4xl w-full mx-auto">
			<div class="bg-white rounded-2xl shadow-xl p-8 md:p-12">
				<!-- ...existing heading/form code unchanged... -->

				<!-- Results -->
				<div id="results-container" class="hidden mt-8 space-y-6">
					<!-- Sample Info (NEW) -->
					<div id="sample-info" class="mb-4 text-sm text-blue-700 font-medium hidden"></div>
					<!-- Most Liked Comment Callout (NEW) -->
					<div id="most-liked-callout" class="mb-6 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded shadow hidden">
					  <div class="flex items-center mb-2">
						<span class="text-xl mr-2">üëç</span>
						<span class="font-bold text-gray-800" id="most-liked-label"></span>
					  </div>
					  <blockquote class="text-gray-700 italic" id="most-liked-text"></blockquote>
					</div>
					<!-- Sentiment Meter (unchanged) -->
					<div class="bg-gray-50 rounded-xl p-6">
						<h3 class="text-xl font-semibold text-gray-800 mb-4">Sentiment Analysis</h3>
						<!-- ...sentiment bars and summary unchanged... -->
					</div>
					<!-- Sample Comments (unchanged) -->
					<div class="grid md:grid-cols-3 gap-6">
						<!-- ...positive, neutral, negative comments unchanged... -->
					</div>
				</div>
				<div class="mt-8 text-center">
					<p class="text-sm text-gray-500">
						Powered by AI ‚Ä¢ Fast ‚Ä¢ Accurate ‚Ä¢ Free
					</p>
				</div>
			</div>
		</div>
	</main>
	<!-- ...AdSense, FAQ, footer, cookie notice, JSON-LD schema unchanged... -->
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
	// Get DOM elements
	const form = document.getElementById('analysis-form') as HTMLFormElement;
	const urlInput = document.getElementById('youtube-url') as HTMLInputElement;
	const analyzeButton = document.getElementById('analyze-button') as HTMLButtonElement;
	const loadingState = document.getElementById('loading-state');
	const loadingText = document.getElementById('loading-text');
	const errorState = document.getElementById('error-state');
	const errorMessage = document.getElementById('error-message');
	const resultsContainer = document.getElementById('results-container');

	// Results elements
	const positivePercentage = document.getElementById('positive-percentage');
	const neutralPercentage = document.getElementById('neutral-percentage');
	const negativePercentage = document.getElementById('negative-percentage');
	const positiveBar = document.getElementById('positive-bar');
	const neutralBar = document.getElementById('neutral-bar');
	const negativeBar = document.getElementById('negative-bar');
	const sentimentSummary = document.getElementById('sentiment-summary');
	const positiveComments = document.getElementById('positive-comments');
	const neutralComments = document.getElementById('neutral-comments');
	const negativeComments = document.getElementById('negative-comments');
	// New for sample info and most liked comment
	const sampleInfo = document.getElementById('sample-info');
	const mostLikedCallout = document.getElementById('most-liked-callout');
	const mostLikedLabel = document.getElementById('most-liked-label');
	const mostLikedText = document.getElementById('most-liked-text');

	// Hide all states initially
	function hideAllStates() {
		loadingState?.classList.add('hidden');
		errorState?.classList.add('hidden');
		resultsContainer?.classList.add('hidden');
		// Hide new meta info sections as well
		sampleInfo?.classList.add('hidden');
		mostLikedCallout?.classList.add('hidden');
	}

	// Show loading state
	function showLoading(message: string) {
		hideAllStates();
		loadingText!.textContent = message;
		loadingState?.classList.remove('hidden');
		analyzeButton.disabled = true;
	}

	// Show error state
	function showError(message: string) {
		hideAllStates();
		errorMessage!.textContent = message;
		errorState?.classList.remove('hidden');
		analyzeButton.disabled = false;
	}

	// Show results
	function showResults(data: any, meta: any = {}) {
		hideAllStates();

		// Sample Size & Most Liked Comment (new)
		if (meta.analyzedCount && meta.totalComments) {
			if (meta.totalComments <= meta.analyzedCount) {
				sampleInfo!.textContent = `Analyzed all ${meta.analyzedCount} comments for this video.`;
			} else {
				sampleInfo!.textContent = `Analyzed a randomized sample of ${meta.analyzedCount} out of ${meta.totalComments} comments.`;
			}
			sampleInfo?.classList.remove('hidden');
		} else {
			sampleInfo?.classList.add('hidden');
		}
		if (meta.mostLiked && meta.mostLiked.text && typeof meta.mostLiked.likeCount === 'number') {
			mostLikedLabel!.textContent = `Most liked comment (${meta.mostLiked.likeCount} likes):`;
			mostLikedText!.textContent = `"${meta.mostLiked.text}"`;
			mostLikedCallout?.classList.remove('hidden');
		} else {
			mostLikedCallout?.classList.add('hidden');
		}

		// Sentiment Results
		positivePercentage!.textContent = `${data.positive}%`;
		neutralPercentage!.textContent = `${data.neutral}%`;
		negativePercentage!.textContent = `${data.negative}%`;

		// Animate bars
		setTimeout(() => {
			positiveBar!.style.width = `${data.positive}%`;
			neutralBar!.style.width = `${data.neutral}%`;
			negativeBar!.style.width = `${data.negative}%`;
		}, 100);

		// Update summary
		sentimentSummary!.textContent = data.summary;

		// Update sample comments
		updateComments(positiveComments!, data.sampleComments.positive, 'text-green-700');
		updateComments(neutralComments!, data.sampleComments.neutral, 'text-gray-700');
		updateComments(negativeComments!, data.sampleComments.negative, 'text-red-700');

		resultsContainer?.classList.remove('hidden');
		analyzeButton.disabled = false;
	}

	function updateComments(container: HTMLElement, comments: string[], textColor: string) {
		container.innerHTML = '';
		comments.forEach((comment: string) => {
			const commentDiv = document.createElement('div');
			commentDiv.className = `text-sm ${textColor} bg-white p-3 rounded-lg border border-gray-200`;
			commentDiv.textContent = `"${comment}"`;
			container.appendChild(commentDiv);
		});
	}

	form.addEventListener('submit', async (e) => {
		e.preventDefault();
		const youtubeUrl = urlInput.value.trim();
		if (!youtubeUrl) {
			showError('Please enter a YouTube URL');
			return;
		}

		try {
			showLoading('Fetching comments...');
			const commentsResponse = await fetch('/api/comments', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ youtubeUrl }),
			});
			if (!commentsResponse.ok) {
				const errorData = await commentsResponse.json();
				throw new Error(errorData.error || 'Failed to fetch comments');
			}
			const commentsData = await commentsResponse.json();
			if (!commentsData.comments || commentsData.comments.length === 0) {
				throw new Error('No comments found for this video');
			}

			showLoading('Analyzing sentiment...');
			const sentimentResponse = await fetch('/api/sentiment', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ comments: commentsData.comments }),
			});
			if (!sentimentResponse.ok) {
				const errorData = await sentimentResponse.json();
				throw new Error(errorData.error || 'Failed to analyze sentiment');
			}
			const sentimentData = await sentimentResponse.json();

			// Pass meta info (sample size, most liked) to showResults
			showResults(sentimentData, {
				analyzedCount: commentsData.analyzedCount,
				totalComments: commentsData.totalComments,
				mostLiked: commentsData.mostLiked
			});
		} catch (error) {
			console.error('Analysis error:', error);
			showError(error instanceof Error ? error.message : 'An unexpected error occurred');
		}
	});

	// ...cookie notice JS unchanged...
});
</script>

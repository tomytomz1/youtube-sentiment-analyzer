---
import Layout from '../layouts/Layout.astro';

const title = "Free YouTube Sentiment Analyzer ‚Äì Instantly Summarize Video Comments";
const description = "Paste any YouTube video link and get an instant summary of comment sentiment: see if viewers love or hate a video in seconds. Free, no login needed.";
const url = "https://www.senti-meter.com";
const image = "/og-image.svg";
---
<Layout>
  <head>
    <title>{title}</title>
    <meta name="description" content={description} />
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="YouTube Sentiment Analyzer" />
    <meta name="keywords" content="youtube, sentiment analysis, comment analysis, video sentiment, ai analysis, free tool" />
    <link rel="canonical" href={url} />
  </head>

  <!-- Skip Link for Accessibility -->
  <a href="#analysis-form" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded z-50">
    Skip to analyzer
  </a>

  <main class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8">
    <div class="max-w-4xl w-full mx-auto">
      <div class="bg-white rounded-2xl shadow-xl p-8 md:p-12">
        <div class="text-center mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-4">
            YouTube Sentiment Analyzer
          </h1>
          <p class="text-lg text-gray-600 leading-relaxed">
            Paste any YouTube video link below to get instant sentiment analysis of the comments.
            Discover what viewers really think about the content with AI-powered insights.
          </p>
        </div>

        <!-- Recent History -->
        <div id="history-container" class="hidden mb-6">
          <h3 class="text-sm font-medium text-gray-700 mb-2">Recently Analyzed</h3>
          <div id="history-list" class="flex flex-wrap gap-2"></div>
        </div>

        <form id="analysis-form" class="space-y-6">
          <div>
            <label for="youtube-url" class="block text-sm font-medium text-gray-700 mb-2">
              YouTube Video URL
            </label>
            <input
              type="url"
              id="youtube-url"
              name="youtube-url"
              placeholder="https://www.youtube.com/watch?v=..."
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 text-gray-900 placeholder-gray-500"
              required
              aria-describedby="url-error"
            />
            <span id="url-error" class="hidden text-red-600 text-sm mt-1" role="alert"></span>
          </div>
          <button
            type="submit"
            id="analyze-button"
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Analyze Sentiment
          </button>
        </form>

        <!-- Loading State -->
        <div id="loading-state" class="hidden mt-8 text-center" role="status" aria-live="polite">
          <div class="inline-flex items-center space-x-2">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600" aria-hidden="true"></div>
            <span class="text-gray-600" id="loading-text">Fetching comments...</span>
          </div>
          <div id="progress-bar" class="mt-4 w-full bg-gray-200 rounded-full h-2 hidden">
            <div id="progress-fill" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden mt-8 p-4 bg-red-50 border border-red-200 rounded-lg" role="alert" aria-live="assertive">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-red-800 font-medium">Error:</span>
            <span class="text-red-700 ml-1" id="error-message"></span>
          </div>
          <div id="error-suggestions" class="mt-2 text-sm text-red-600"></div>
        </div>

        <!-- Video & Channel Info Card -->
        <div id="video-info" class="mb-8 flex items-center space-x-4 hidden">
          <div class="w-40 aspect-video rounded shadow overflow-hidden">
            <img id="video-thumb" class="object-cover w-full h-full" alt="Video thumbnail" loading="lazy" />
          </div>
          <div class="flex-1">
            <h2 id="video-title" class="font-semibold text-lg"></h2>
            <a id="channel-link" href="#" class="text-blue-600 font-medium flex items-center" target="_blank" rel="noopener">
              <img id="channel-thumb" class="w-8 h-8 rounded-full mr-2 object-cover" alt="Channel thumbnail" loading="lazy">
              <span id="channel-title"></span>
            </a>
            <p id="channel-desc" class="text-gray-500 text-xs mt-1 line-clamp-2"></p>
          </div>
        </div>

        <!-- Results -->
        <div id="results-container" class="hidden mt-8 space-y-6">
          <div id="sample-info" class="mb-4 text-sm text-blue-700 font-medium hidden"></div>
          <div id="most-liked-callout" class="mb-6 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded shadow hidden">
            <div class="flex items-center mb-2">
              <span class="text-xl mr-2">üëç</span>
              <span class="font-bold text-gray-800" id="most-liked-label"></span>
            </div>
            <blockquote class="text-gray-700 italic" id="most-liked-text"></blockquote>
          </div>
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Sentiment Analysis</h3>
            <div class="space-y-3">
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-green-700">Positive</span>
                <span class="text-sm font-bold text-green-700" id="positive-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-green-500 h-3 rounded-full transition-all duration-500" id="positive-bar" style="width: 0%"></div>
              </div>
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-gray-700">Neutral</span>
                <span class="text-sm font-bold text-gray-700" id="neutral-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-gray-500 h-3 rounded-full transition-all duration-500" id="neutral-bar" style="width: 0%"></div>
              </div>
              <div class="flex items-center justify-between">
                <span class="text-sm font-medium text-red-700">Negative</span>
                <span class="text-sm font-bold text-red-700" id="negative-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-red-500 h-3 rounded-full transition-all duration-500" id="negative-bar" style="width: 0%"></div>
              </div>
            </div>
            <div class="mt-6 p-4 bg-blue-50 rounded-lg">
              <h4 class="text-sm font-medium text-blue-900 mb-2">Summary</h4>
              <p class="text-blue-800" id="sentiment-summary" style="white-space: pre-line;"></p>
            </div>
          </div>
          <div class="grid md:grid-cols-3 gap-6">
            <div class="bg-green-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-green-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                </svg>
                Positive
              </h4>
              <div id="positive-comments" class="space-y-2"></div>
            </div>
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 100-12 6 6 0 000 12zm0-9a1 1 0 011 1v4a1 1 0 11-2 0V8a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Neutral
              </h4>
              <div id="neutral-comments" class="space-y-2"></div>
            </div>
            <div class="bg-red-50 rounded-lg p-4">
              <h4 class="text-lg font-semibold text-red-800 mb-3 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                </svg>
                Negative
              </h4>
              <div id="negative-comments" class="space-y-2"></div>
            </div>
          </div>
          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3 mt-6">
            <button id="analyze-another" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
              Analyze Another Video
            </button>
            <button id="share-results" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m9.632 4.316C18.114 15.062 18 14.518 18 14c0-.482.114-.938.316-1.342m0 2.684a3 3 0 110-2.684M9 10a1 1 0 100-2 1 1 0 000 2zm6 12a1 1 0 100-2 1 1 0 000 2zM9 21a1 1 0 100-2 1 1 0 000 2z"></path>
              </svg>
              Share Results
            </button>
          </div>
        </div>
        <div class="mt-8 text-center">
          <p class="text-sm text-gray-500">
            Powered by AI ‚Ä¢ Fast ‚Ä¢ Accurate ‚Ä¢ Free
          </p>
        </div>
      </div>
    </div>
  </main>

  <!-- AdSense Ad Placement -->
  <section class="py-8 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <div class="bg-white border-2 border-dashed border-gray-300 rounded-lg p-8">
          <div class="text-gray-500">
            <h3 class="text-lg font-medium mb-2">Advertisement</h3>
            <p class="text-sm">AdSense ad will be displayed here</p>
            <div class="mt-4 w-full h-32 bg-gray-100 rounded flex items-center justify-center">
              <span class="text-gray-400">728x90 Ad Unit</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- FAQ Section -->
  <section id="faq" class="bg-gray-50 py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h2>
        <p class="text-lg text-gray-600">Everything you need to know about our YouTube sentiment analyzer</p>
      </div>
      <div class="space-y-8">
        <!-- FAQ Item 1 -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">How does this YouTube Sentiment Analyzer work?</h3>
          <p class="text-gray-700 mb-4">
            Our YouTube sentiment analyzer uses advanced AI technology to analyze the emotional tone of video comments. When you paste a YouTube URL, our system first extracts the video ID and fetches up to 100 of the most relevant comments using the YouTube Data API v3. These comments are then processed through OpenAI's GPT-4o model, which has been specifically trained to understand context, sarcasm, and nuanced emotional expressions.
          </p>
          <p class="text-gray-700">
            The AI analyzes each comment and categorizes it as positive, neutral, or negative sentiment. It then provides you with percentage breakdowns, a summary of the overall sentiment, and sample comments from each category. This process typically takes just a few seconds and gives you instant insights into how viewers are responding to the video content.
          </p>
        </div>
        <!-- FAQ Item 2 -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">Is this tool free to use?</h3>
          <p class="text-gray-700 mb-4">
            Yes, our YouTube sentiment analyzer is completely free to use! We believe in providing accessible tools for content creators, marketers, and researchers who want to understand audience sentiment without any cost barriers. You can analyze as many YouTube videos as you need without any subscription fees, hidden charges, or usage limits.
          </p>
          <p class="text-gray-700">
            Our goal is to democratize sentiment analysis and make it available to everyone, from individual YouTubers looking to understand their audience better to businesses conducting market research. Simply paste any YouTube URL and get instant, professional-grade sentiment analysis results at no cost.
          </p>
        </div>
        <!-- FAQ Item 3 -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">Do you store any of my data?</h3>
          <p class="text-gray-700 mb-4">
            No, we do not store any of your data or the YouTube comments we analyze. Our sentiment analyzer processes everything in real-time and immediately discards the data once the analysis is complete. We prioritize your privacy and data security - the YouTube URLs you submit, the comments we fetch, and the sentiment analysis results are never saved to our servers or databases.
          </p>
          <p class="text-gray-700">
            Each analysis is completely independent and temporary. When you submit a YouTube URL, we fetch the comments, analyze the sentiment, return the results to you, and then all data is automatically purged from our system. This ensures complete privacy and means that your analysis activity cannot be tracked or stored by us.
          </p>
        </div>
        <!-- FAQ Item 4 -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">What types of YouTube videos can I analyze?</h3>
          <p class="text-gray-700 mb-4">
            You can analyze any public YouTube video that has comments enabled. Our sentiment analyzer works with all types of content including vlogs, tutorials, music videos, product reviews, educational content, and entertainment videos. The tool supports various YouTube URL formats including standard watch URLs (youtube.com/watch?v=), shortened URLs (youtu.be/), and embedded URLs.
          </p>
          <p class="text-gray-700">
            For best results, we recommend analyzing videos that have at least 10-20 comments, as this provides a more representative sample for sentiment analysis. Videos with thousands of comments will give you the most comprehensive insights into audience sentiment and engagement patterns.
          </p>
        </div>
        <!-- FAQ Item 5 -->
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-xl font-semibold text-gray-900 mb-4">How accurate is the sentiment analysis?</h3>
          <p class="text-gray-700 mb-4">
            Our sentiment analyzer uses OpenAI's GPT-4o model, which is one of the most advanced AI language models available. This ensures high accuracy in understanding context, detecting sarcasm, and interpreting complex emotional expressions that simpler sentiment analysis tools might miss. The AI has been trained on vast amounts of text data and can understand nuanced language patterns.
          </p>
          <p class="text-gray-700">
            While no automated sentiment analysis is 100% perfect, our tool typically achieves accuracy rates comparable to human analysts. The AI considers factors like emoji usage, capitalization, punctuation patterns, and contextual clues to make informed sentiment classifications. For the most reliable results, we analyze multiple comments and provide sample comments so you can verify the classifications yourself.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="bg-gray-900 text-white py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Brand Section -->
        <div class="space-y-4">
          <h3 class="text-xl font-bold">YouTube Sentiment Analyzer</h3>
          <p class="text-gray-300 text-sm">
            Free AI-powered tool for analyzing YouTube video comment sentiment. Get instant insights into audience reactions and engagement.
          </p>
          <div class="flex space-x-4">
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <!-- You can add social SVG icons here if you want -->
            </a>
          </div>
        </div>
        <div></div>
        <div></div>
      </div>
      <div class="border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center">
        <p class="text-gray-400 text-sm">
          ¬© 2025 YouTube Sentiment Analyzer. All rights reserved.
        </p>
        <div class="flex space-x-6 mt-4 md:mt-0">
          <a href="/privacy" class="text-gray-400 hover:text-white text-sm transition-colors">Privacy Policy</a>
          <span class="text-gray-600">‚Ä¢</span>
          <a href="mailto:tomasbeltran2014@gmail.com" class="text-gray-400 hover:text-white text-sm transition-colors">Contact</a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Cookie Notice -->
  <div id="cookie-notice" class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 z-50 transform translate-y-full transition-transform duration-300">
    <div class="max-w-6xl mx-auto flex flex-col sm:flex-row items-center justify-between">
      <div class="text-sm mb-4 sm:mb-0">
        <p>We use cookies to enhance your experience. By continuing to use this site, you agree to our use of cookies.
        <a href="/privacy" class="text-blue-400 hover:text-blue-300 underline">Learn more</a></p>
      </div>
      <div class="flex space-x-3">
        <button id="accept-cookies" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm transition-colors">
          Accept
        </button>
        <button id="decline-cookies" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded text-sm transition-colors">
          Decline
        </button>
      </div>
    </div>
  </div>

  <!-- Enhanced JSON-LD Schema -->
<script type="application/ld+json">
  [
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "YouTube Sentiment Analyzer",
      "url": "https://www.senti-meter.com",
      "description": "Paste any YouTube video link and get an instant summary of comment sentiment: see if viewers love or hate a video in seconds. Free, no login needed.",
      "potentialAction": {
        "@type": "SearchAction",
        "target": "https://www.senti-meter.com/?video={search_term_string}",
        "query-input": "required name=search_term_string"
      }
    },
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "YouTube Sentiment Analyzer",
      "alternateName": "Senti-Meter",
      "url": "https://www.senti-meter.com",
      "description": "Free AI-powered tool to analyze YouTube video comment sentiment instantly. Get percentage breakdowns, sentiment summaries, and sample comments in seconds.",
      "applicationCategory": "AnalyticsApplication",
      "operatingSystem": "Any",
      "browserRequirements": "Requires JavaScript",
      "screenshot": "https://www.senti-meter.com/og-image.svg",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock",
        "description": "Free to use with no registration required"
      },
      "featureList": [
        "AI-powered sentiment analysis using GPT-4o",
        "Analyzes up to 300 YouTube comments",
        "Real-time processing with instant results",
        "Privacy-focused with no data storage",
        "Supports all YouTube URL formats",
        "Percentage breakdowns by sentiment",
        "Sample comments for each sentiment category",
        "Most liked comment highlighting"
      ],
      "creator": {
        "@type": "Organization",
        "name": "Senti-Meter"
      },
      "datePublished": "2025-01-07",
      "inLanguage": "en-US",
      "isAccessibleForFree": true,
      "keywords": "YouTube sentiment analysis, comment analysis, video sentiment, AI analysis, free tool, YouTube analytics",
      "audience": {
        "@type": "Audience",
        "audienceType": "Content creators, marketers, researchers, YouTube users"
      }
    },
    {
      "@context": "https://schema.org",
      "@type": "SoftwareApplication",
      "name": "YouTube Sentiment Analyzer",
      "operatingSystem": "Web Browser",
      "applicationCategory": "BusinessApplication",
      "offers": {
        "@type": "Offer",
        "price": "0"
      },
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "5",
        "ratingCount": "1",
        "bestRating": "5",
        "worstRating": "1"
      }
    }
  ]
  </script>

  <script>
  document.addEventListener('DOMContentLoaded', () => {
    // Cache all DOM elements
    const elements = {
      form: document.getElementById('analysis-form'),
      urlInput: document.getElementById('youtube-url'),
      urlError: document.getElementById('url-error'),
      analyzeButton: document.getElementById('analyze-button'),
      loadingState: document.getElementById('loading-state'),
      loadingText: document.getElementById('loading-text'),
      progressBar: document.getElementById('progress-bar'),
      progressFill: document.getElementById('progress-fill'),
      errorState: document.getElementById('error-state'),
      errorMessage: document.getElementById('error-message'),
      errorSuggestions: document.getElementById('error-suggestions'),
      resultsContainer: document.getElementById('results-container'),
      positivePercentage: document.getElementById('positive-percentage'),
      neutralPercentage: document.getElementById('neutral-percentage'),
      negativePercentage: document.getElementById('negative-percentage'),
      positiveBar: document.getElementById('positive-bar'),
      neutralBar: document.getElementById('neutral-bar'),
      negativeBar: document.getElementById('negative-bar'),
      sentimentSummary: document.getElementById('sentiment-summary'),
      positiveComments: document.getElementById('positive-comments'),
      neutralComments: document.getElementById('neutral-comments'),
      negativeComments: document.getElementById('negative-comments'),
      sampleInfo: document.getElementById('sample-info'),
      mostLikedCallout: document.getElementById('most-liked-callout'),
      mostLikedLabel: document.getElementById('most-liked-label'),
      mostLikedText: document.getElementById('most-liked-text'),
      videoInfoCard: document.getElementById('video-info'),
      videoThumb: document.getElementById('video-thumb'),
      videoTitle: document.getElementById('video-title'),
      channelLink: document.getElementById('channel-link'),
      channelThumb: document.getElementById('channel-thumb'),
      channelTitle: document.getElementById('channel-title'),
      channelDesc: document.getElementById('channel-desc'),
      analyzeAnother: document.getElementById('analyze-another'),
      shareResults: document.getElementById('share-results'),
      historyContainer: document.getElementById('history-container'),
      historyList: document.getElementById('history-list'),
      cookieNotice: document.getElementById('cookie-notice'),
      acceptCookies: document.getElementById('accept-cookies'),
      declineCookies: document.getElementById('decline-cookies')
    };

    // State management
    let isAnalyzing = false;
    let lastAnalyzedUrl = '';
    let currentVideoUrl = '';
    let currentSummary = '';
    
    // Results cache
    const analysisCache = new Map();
    const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

    // Progress messages
    const progressMessages = [
      'Connecting to YouTube...',
      'Fetching comments...',
      'Preparing for analysis...',
      'Analyzing sentiment with AI...',
      'Generating results...'
    ];
    let progressStage = 0;
    let progressInterval = null;

    // Error messages
    const errorMessages = {
      // Exact matches from backend
      'Invalid YouTube URL provided': 'Please enter a valid YouTube URL.',
      'Could not extract video ID from URL. Please check the format and try again.': 'Invalid YouTube URL format. Please check the URL.',
      'YouTube API key not configured on server.': 'Server configuration error. Please contact support.',
      'Could not fetch video info.': 'Unable to fetch video information. The video might be private.',
      'No comments found for this video (comments may be disabled or unavailable).': 'No comments available. They may be disabled for this video.',
      'YouTube API quota exceeded or invalid API key. Please try again later.': 'API limit reached. Please try again in a few minutes.',
      'Video not found or comments are disabled.': 'Video not found or comments are disabled.',
      // Sentiment API errors
      'Invalid comments array provided': 'Invalid data received. Please try again.',
      'OpenAI API key not configured': 'AI service not configured. Please contact support.',
      'Internal server error': 'An unexpected error occurred. Please try again.',
      // Frontend-generated errors
      'Failed to fetch comments': 'Unable to connect to the server. Please check your connection.',
      'Failed to analyze sentiment': 'Unable to analyze comments. Please try again.',
      'No comments found for this video': 'This video has no comments to analyze.'
    };

    // Utility functions
    function extractVideoId(url) {
      const patterns = [
        /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,
        /youtube\.com\/watch\?.*&v=([^&\n?#]+)/,
        /youtube\.com\/shorts\/([^&\n?#]+)/
      ];
      
      for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match && match[1].length === 11) return match[1];
      }
      
      return null;
    }

    function isValidYouTubeUrl(url) {
      try {
        const videoId = extractVideoId(url);
        return videoId !== null;
      } catch {
        return false;
      }
    }

    function isValidImageUrl(url) {
      try {
        const parsed = new URL(url);
        return ['https:', 'http:'].includes(parsed.protocol) && 
               (parsed.hostname.endsWith('.youtube.com') || 
                parsed.hostname.endsWith('.ytimg.com') ||
                parsed.hostname.endsWith('.ggpht.com') ||
                parsed.hostname.endsWith('.googleusercontent.com'));
      } catch {
        return false;
      }
    }

    function hideAllStates() {
      elements.loadingState?.classList.add('hidden');
      elements.errorState?.classList.add('hidden');
      elements.resultsContainer?.classList.add('hidden');
      elements.sampleInfo?.classList.add('hidden');
      elements.mostLikedCallout?.classList.add('hidden');
      elements.videoInfoCard?.classList.add('hidden');
      elements.progressBar?.classList.add('hidden');
      elements.urlError?.classList.add('hidden');
      clearProgress();
    }

    function showLoading(message) {
      hideAllStates();
      elements.loadingText.textContent = message;
      elements.loadingState?.classList.remove('hidden');
      elements.progressBar?.classList.remove('hidden');
      elements.analyzeButton.disabled = true;
      startProgress();
    }

    function showError(message) {
      hideAllStates();
      
      // Try exact match first
      let displayMessage = errorMessages[message] || message;
      
      // If the message contains line breaks or is very long, it might be a detailed error
      // In that case, try to find a partial match
      if (displayMessage === message && message.length > 50) {
        for (const [key, value] of Object.entries(errorMessages)) {
          if (message.includes(key.substring(0, 20))) {
            displayMessage = value;
            break;
          }
        }
      }
      
      elements.errorMessage.textContent = displayMessage;
      elements.errorState?.classList.remove('hidden');
      elements.analyzeButton.disabled = false;
      
      // Add contextual suggestions
      elements.errorSuggestions.textContent = '';
      
      if (message.toLowerCase().includes('url') || message.toLowerCase().includes('video id')) {
        elements.errorSuggestions.textContent = 'Tip: Copy the complete URL from your browser\'s address bar.';
      } else if (message.toLowerCase().includes('comments') || message.toLowerCase().includes('disabled')) {
        elements.errorSuggestions.textContent = 'Tip: Make sure the video is public and allows comments.';
      } else if (message.toLowerCase().includes('quota') || message.toLowerCase().includes('limit')) {
        elements.errorSuggestions.textContent = 'Tip: Wait 5-10 minutes before trying again.';
      } else if (message.toLowerCase().includes('api key') || message.toLowerCase().includes('configured')) {
        elements.errorSuggestions.textContent = 'This is a server configuration issue. Please contact support.';
      } else if (message.toLowerCase().includes('network') || message.toLowerCase().includes('fetch')) {
        elements.errorSuggestions.textContent = 'Tip: Check your internet connection and try again.';
      }
    }

    function startProgress() {
      progressStage = 0;
      elements.progressFill.style.width = '0%';
      updateProgress();
      progressInterval = setInterval(updateProgress, 800);
    }

    function updateProgress() {
      if (progressStage < progressMessages.length) {
        elements.loadingText.textContent = progressMessages[progressStage];
        const progress = ((progressStage + 1) / progressMessages.length) * 90;
        elements.progressFill.style.width = `${progress}%`;
        progressStage++;
      }
    }

    function clearProgress() {
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      progressStage = 0;
    }

    function showResults(data, meta = {}) {
      hideAllStates();
      elements.progressFill.style.width = '100%';

      // VIDEO & CHANNEL INFO CARD
      if (meta.videoInfo && meta.channelInfo) {
        const videoId = extractVideoId(currentVideoUrl);
        if (videoId) {
          const thumbUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
          elements.videoThumb.src = thumbUrl;
          elements.videoThumb.alt = meta.videoInfo.title || 'Video thumbnail';
        }
        
        elements.videoTitle.textContent = meta.videoInfo.title || '';
        
        if (meta.channelInfo.channelCustomUrl) {
          elements.channelLink.href = `https://www.youtube.com/${meta.channelInfo.channelCustomUrl}`;
        } else if (meta.videoInfo.channelId) {
          elements.channelLink.href = `https://www.youtube.com/channel/${meta.videoInfo.channelId}`;
        } else {
          elements.channelLink.href = "#";
        }
        
        let thumbUrl = meta.channelInfo.channelThumbnails?.high?.url
          || meta.channelInfo.channelThumbnails?.default?.url
          || meta.channelInfo.channelThumbnails?.medium?.url
          || '';
          
        if (thumbUrl && isValidImageUrl(thumbUrl)) {
          elements.channelThumb.src = thumbUrl;
        } else {
          elements.channelThumb.style.display = 'none';
        }
        
        elements.channelTitle.textContent = meta.channelInfo.channelTitle || '';
        elements.channelDesc.textContent = meta.channelInfo.channelDescription || '';
        elements.videoInfoCard.classList.remove('hidden');
      }

      // Sample Size & Most Liked Comment
      if (meta.analyzedCount && meta.totalComments) {
        if (meta.totalComments <= meta.analyzedCount) {
          elements.sampleInfo.textContent = `Analyzed all ${meta.analyzedCount} comments for this video.`;
        } else {
          elements.sampleInfo.textContent = `Analyzed a randomized sample of ${meta.analyzedCount} out of ${meta.totalComments} comments.`;
        }
        elements.sampleInfo.classList.remove('hidden');
      }
      
      if (meta.mostLiked && meta.mostLiked.text && typeof meta.mostLiked.likeCount === 'number') {
        elements.mostLikedLabel.textContent = `Most liked comment (${meta.mostLiked.likeCount} likes):`;
        elements.mostLikedText.textContent = `"${meta.mostLiked.text}"`;
        elements.mostLikedCallout.classList.remove('hidden');
      }

      // Update sentiment percentages and bars
      elements.positivePercentage.textContent = `${data.positive}%`;
      elements.neutralPercentage.textContent = `${data.neutral}%`;
      elements.negativePercentage.textContent = `${data.negative}%`;
      
      setTimeout(() => {
        elements.positiveBar.style.width = `${data.positive}%`;
        elements.neutralBar.style.width = `${data.neutral}%`;
        elements.negativeBar.style.width = `${data.negative}%`;
      }, 100);
      
      elements.sentimentSummary.textContent = data.summary;
      currentSummary = data.summary; // Store for sharing
      
      updateComments(elements.positiveComments, data.sampleComments.positive, 'text-green-700');
      updateComments(elements.neutralComments, data.sampleComments.neutral, 'text-gray-700');
      updateComments(elements.negativeComments, data.sampleComments.negative, 'text-red-700');

      elements.resultsContainer.classList.remove('hidden');
      elements.analyzeButton.disabled = false;
      
      // Add to history
      if (meta.videoInfo && meta.videoInfo.title) {
        addToHistory(currentVideoUrl, meta.videoInfo.title);
      }
    }

    function updateComments(container, comments, textColor) {
      container.innerHTML = '';
      comments.forEach(comment => {
        const commentDiv = document.createElement('div');
        commentDiv.className = `text-sm ${textColor} bg-white p-3 rounded-lg border border-gray-200`;
        commentDiv.textContent = `"${comment}"`;
        container.appendChild(commentDiv);
      });
    }

    // History management
    function loadHistory() {
      const history = JSON.parse(localStorage.getItem('analyzedVideos') || '[]');
      if (history.length > 0) {
        elements.historyContainer.classList.remove('hidden');
        elements.historyList.innerHTML = '';
        
        history.slice(0, 5).forEach(item => {
          const button = document.createElement('button');
          button.className = 'text-xs bg-gray-100 hover:bg-gray-200 px-3 py-1 rounded-full text-gray-700 truncate max-w-xs';
          button.textContent = item.title;
          button.title = item.url;
          button.onclick = () => {
            elements.urlInput.value = item.url;
            elements.form.dispatchEvent(new Event('submit'));
          };
          elements.historyList.appendChild(button);
        });
      }
    }

    function addToHistory(url, title) {
      const history = JSON.parse(localStorage.getItem('analyzedVideos') || '[]');
      const existing = history.findIndex(item => item.url === url);
      
      if (existing !== -1) {
        history.splice(existing, 1);
      }
      
      history.unshift({ url, title, date: Date.now() });
      localStorage.setItem('analyzedVideos', JSON.stringify(history.slice(0, 10)));
      loadHistory();
    }

    // Share functionality
    // Replace the existing shareResults function and add these new functions

// Enhanced share functionality with social media options
function createShareModal() {
  // Remove any existing modal
  const existingModal = document.getElementById('share-modal');
  if (existingModal) existingModal.remove();

  const modal = document.createElement('div');
  modal.id = 'share-modal';
  modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
  modal.innerHTML = `
    <div class="bg-white rounded-2xl max-w-md w-full p-6 relative animate-fade-in">
      <button id="close-share-modal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <h3 class="text-xl font-bold text-gray-800 mb-6">Share Results</h3>
      
      <div class="grid grid-cols-3 gap-4 mb-6">
        <!-- Twitter/X -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="twitter">
          <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
            </svg>
          </div>
          <span class="text-sm text-gray-700">X (Twitter)</span>
        </button>
        
        <!-- Facebook -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="facebook">
          <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
            </svg>
          </div>
          <span class="text-sm text-gray-700">Facebook</span>
        </button>
        
        <!-- LinkedIn -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="linkedin">
          <div class="w-12 h-12 bg-blue-700 rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </div>
          <span class="text-sm text-gray-700">LinkedIn</span>
        </button>
        
        <!-- WhatsApp -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="whatsapp">
          <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
            </svg>
          </div>
          <span class="text-sm text-gray-700">WhatsApp</span>
        </button>
        
        <!-- Reddit -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="reddit">
          <div class="w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
            </svg>
          </div>
          <span class="text-sm text-gray-700">Reddit</span>
        </button>
        
        <!-- Copy Link -->
        <button class="share-option flex flex-col items-center p-4 rounded-xl hover:bg-gray-50 transition-colors" data-platform="copy">
          <div class="w-12 h-12 bg-gray-600 rounded-full flex items-center justify-center mb-2">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
            </svg>
          </div>
          <span class="text-sm text-gray-700">Copy Link</span>
        </button>
      </div>
      
      <div class="border-t pt-4">
        <p class="text-xs text-gray-500 text-center">Share your YouTube sentiment analysis results</p>
      </div>
    </div>
  `;

  document.body.appendChild(modal);
  
  // Add styles for animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }
    .animate-fade-in {
      animation: fadeIn 0.2s ease-out;
    }
  `;
  document.head.appendChild(style);

  // Event listeners
  document.getElementById('close-share-modal').addEventListener('click', () => modal.remove());
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.remove();
  });

  // Share button handlers
  modal.querySelectorAll('.share-option').forEach(button => {
    button.addEventListener('click', () => handleShare(button.dataset.platform));
  });
}

function handleShare(platform) {
  const videoId = extractVideoId(currentVideoUrl);
  const videoTitle = elements.videoTitle?.textContent || 'this video';
  
  // Get sentiment percentages
  const positive = elements.positivePercentage?.textContent || '0%';
  const neutral = elements.neutralPercentage?.textContent || '0%';
  const negative = elements.negativePercentage?.textContent || '0%';
  
  // Create share content
  const shareUrl = `${window.location.origin}?video=${encodeURIComponent(currentVideoUrl)}`;
  const hashtags = 'YouTubeSentiment,SentimentAnalysis,YouTube';
  
  // Create engaging share text
  let sentiment = 'mixed';
  if (parseInt(positive) > 60) sentiment = 'positive';
  else if (parseInt(negative) > 40) sentiment = 'negative';
  
  const shareText = `üé• Just analyzed "${videoTitle}" - ${positive} positive, ${neutral} neutral, ${negative} negative comments! ${sentiment === 'positive' ? '‚ú®' : sentiment === 'negative' ? 'üò¨' : 'ü§î'}\n\nCheck out the full analysis:`;

  const shareMessages = {
    twitter: `üé• "${videoTitle}" sentiment analysis:\n‚úÖ ${positive} positive\n‚ûñ ${neutral} neutral\n‚ùå ${negative} negative\n\nAnalyze any YouTube video instantly! üöÄ`,
    facebook: `I just analyzed the sentiment of "${videoTitle}" on YouTube!\n\nüìä Results:\n‚Ä¢ Positive: ${positive}\n‚Ä¢ Neutral: ${neutral}\n‚Ä¢ Negative: ${negative}\n\nTry it yourself with any YouTube video!`,
    linkedin: `Interesting sentiment analysis of "${videoTitle}":\n\nüìà ${positive} positive comments\n‚ûñ ${neutral} neutral comments\nüìâ ${negative} negative comments\n\nGreat tool for content creators and marketers to understand audience sentiment!`,
    whatsapp: `Check out this YouTube sentiment analysis!\n\n"${videoTitle}"\n‚úÖ Positive: ${positive}\n‚ûñ Neutral: ${neutral}\n‚ùå Negative: ${negative}\n\nTry it yourself:`,
    reddit: `[Tool] I analyzed the sentiment of "${videoTitle}" - ${positive} positive, ${neutral} neutral, ${negative} negative comments`
  };

  switch(platform) {
    case 'twitter':
      window.open(
        `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareMessages.twitter)}&url=${encodeURIComponent(shareUrl)}&hashtags=${hashtags}`,
        '_blank',
        'width=550,height=420'
      );
      break;
      
    case 'facebook':
      window.open(
        `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareMessages.facebook)}`,
        '_blank',
        'width=550,height=420'
      );
      break;
      
    case 'linkedin':
      window.open(
        `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&summary=${encodeURIComponent(shareMessages.linkedin)}`,
        '_blank',
        'width=550,height=520'
      );
      break;
      
    case 'whatsapp':
      window.open(
        `https://wa.me/?text=${encodeURIComponent(shareMessages.whatsapp + ' ' + shareUrl)}`,
        '_blank'
      );
      break;
      
    case 'reddit':
      window.open(
        `https://www.reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareMessages.reddit)}`,
        '_blank',
        'width=850,height=550'
      );
      break;
      
    case 'copy':
      copyToClipboard(shareUrl);
      // Update button to show success
      const copyButton = document.querySelector('[data-platform="copy"]');
      const originalHTML = copyButton.innerHTML;
      copyButton.innerHTML = `
        <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mb-2">
          <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <span class="text-sm text-gray-700">Copied!</span>
      `;
      setTimeout(() => {
        copyButton.innerHTML = originalHTML;
      }, 2000);
      break;
      
    default:
      // Fallback to native share
      if (navigator.share) {
        navigator.share({
          title: `Sentiment Analysis: ${videoTitle}`,
          text: shareText,
          url: shareUrl
        });
      }
  }
  
  // Close modal after sharing (except for copy)
  if (platform !== 'copy') {
    setTimeout(() => {
      document.getElementById('share-modal')?.remove();
    }, 500);
  }
}

// Replace the existing shareResults function with this:
function shareResults() {
  createShareModal();
}

    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        const originalText = elements.shareResults.innerHTML;
        elements.shareResults.innerHTML = '<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>Copied!';
        setTimeout(() => {
          elements.shareResults.innerHTML = originalText;
        }, 2000);
      });
    }

    // Main form submission handler
    elements.form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (isAnalyzing) return;
      
      const youtubeUrl = elements.urlInput.value.trim();
      currentVideoUrl = youtubeUrl;
      
      // Validation
      if (!youtubeUrl) {
        elements.urlError.textContent = 'Please enter a YouTube URL';
        elements.urlError.classList.remove('hidden');
        return;
      }
      
      if (!isValidYouTubeUrl(youtubeUrl)) {
        elements.urlError.textContent = 'Please enter a valid YouTube URL';
        elements.urlError.classList.remove('hidden');
        return;
      }
      
      elements.urlError.classList.add('hidden');
      
      // Check if we're re-analyzing the same URL
      if (youtubeUrl === lastAnalyzedUrl && !elements.resultsContainer.classList.contains('hidden')) {
        return;
      }
      
      // Check cache
      const cached = analysisCache.get(youtubeUrl);
      if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
        showResults(cached.data.sentiment, cached.data.meta);
        return;
      }
      
      isAnalyzing = true;
      lastAnalyzedUrl = youtubeUrl;

      try {
        showLoading('Fetching comments...');
        
        const commentsResponse = await fetch('/api/comments', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ youtubeUrl }),
        });
        
        if (!commentsResponse.ok) {
          const errorData = await commentsResponse.json();
          throw new Error(errorData.error || 'Failed to fetch comments');
        }
        
        const commentsData = await commentsResponse.json();
        
        if (!commentsData.comments || commentsData.comments.length === 0) {
          throw new Error('No comments found for this video');
        }

        showLoading('Analyzing sentiment...');
        
        const sentimentResponse = await fetch('/api/sentiment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            comments: commentsData.comments,
            analyzedCount: commentsData.analyzedCount,
            totalComments: commentsData.totalComments,
            mostLiked: commentsData.mostLiked,
            videoInfo: commentsData.videoInfo,
            channelInfo: commentsData.channelInfo,
          }),
        });
        
        if (!sentimentResponse.ok) {
          const errorData = await sentimentResponse.json();
          throw new Error(errorData.error || 'Failed to analyze sentiment');
        }
        
        const sentimentData = await sentimentResponse.json();
        
        const meta = {
          analyzedCount: commentsData.analyzedCount,
          totalComments: commentsData.totalComments,
          mostLiked: commentsData.mostLiked,
          videoInfo: sentimentData.videoInfo,
          channelInfo: sentimentData.channelInfo,
        };
        
        // Cache the results
        analysisCache.set(youtubeUrl, {
          data: { sentiment: sentimentData, meta },
          timestamp: Date.now()
        });
        
        showResults(sentimentData, meta);
        
      } catch (error) {
        console.error('Analysis error:', error);
        showError(error instanceof Error ? error.message : 'An unexpected error occurred');
      } finally {
        isAnalyzing = false;
      }
    });

    // Analyze Another button
    if (elements.analyzeAnother) {
      elements.analyzeAnother.addEventListener('click', () => {
        elements.urlInput.value = '';
        hideAllStates();
        elements.urlInput.focus();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }

    // Share Results button
    if (elements.shareResults) {
      elements.shareResults.addEventListener('click', shareResults);
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Ctrl/Cmd + Enter to analyze
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && document.activeElement === elements.urlInput) {
        elements.form.dispatchEvent(new Event('submit'));
      }
      
      // Escape to clear results
      if (e.key === 'Escape' && !elements.resultsContainer.classList.contains('hidden')) {
        hideAllStates();
        elements.urlInput.value = '';
        elements.urlInput.focus();
      }
    });

    // Cookie Notice
    const cookieChoice = localStorage.getItem('cookieChoice');
    if (!cookieChoice) {
      setTimeout(() => {
        elements.cookieNotice.classList.remove('translate-y-full');
      }, 1000);
    }
    
    elements.acceptCookies.addEventListener('click', () => {
      localStorage.setItem('cookieChoice', 'accepted');
      elements.cookieNotice.classList.add('translate-y-full');
    });
    
    elements.declineCookies.addEventListener('click', () => {
      localStorage.setItem('cookieChoice', 'declined');
      elements.cookieNotice.classList.add('translate-y-full');
    });

    // Check URL params for shared videos
    const urlParams = new URLSearchParams(window.location.search);
    const sharedVideo = urlParams.get('video');
    if (sharedVideo) {
      elements.urlInput.value = sharedVideo;
      elements.form.dispatchEvent(new Event('submit'));
    }

    // Load history on startup
    loadHistory();
  });
  </script>
</Layout>